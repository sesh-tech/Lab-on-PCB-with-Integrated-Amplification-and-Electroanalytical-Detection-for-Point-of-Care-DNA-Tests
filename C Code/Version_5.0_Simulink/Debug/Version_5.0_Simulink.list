
Version_5.0_Simulink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc14  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800ddf8  0800ddf8  0000edf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e280  0800e280  000101d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e280  0800e280  0000f280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e288  0800e288  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e288  0800e288  0000f288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e28c  0800e28c  0000f28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800e290  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002670  200001d4  0800e464  000101d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002844  0800e464  00010844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee92  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000401c  00000000  00000000  0002f096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  000330b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001330  00000000  00000000  000349b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023887  00000000  00000000  00035ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f464  00000000  00000000  00059567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1214  00000000  00000000  000789cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159bdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f64  00000000  00000000  00159c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  00161b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800dddc 	.word	0x0800dddc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800dddc 	.word	0x0800dddc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <ADC_Create_Start>:
#ifdef ADC2self							//Use #define to enable channel, use only in analog.h file
uint16_t adc2values[__MAX_CHANNELS2__];	//Array input to the DMA, total number of channels is the size of the array, counting from 1
#endif									//Endif file guard

void ADC_Create_Start (ADC_HandleTypeDef *adchandle, int ADC_Number, int Total_Channels)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	 * Argument 1: ADC Handel Type Def, example: &hadc1
	 * Argument 2: ADC Number, example: 1 if ADC1 is being used
	 * Argument 3: Total number of channels of the particular ADC being used, if 10 channels of ADC1 are used, then input to this argument is 10
	 */

	if (ADC_Number == 1)															//Checks the ADC number
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d105      	bne.n	8001052 <ADC_Create_Start+0x1e>
	{
	#ifdef ADC1self																	//Use #define to enable channel, use only in analog.h file
		HAL_ADC_Start_DMA(adchandle, (uint32_t *)adc1values, Total_Channels);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	461a      	mov	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	@ (800106c <ADC_Create_Start+0x38>)
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f002 fbe5 	bl	800381c <HAL_ADC_Start_DMA>
	#endif																			//Endif file guard
	}

	if (ADC_Number == 2)															//Checks the ADC number
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d105      	bne.n	8001064 <ADC_Create_Start+0x30>
	{
	#ifdef ADC2self																	//Use #define to enable channel, use only in analog.h file
		HAL_ADC_Start_DMA(adchandle, (uint32_t *)adc2values, Total_Channels);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	461a      	mov	r2, r3
 800105c:	4904      	ldr	r1, [pc, #16]	@ (8001070 <ADC_Create_Start+0x3c>)
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f002 fbdc 	bl	800381c <HAL_ADC_Start_DMA>
	#ifdef ADC3self																	//Use #define to enable channel, use only in analog.h file
		HAL_ADC_Start_DMA(adchandle, (uint32_t *)adc3values, Total_Channels);
	#endif																			//Endif file guard
	}

}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200001f0 	.word	0x200001f0
 8001070:	200001fc 	.word	0x200001fc

08001074 <ADC_Channel_Init>:

void ADC_Channel_Init (struct ANALOGIN * analogin, int ADC_Number, int channel_rank)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
	 * Argument 1: ANALOGIN struct, named based on the analog input pin name, example: Pot1
	 * Argument 2: ADC Number, example: 1 if ADC1 is being used
	 * Argument 3: Rank of the Channel being initialized, example: if channel 5 of ADC1 has a Rank of 1, then input is 1
	 */

	analogin->ADC_number = ADC_Number;				//Writes the ADC number to the structure
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	601a      	str	r2, [r3, #0]
	analogin->Channel = channel_rank;				//Writes the channel rank to the structure
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	605a      	str	r2, [r3, #4]

}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <ADC_Calibrate>:

void ADC_Calibrate (int ADC_Number)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	if (ADC_Number == 1)															//Checks the ADC number
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d10b      	bne.n	80010be <ADC_Calibrate+0x26>
		{
		#ifdef ADC1self																	//Use #define to enable channel, use only in analog.h file
			HAL_ADC_Stop_DMA(&hadc1);
 80010a6:	480f      	ldr	r0, [pc, #60]	@ (80010e4 <ADC_Calibrate+0x4c>)
 80010a8:	f002 fc6c 	bl	8003984 <HAL_ADC_Stop_DMA>
			HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80010ac:	217f      	movs	r1, #127	@ 0x7f
 80010ae:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <ADC_Calibrate+0x4c>)
 80010b0:	f003 fb60 	bl	8004774 <HAL_ADCEx_Calibration_Start>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1values, __MAX_CHANNELS1__);
 80010b4:	2205      	movs	r2, #5
 80010b6:	490c      	ldr	r1, [pc, #48]	@ (80010e8 <ADC_Calibrate+0x50>)
 80010b8:	480a      	ldr	r0, [pc, #40]	@ (80010e4 <ADC_Calibrate+0x4c>)
 80010ba:	f002 fbaf 	bl	800381c <HAL_ADC_Start_DMA>
		#endif																			//Endif file guard
		}

		if (ADC_Number == 2)															//Checks the ADC number
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d10b      	bne.n	80010dc <ADC_Calibrate+0x44>
		{
		#ifdef ADC2self																	//Use #define to enable channel, use only in analog.h file
			HAL_ADC_Stop_DMA(&hadc2);
 80010c4:	4809      	ldr	r0, [pc, #36]	@ (80010ec <ADC_Calibrate+0x54>)
 80010c6:	f002 fc5d 	bl	8003984 <HAL_ADC_Stop_DMA>
			HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80010ca:	217f      	movs	r1, #127	@ 0x7f
 80010cc:	4807      	ldr	r0, [pc, #28]	@ (80010ec <ADC_Calibrate+0x54>)
 80010ce:	f003 fb51 	bl	8004774 <HAL_ADCEx_Calibration_Start>
			HAL_ADC_Start_DMA(&hadc2, (uint32_t *)adc2values, __MAX_CHANNELS2__);
 80010d2:	2202      	movs	r2, #2
 80010d4:	4906      	ldr	r1, [pc, #24]	@ (80010f0 <ADC_Calibrate+0x58>)
 80010d6:	4805      	ldr	r0, [pc, #20]	@ (80010ec <ADC_Calibrate+0x54>)
 80010d8:	f002 fba0 	bl	800381c <HAL_ADC_Start_DMA>
			HAL_ADC_Stop_DMA(&hadc3);
			HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
			HAL_ADC_Start_DMA(&hadc3, (uint32_t *)adc3values, __MAX_CHANNELS3__);
		#endif
		}
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200022dc 	.word	0x200022dc
 80010e8:	200001f0 	.word	0x200001f0
 80010ec:	20002348 	.word	0x20002348
 80010f0:	200001fc 	.word	0x200001fc

080010f4 <Analog_Value>:

uint16_t Analog_Value (struct ANALOGIN * analogin)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	 * Inputs:
	 * Argument 1: ANALOGIN struct, named based on the analog input pin name, example: Pot1
	*/

	#ifdef ADC1self										//Use #define to enable channel, use only in analog.h file
	if (analogin->ADC_number == 1)						//Checks the ADC number
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d106      	bne.n	8001112 <Analog_Value+0x1e>
		return(adc1values[analogin->Channel - 1]);		//Returns the ADC value from the array
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	3b01      	subs	r3, #1
 800110a:	4a0b      	ldr	r2, [pc, #44]	@ (8001138 <Analog_Value+0x44>)
 800110c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001110:	e00b      	b.n	800112a <Analog_Value+0x36>
	#endif												//Endif file guard

	#ifdef ADC2self										//Use #define to enable channel, use only in analog.h file
	if (analogin->ADC_number == 2)							//Checks the ADC number
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d106      	bne.n	8001128 <Analog_Value+0x34>
		return(adc2values[analogin->Channel - 1]);		//Returns the ADC value from the array
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	4a06      	ldr	r2, [pc, #24]	@ (800113c <Analog_Value+0x48>)
 8001122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001126:	e000      	b.n	800112a <Analog_Value+0x36>
	if (analogin->ADC_number == 3)							//Checks the ADC number
		return(adc3values[analogin->Channel - 1]);		//Returns the ADC value from the array
	#endif												//Endif file guard

	else
		return 0;
 8001128:	2300      	movs	r3, #0

}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	200001f0 	.word	0x200001f0
 800113c:	200001fc 	.word	0x200001fc

08001140 <DAC_Channel_Init>:
	#include "analog_out.h"

	void DAC_Channel_Init 	(struct ANALOGOUT * analogout, DAC_HandleTypeDef * hdac, int channel)		// Function to initialize the channel and create the struct with the ADC and channel number
	{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
		analogout->dachandle = hdac;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	601a      	str	r2, [r3, #0]
		analogout->Channel = channel;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	605a      	str	r2, [r3, #4]

		if (analogout->Channel == 1)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d105      	bne.n	800116c <DAC_Channel_Init+0x2c>
			HAL_DAC_Start (analogout->dachandle, DAC_CHANNEL_1);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f003 fd3c 	bl	8004be4 <HAL_DAC_Start>
		if (analogout->Channel == 2)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d105      	bne.n	8001180 <DAC_Channel_Init+0x40>
			HAL_DAC_Start (analogout->dachandle, DAC_CHANNEL_2);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2110      	movs	r1, #16
 800117a:	4618      	mov	r0, r3
 800117c:	f003 fd32 	bl	8004be4 <HAL_DAC_Start>
	}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <DAC_Set_Value>:

	void DAC_Set_Value 		(struct ANALOGOUT * analogout, uint16_t value)								// Function which returns the particular value of the ADC channel
	{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
		if(analogout->Channel == 1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d106      	bne.n	80011aa <DAC_Set_Value+0x22>
			 HAL_DAC_SetValue(analogout->dachandle, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint16_t) value);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	f003 fddf 	bl	8004d68 <HAL_DAC_SetValue>
		if(analogout->Channel == 2)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d106      	bne.n	80011c0 <DAC_Set_Value+0x38>
			 HAL_DAC_SetValue(analogout->dachandle, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (uint16_t) value);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	2200      	movs	r2, #0
 80011ba:	2110      	movs	r1, #16
 80011bc:	f003 fdd4 	bl	8004d68 <HAL_DAC_SetValue>
	}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <setControllerParameters>:

#include <math.h>
#include <stdlib.h>

void setControllerParameters(struct CONTROLLER *controller, float P_Gain, float I_Gain, float D_Gain, float Sampling_Freq, float Saturation_High, float Saturation_Low, float Default_Output)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	@ 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	61f8      	str	r0, [r7, #28]
 80011d0:	ed87 0a06 	vstr	s0, [r7, #24]
 80011d4:	edc7 0a05 	vstr	s1, [r7, #20]
 80011d8:	ed87 1a04 	vstr	s2, [r7, #16]
 80011dc:	edc7 1a03 	vstr	s3, [r7, #12]
 80011e0:	ed87 2a02 	vstr	s4, [r7, #8]
 80011e4:	edc7 2a01 	vstr	s5, [r7, #4]
 80011e8:	ed87 3a00 	vstr	s6, [r7]
  controller->p_Gain = P_Gain;
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	601a      	str	r2, [r3, #0]
  controller->i_Gain = I_Gain;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	605a      	str	r2, [r3, #4]
  controller->d_Gain = D_Gain;
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	609a      	str	r2, [r3, #8]

  controller->control_frequency = Sampling_Freq;	// Hz
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	60da      	str	r2, [r3, #12]

  controller->saturation_High = Saturation_High;
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	611a      	str	r2, [r3, #16]
  controller->saturation_Low  = Saturation_Low;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	615a      	str	r2, [r3, #20]

  controller->default_Output = Default_Output;
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	619a      	str	r2, [r3, #24]
  controller->onoff = 0;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	61da      	str	r2, [r3, #28]

  controller->error = 0;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
  controller->error_Prior = 0;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24
  controller->integral  = 0;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	629a      	str	r2, [r3, #40]	@ 0x28
  controller->integral_Prior  = 0;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	62da      	str	r2, [r3, #44]	@ 0x2c
  controller->derivative  = 0;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	631a      	str	r2, [r3, #48]	@ 0x30
  controller->windup  = 0;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	635a      	str	r2, [r3, #52]	@ 0x34
  controller->proportional = 0;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	639a      	str	r2, [r3, #56]	@ 0x38

  controller->controller_output = 0;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800125e:	bf00      	nop
 8001260:	3724      	adds	r7, #36	@ 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <setLPF_1Parameters>:

	#include "filter.h"

	
	void setLPF_1Parameters (struct LP_FILTER_1_ORDER *filter, float cutoffFreq, float samplingTime)
	{
 800126a:	b580      	push	{r7, lr}
 800126c:	b084      	sub	sp, #16
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	ed87 0a02 	vstr	s0, [r7, #8]
 8001276:	edc7 0a01 	vstr	s1, [r7, #4]

		filter->cutoff_freq = cutoffFreq;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	601a      	str	r2, [r3, #0]
		filter->sampling_time = samplingTime;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	605a      	str	r2, [r3, #4]

		filter->reliance_current = 1 - expf(-filter->sampling_time/filter->cutoff_freq);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	edd3 7a01 	vldr	s15, [r3, #4]
 800128c:	eeb1 7a67 	vneg.f32	s14, s15
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	edd3 7a00 	vldr	s15, [r3]
 8001296:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800129a:	eeb0 0a66 	vmov.f32	s0, s13
 800129e:	f00c fc69 	bl	800db74 <expf>
 80012a2:	eef0 7a40 	vmov.f32	s15, s0
 80012a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	edc3 7a02 	vstr	s15, [r3, #8]
		filter->reliance_previous = expf(-filter->sampling_time/filter->cutoff_freq);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012ba:	eeb1 7a67 	vneg.f32	s14, s15
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012c8:	eeb0 0a66 	vmov.f32	s0, s13
 80012cc:	f00c fc52 	bl	800db74 <expf>
 80012d0:	eef0 7a40 	vmov.f32	s15, s0
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	edc3 7a03 	vstr	s15, [r3, #12]

		filter->previous_output = 0;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
		filter->output = 0;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]

	}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fa:	f001 fe0c 	bl	8002f16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fe:	f000 fa1b 	bl	8001738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001302:	f000 fe09 	bl	8001f18 <MX_GPIO_Init>
  MX_DMA_Init();
 8001306:	f000 fdd5 	bl	8001eb4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800130a:	f000 fd87 	bl	8001e1c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800130e:	f000 fa5f 	bl	80017d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001312:	f000 fb15 	bl	8001940 <MX_ADC2_Init>
  MX_DAC1_Init();
 8001316:	f000 fb89 	bl	8001a2c <MX_DAC1_Init>
  MX_TIM1_Init();
 800131a:	f000 fbcb 	bl	8001ab4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800131e:	f000 fc5d 	bl	8001bdc <MX_TIM2_Init>
  MX_TIM4_Init();
 8001322:	f000 fcb5 	bl	8001c90 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001326:	f000 fd0d 	bl	8001d44 <MX_TIM6_Init>
  MX_TIM7_Init();
 800132a:	f000 fd41 	bl	8001db0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */


    ADC_Create_Start (&hadc1, 1, 5);
 800132e:	2205      	movs	r2, #5
 8001330:	2101      	movs	r1, #1
 8001332:	48a6      	ldr	r0, [pc, #664]	@ (80015cc <main+0x2d8>)
 8001334:	f7ff fe7e 	bl	8001034 <ADC_Create_Start>
    ADC_Create_Start (&hadc2, 2, 2);
 8001338:	2202      	movs	r2, #2
 800133a:	2102      	movs	r1, #2
 800133c:	48a4      	ldr	r0, [pc, #656]	@ (80015d0 <main+0x2dc>)
 800133e:	f7ff fe79 	bl	8001034 <ADC_Create_Start>

    ADC_Channel_Init (&Air_Heater_Voltage,	1, 1);
 8001342:	2201      	movs	r2, #1
 8001344:	2101      	movs	r1, #1
 8001346:	48a3      	ldr	r0, [pc, #652]	@ (80015d4 <main+0x2e0>)
 8001348:	f7ff fe94 	bl	8001074 <ADC_Channel_Init>
    ADC_Channel_Init (&Main_Heater_Voltage,	1, 2);
 800134c:	2202      	movs	r2, #2
 800134e:	2101      	movs	r1, #1
 8001350:	48a1      	ldr	r0, [pc, #644]	@ (80015d8 <main+0x2e4>)
 8001352:	f7ff fe8f 	bl	8001074 <ADC_Channel_Init>

    ADC_Channel_Init (&Electro_Chem_Result, 	1, 3);
 8001356:	2203      	movs	r2, #3
 8001358:	2101      	movs	r1, #1
 800135a:	48a0      	ldr	r0, [pc, #640]	@ (80015dc <main+0x2e8>)
 800135c:	f7ff fe8a 	bl	8001074 <ADC_Channel_Init>

    ADC_Channel_Init (&Internal_Temp, 		1, 4);
 8001360:	2204      	movs	r2, #4
 8001362:	2101      	movs	r1, #1
 8001364:	489e      	ldr	r0, [pc, #632]	@ (80015e0 <main+0x2ec>)
 8001366:	f7ff fe85 	bl	8001074 <ADC_Channel_Init>
    ADC_Channel_Init (&Internal_Ref_Voltage, 	1, 5);
 800136a:	2205      	movs	r2, #5
 800136c:	2101      	movs	r1, #1
 800136e:	489d      	ldr	r0, [pc, #628]	@ (80015e4 <main+0x2f0>)
 8001370:	f7ff fe80 	bl	8001074 <ADC_Channel_Init>

    ADC_Channel_Init (&Air_Heater_Current,	2, 1);
 8001374:	2201      	movs	r2, #1
 8001376:	2102      	movs	r1, #2
 8001378:	489b      	ldr	r0, [pc, #620]	@ (80015e8 <main+0x2f4>)
 800137a:	f7ff fe7b 	bl	8001074 <ADC_Channel_Init>
    ADC_Channel_Init (&Main_Heater_Current,	2, 2);
 800137e:	2202      	movs	r2, #2
 8001380:	2102      	movs	r1, #2
 8001382:	489a      	ldr	r0, [pc, #616]	@ (80015ec <main+0x2f8>)
 8001384:	f7ff fe76 	bl	8001074 <ADC_Channel_Init>

    ADC_Calibrate (1);
 8001388:	2001      	movs	r0, #1
 800138a:	f7ff fe85 	bl	8001098 <ADC_Calibrate>
    ADC_Calibrate (2);
 800138e:	2002      	movs	r0, #2
 8001390:	f7ff fe82 	bl	8001098 <ADC_Calibrate>

    DAC_Channel_Init(&ElectroChem_Set, &hdac1, 1);
 8001394:	2201      	movs	r2, #1
 8001396:	4996      	ldr	r1, [pc, #600]	@ (80015f0 <main+0x2fc>)
 8001398:	4896      	ldr	r0, [pc, #600]	@ (80015f4 <main+0x300>)
 800139a:	f7ff fed1 	bl	8001140 <DAC_Channel_Init>
    DAC_Channel_Init(&ElectroChem_Offset, &hdac1, 2);
 800139e:	2202      	movs	r2, #2
 80013a0:	4993      	ldr	r1, [pc, #588]	@ (80015f0 <main+0x2fc>)
 80013a2:	4895      	ldr	r0, [pc, #596]	@ (80015f8 <main+0x304>)
 80013a4:	f7ff fecc 	bl	8001140 <DAC_Channel_Init>

    PWMInit(&airheater, TIM2, &htim2, 1, HAL_RCC_GetPCLK1Freq(), 100000);
 80013a8:	f005 f914 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4a93      	ldr	r2, [pc, #588]	@ (80015fc <main+0x308>)
 80013b0:	9201      	str	r2, [sp, #4]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2301      	movs	r3, #1
 80013b6:	4a92      	ldr	r2, [pc, #584]	@ (8001600 <main+0x30c>)
 80013b8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80013bc:	4891      	ldr	r0, [pc, #580]	@ (8001604 <main+0x310>)
 80013be:	f000 ffeb 	bl	8002398 <PWMInit>
    PWMInit(&mainheater, TIM4, &htim4, 1, HAL_RCC_GetPCLK1Freq(), 60000);		// Change to 50kHz or higher, check if possible
 80013c2:	f005 f907 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80013cc:	9201      	str	r2, [sp, #4]
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2301      	movs	r3, #1
 80013d2:	4a8d      	ldr	r2, [pc, #564]	@ (8001608 <main+0x314>)
 80013d4:	498d      	ldr	r1, [pc, #564]	@ (800160c <main+0x318>)
 80013d6:	488e      	ldr	r0, [pc, #568]	@ (8001610 <main+0x31c>)
 80013d8:	f000 ffde 	bl	8002398 <PWMInit>
    PWMInit(&fan, TIM1, &htim1, 2, HAL_RCC_GetPCLK1Freq(), 5000);
 80013dc:	f005 f8fa 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013e6:	9201      	str	r2, [sp, #4]
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2302      	movs	r3, #2
 80013ec:	4a89      	ldr	r2, [pc, #548]	@ (8001614 <main+0x320>)
 80013ee:	498a      	ldr	r1, [pc, #552]	@ (8001618 <main+0x324>)
 80013f0:	488a      	ldr	r0, [pc, #552]	@ (800161c <main+0x328>)
 80013f2:	f000 ffd1 	bl	8002398 <PWMInit>

    setLPF_1Parameters (&Main_Heater_Current_Filter,  	0.05, 0.001);
 80013f6:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 8001620 <main+0x32c>
 80013fa:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 8001624 <main+0x330>
 80013fe:	488a      	ldr	r0, [pc, #552]	@ (8001628 <main+0x334>)
 8001400:	f7ff ff33 	bl	800126a <setLPF_1Parameters>
    setLPF_1Parameters (&Main_Heater_Voltage_Filter, 		0.05, 0.001);
 8001404:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8001620 <main+0x32c>
 8001408:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 8001624 <main+0x330>
 800140c:	4887      	ldr	r0, [pc, #540]	@ (800162c <main+0x338>)
 800140e:	f7ff ff2c 	bl	800126a <setLPF_1Parameters>
    setLPF_1Parameters (&Main_Heater_Resistance_Filter, 	80, 0.001);
 8001412:	eddf 0a83 	vldr	s1, [pc, #524]	@ 8001620 <main+0x32c>
 8001416:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 8001630 <main+0x33c>
 800141a:	4886      	ldr	r0, [pc, #536]	@ (8001634 <main+0x340>)
 800141c:	f7ff ff25 	bl	800126a <setLPF_1Parameters>

    setControllerParameters(&main_Heater_Controller, 30.0, 1.0, 0, 200, 100, 2.0, 2.0);
 8001420:	eeb0 3a00 	vmov.f32	s6, #0	@ 0x40000000  2.0
 8001424:	eef0 2a00 	vmov.f32	s5, #0	@ 0x40000000  2.0
 8001428:	ed9f 2a83 	vldr	s4, [pc, #524]	@ 8001638 <main+0x344>
 800142c:	eddf 1a83 	vldr	s3, [pc, #524]	@ 800163c <main+0x348>
 8001430:	ed9f 1a83 	vldr	s2, [pc, #524]	@ 8001640 <main+0x34c>
 8001434:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001438:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800143c:	4881      	ldr	r0, [pc, #516]	@ (8001644 <main+0x350>)
 800143e:	f7ff fec3 	bl	80011c8 <setControllerParameters>

    HAL_Delay(2000);
 8001442:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001446:	f001 fdd7 	bl	8002ff8 <HAL_Delay>

    TimerInterruptInit (&Task1, TIM6, &htim6, HAL_RCC_GetPCLK1Freq(), 10000000);
 800144a:	f005 f8c3 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
 800144e:	4603      	mov	r3, r0
 8001450:	4a7d      	ldr	r2, [pc, #500]	@ (8001648 <main+0x354>)
 8001452:	9200      	str	r2, [sp, #0]
 8001454:	4a7d      	ldr	r2, [pc, #500]	@ (800164c <main+0x358>)
 8001456:	497e      	ldr	r1, [pc, #504]	@ (8001650 <main+0x35c>)
 8001458:	487e      	ldr	r0, [pc, #504]	@ (8001654 <main+0x360>)
 800145a:	f001 fcbb 	bl	8002dd4 <TimerInterruptInit>
    TimerInterruptInit (&Task2, TIM7, &htim7, HAL_RCC_GetPCLK1Freq(), 100);
 800145e:	f005 f8b9 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
 8001462:	4603      	mov	r3, r0
 8001464:	2264      	movs	r2, #100	@ 0x64
 8001466:	9200      	str	r2, [sp, #0]
 8001468:	4a7b      	ldr	r2, [pc, #492]	@ (8001658 <main+0x364>)
 800146a:	497c      	ldr	r1, [pc, #496]	@ (800165c <main+0x368>)
 800146c:	487c      	ldr	r0, [pc, #496]	@ (8001660 <main+0x36c>)
 800146e:	f001 fcb1 	bl	8002dd4 <TimerInterruptInit>

    DAC_Set_Value(&ElectroChem_Set, 2000);
 8001472:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001476:	485f      	ldr	r0, [pc, #380]	@ (80015f4 <main+0x300>)
 8001478:	f7ff fe86 	bl	8001188 <DAC_Set_Value>
    DAC_Set_Value(&ElectroChem_Offset, 3000);
 800147c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001480:	485d      	ldr	r0, [pc, #372]	@ (80015f8 <main+0x304>)
 8001482:	f7ff fe81 	bl	8001188 <DAC_Set_Value>

//    HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, sizeof(UART2_rxBuffer));

    SetPWMDuty(&mainheater, 2.0);
 8001486:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800148a:	4861      	ldr	r0, [pc, #388]	@ (8001610 <main+0x31c>)
 800148c:	f000 ffec 	bl	8002468 <SetPWMDuty>
    StartPWM(&mainheater);
 8001490:	485f      	ldr	r0, [pc, #380]	@ (8001610 <main+0x31c>)
 8001492:	f001 f85b 	bl	800254c <StartPWM>

    StartPWM(&fan);
 8001496:	4861      	ldr	r0, [pc, #388]	@ (800161c <main+0x328>)
 8001498:	f001 f858 	bl	800254c <StartPWM>

    main_Heater_Controller.onoff = 0;
 800149c:	4b69      	ldr	r3, [pc, #420]	@ (8001644 <main+0x350>)
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	61da      	str	r2, [r3, #28]

    main_Heater_Reference = 35;
 80014a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001664 <main+0x370>)
 80014a6:	4a70      	ldr	r2, [pc, #448]	@ (8001668 <main+0x374>)
 80014a8:	601a      	str	r2, [r3, #0]

    linear_term = 1.4;
 80014aa:	4b70      	ldr	r3, [pc, #448]	@ (800166c <main+0x378>)
 80014ac:	4a70      	ldr	r2, [pc, #448]	@ (8001670 <main+0x37c>)
 80014ae:	601a      	str	r2, [r3, #0]
    offset_term = 28.45;
 80014b0:	4b70      	ldr	r3, [pc, #448]	@ (8001674 <main+0x380>)
 80014b2:	4a71      	ldr	r2, [pc, #452]	@ (8001678 <main+0x384>)
 80014b4:	601a      	str	r2, [r3, #0]

    start_flag = 0;
 80014b6:	4b71      	ldr	r3, [pc, #452]	@ (800167c <main+0x388>)
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]

    initializeMovingAverage(&Main_Heater_Voltage_MV);
 80014be:	4870      	ldr	r0, [pc, #448]	@ (8001680 <main+0x38c>)
 80014c0:	f000 fdc8 	bl	8002054 <initializeMovingAverage>
    initializeMovingAverage(&Main_Heater_Current_MV);
 80014c4:	486f      	ldr	r0, [pc, #444]	@ (8001684 <main+0x390>)
 80014c6:	f000 fdc5 	bl	8002054 <initializeMovingAverage>

    StartInterrupt (&Task1);
 80014ca:	4862      	ldr	r0, [pc, #392]	@ (8001654 <main+0x360>)
 80014cc:	f001 fcec 	bl	8002ea8 <StartInterrupt>
    StartInterrupt (&Task2);
 80014d0:	4863      	ldr	r0, [pc, #396]	@ (8001660 <main+0x36c>)
 80014d2:	f001 fce9 	bl	8002ea8 <StartInterrupt>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive(&huart2, UART2_rxBuffer, 32, HAL_MAX_DELAY);
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	2220      	movs	r2, #32
 80014dc:	496a      	ldr	r1, [pc, #424]	@ (8001688 <main+0x394>)
 80014de:	486b      	ldr	r0, [pc, #428]	@ (800168c <main+0x398>)
 80014e0:	f006 fd6a 	bl	8007fb8 <HAL_UART_Receive>

	  if((UART2_rxBuffer[0] == 65) && (UART2_rxBuffer[1] == 66) && (UART2_rxBuffer[2] == 67) && (UART2_rxBuffer[3] == 68) &&
 80014e4:	4b68      	ldr	r3, [pc, #416]	@ (8001688 <main+0x394>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b41      	cmp	r3, #65	@ 0x41
 80014ea:	d1f4      	bne.n	80014d6 <main+0x1e2>
 80014ec:	4b66      	ldr	r3, [pc, #408]	@ (8001688 <main+0x394>)
 80014ee:	785b      	ldrb	r3, [r3, #1]
 80014f0:	2b42      	cmp	r3, #66	@ 0x42
 80014f2:	d1f0      	bne.n	80014d6 <main+0x1e2>
 80014f4:	4b64      	ldr	r3, [pc, #400]	@ (8001688 <main+0x394>)
 80014f6:	789b      	ldrb	r3, [r3, #2]
 80014f8:	2b43      	cmp	r3, #67	@ 0x43
 80014fa:	d1ec      	bne.n	80014d6 <main+0x1e2>
 80014fc:	4b62      	ldr	r3, [pc, #392]	@ (8001688 <main+0x394>)
 80014fe:	78db      	ldrb	r3, [r3, #3]
 8001500:	2b44      	cmp	r3, #68	@ 0x44
 8001502:	d1e8      	bne.n	80014d6 <main+0x1e2>
			  (UART2_rxBuffer[28] == 97) && (UART2_rxBuffer[29] == 98) && (UART2_rxBuffer[30] == 99) && (UART2_rxBuffer[31] == 100))
 8001504:	4b60      	ldr	r3, [pc, #384]	@ (8001688 <main+0x394>)
 8001506:	7f1b      	ldrb	r3, [r3, #28]
	  if((UART2_rxBuffer[0] == 65) && (UART2_rxBuffer[1] == 66) && (UART2_rxBuffer[2] == 67) && (UART2_rxBuffer[3] == 68) &&
 8001508:	2b61      	cmp	r3, #97	@ 0x61
 800150a:	d1e4      	bne.n	80014d6 <main+0x1e2>
			  (UART2_rxBuffer[28] == 97) && (UART2_rxBuffer[29] == 98) && (UART2_rxBuffer[30] == 99) && (UART2_rxBuffer[31] == 100))
 800150c:	4b5e      	ldr	r3, [pc, #376]	@ (8001688 <main+0x394>)
 800150e:	7f5b      	ldrb	r3, [r3, #29]
 8001510:	2b62      	cmp	r3, #98	@ 0x62
 8001512:	d1e0      	bne.n	80014d6 <main+0x1e2>
 8001514:	4b5c      	ldr	r3, [pc, #368]	@ (8001688 <main+0x394>)
 8001516:	7f9b      	ldrb	r3, [r3, #30]
 8001518:	2b63      	cmp	r3, #99	@ 0x63
 800151a:	d1dc      	bne.n	80014d6 <main+0x1e2>
 800151c:	4b5a      	ldr	r3, [pc, #360]	@ (8001688 <main+0x394>)
 800151e:	7fdb      	ldrb	r3, [r3, #31]
 8001520:	2b64      	cmp	r3, #100	@ 0x64
 8001522:	d1d8      	bne.n	80014d6 <main+0x1e2>
	  {
		  start_flag = 1;
 8001524:	4b55      	ldr	r3, [pc, #340]	@ (800167c <main+0x388>)
 8001526:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800152a:	601a      	str	r2, [r3, #0]

		  memcpy(&a, &UART2_rxBuffer[4], 4);
 800152c:	4b56      	ldr	r3, [pc, #344]	@ (8001688 <main+0x394>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	4a57      	ldr	r2, [pc, #348]	@ (8001690 <main+0x39c>)
 8001532:	6013      	str	r3, [r2, #0]
		  SetPWMDuty(&mainheater, a);
 8001534:	4b56      	ldr	r3, [pc, #344]	@ (8001690 <main+0x39c>)
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	eeb0 0a67 	vmov.f32	s0, s15
 800153e:	4834      	ldr	r0, [pc, #208]	@ (8001610 <main+0x31c>)
 8001540:	f000 ff92 	bl	8002468 <SetPWMDuty>

		  memcpy(&b, &UART2_rxBuffer[8], 4);
 8001544:	4b50      	ldr	r3, [pc, #320]	@ (8001688 <main+0x394>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	4a52      	ldr	r2, [pc, #328]	@ (8001694 <main+0x3a0>)
 800154a:	6013      	str	r3, [r2, #0]
//		  SetPWMDuty(&airheater, b);

		  memcpy(&c, &UART2_rxBuffer[12], 4);
 800154c:	4b4e      	ldr	r3, [pc, #312]	@ (8001688 <main+0x394>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	4a51      	ldr	r2, [pc, #324]	@ (8001698 <main+0x3a4>)
 8001552:	6013      	str	r3, [r2, #0]
		  SetPWMDuty(&fan, c);
 8001554:	4b50      	ldr	r3, [pc, #320]	@ (8001698 <main+0x3a4>)
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	eeb0 0a67 	vmov.f32	s0, s15
 800155e:	482f      	ldr	r0, [pc, #188]	@ (800161c <main+0x328>)
 8001560:	f000 ff82 	bl	8002468 <SetPWMDuty>

		  memcpy(&d, &UART2_rxBuffer[16], 4);
 8001564:	4b48      	ldr	r3, [pc, #288]	@ (8001688 <main+0x394>)
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	4a4c      	ldr	r2, [pc, #304]	@ (800169c <main+0x3a8>)
 800156a:	6013      	str	r3, [r2, #0]
		  DAC_Set_Value(&ElectroChem_Set, d);
 800156c:	4b4b      	ldr	r3, [pc, #300]	@ (800169c <main+0x3a8>)
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001576:	ee17 3a90 	vmov	r3, s15
 800157a:	b29b      	uxth	r3, r3
 800157c:	4619      	mov	r1, r3
 800157e:	481d      	ldr	r0, [pc, #116]	@ (80015f4 <main+0x300>)
 8001580:	f7ff fe02 	bl	8001188 <DAC_Set_Value>

		  memcpy(&e, &UART2_rxBuffer[20], 4);
 8001584:	4b40      	ldr	r3, [pc, #256]	@ (8001688 <main+0x394>)
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	4a45      	ldr	r2, [pc, #276]	@ (80016a0 <main+0x3ac>)
 800158a:	6013      	str	r3, [r2, #0]
		  DAC_Set_Value(&ElectroChem_Offset, e);
 800158c:	4b44      	ldr	r3, [pc, #272]	@ (80016a0 <main+0x3ac>)
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001596:	ee17 3a90 	vmov	r3, s15
 800159a:	b29b      	uxth	r3, r3
 800159c:	4619      	mov	r1, r3
 800159e:	4816      	ldr	r0, [pc, #88]	@ (80015f8 <main+0x304>)
 80015a0:	f7ff fdf2 	bl	8001188 <DAC_Set_Value>

		  memcpy(&f, &UART2_rxBuffer[24], 4);
 80015a4:	4b38      	ldr	r3, [pc, #224]	@ (8001688 <main+0x394>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a3e      	ldr	r2, [pc, #248]	@ (80016a4 <main+0x3b0>)
 80015aa:	6013      	str	r3, [r2, #0]
		  if(f == 1)
 80015ac:	4b3d      	ldr	r3, [pc, #244]	@ (80016a4 <main+0x3b0>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015b6:	eef4 7a47 	vcmp.f32	s15, s14
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	d175      	bne.n	80016ac <main+0x3b8>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2110      	movs	r1, #16
 80015c4:	4838      	ldr	r0, [pc, #224]	@ (80016a8 <main+0x3b4>)
 80015c6:	f004 fa7d 	bl	8005ac4 <HAL_GPIO_WritePin>
 80015ca:	e074      	b.n	80016b6 <main+0x3c2>
 80015cc:	200022dc 	.word	0x200022dc
 80015d0:	20002348 	.word	0x20002348
 80015d4:	20000284 	.word	0x20000284
 80015d8:	2000028c 	.word	0x2000028c
 80015dc:	20000294 	.word	0x20000294
 80015e0:	2000029c 	.word	0x2000029c
 80015e4:	200002a4 	.word	0x200002a4
 80015e8:	200002ac 	.word	0x200002ac
 80015ec:	200002b4 	.word	0x200002b4
 80015f0:	20002474 	.word	0x20002474
 80015f4:	200002c4 	.word	0x200002c4
 80015f8:	200002bc 	.word	0x200002bc
 80015fc:	000186a0 	.word	0x000186a0
 8001600:	200024d4 	.word	0x200024d4
 8001604:	20000230 	.word	0x20000230
 8001608:	20002520 	.word	0x20002520
 800160c:	40000800 	.word	0x40000800
 8001610:	2000024c 	.word	0x2000024c
 8001614:	20002488 	.word	0x20002488
 8001618:	40012c00 	.word	0x40012c00
 800161c:	20000268 	.word	0x20000268
 8001620:	3a83126f 	.word	0x3a83126f
 8001624:	3d4ccccd 	.word	0x3d4ccccd
 8001628:	2000030c 	.word	0x2000030c
 800162c:	20000324 	.word	0x20000324
 8001630:	42a00000 	.word	0x42a00000
 8001634:	2000033c 	.word	0x2000033c
 8001638:	42c80000 	.word	0x42c80000
 800163c:	43480000 	.word	0x43480000
 8001640:	00000000 	.word	0x00000000
 8001644:	200002cc 	.word	0x200002cc
 8001648:	00989680 	.word	0x00989680
 800164c:	2000256c 	.word	0x2000256c
 8001650:	40001000 	.word	0x40001000
 8001654:	20000200 	.word	0x20000200
 8001658:	200025b8 	.word	0x200025b8
 800165c:	40001400 	.word	0x40001400
 8001660:	20000218 	.word	0x20000218
 8001664:	200022c8 	.word	0x200022c8
 8001668:	420c0000 	.word	0x420c0000
 800166c:	200022d4 	.word	0x200022d4
 8001670:	3fb33333 	.word	0x3fb33333
 8001674:	200022d8 	.word	0x200022d8
 8001678:	41e3999a 	.word	0x41e3999a
 800167c:	200022cc 	.word	0x200022cc
 8001680:	20000354 	.word	0x20000354
 8001684:	20001304 	.word	0x20001304
 8001688:	200026b4 	.word	0x200026b4
 800168c:	20002604 	.word	0x20002604
 8001690:	200026d4 	.word	0x200026d4
 8001694:	200026d8 	.word	0x200026d8
 8001698:	200026dc 	.word	0x200026dc
 800169c:	200026e0 	.word	0x200026e0
 80016a0:	200026e4 	.word	0x200026e4
 80016a4:	200026e8 	.word	0x200026e8
 80016a8:	48000400 	.word	0x48000400
		  else
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2110      	movs	r1, #16
 80016b0:	4816      	ldr	r0, [pc, #88]	@ (800170c <main+0x418>)
 80016b2:	f004 fa07 	bl	8005ac4 <HAL_GPIO_WritePin>

		  memset(UART2_rxBuffer, 0, 32);
 80016b6:	2220      	movs	r2, #32
 80016b8:	2100      	movs	r1, #0
 80016ba:	4815      	ldr	r0, [pc, #84]	@ (8001710 <main+0x41c>)
 80016bc:	f008 fe85 	bl	800a3ca <memset>

		  float transmit_header = 1234;
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <main+0x420>)
 80016c2:	607b      	str	r3, [r7, #4]
		  float transmit_terminator = 9876;
 80016c4:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <main+0x424>)
 80016c6:	603b      	str	r3, [r7, #0]
		  memcpy(&UART2_txBuffer[0], &transmit_header, 4);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a14      	ldr	r2, [pc, #80]	@ (800171c <main+0x428>)
 80016cc:	6013      	str	r3, [r2, #0]
		  memcpy(&UART2_txBuffer[4], &main_Heater_Voltage, 4);
 80016ce:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <main+0x42c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a12      	ldr	r2, [pc, #72]	@ (800171c <main+0x428>)
 80016d4:	6053      	str	r3, [r2, #4]
		  memcpy(&UART2_txBuffer[8], &main_Heater_Current, 4);
 80016d6:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <main+0x430>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a10      	ldr	r2, [pc, #64]	@ (800171c <main+0x428>)
 80016dc:	6093      	str	r3, [r2, #8]
		  memcpy(&UART2_txBuffer[12], &air_Heater_Voltage, 4);
 80016de:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <main+0x434>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a0e      	ldr	r2, [pc, #56]	@ (800171c <main+0x428>)
 80016e4:	60d3      	str	r3, [r2, #12]
		  memcpy(&UART2_txBuffer[16], &air_Heater_Current, 4);
 80016e6:	4b11      	ldr	r3, [pc, #68]	@ (800172c <main+0x438>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a0c      	ldr	r2, [pc, #48]	@ (800171c <main+0x428>)
 80016ec:	6113      	str	r3, [r2, #16]
		  memcpy(&UART2_txBuffer[20], &electro_Chem_Result, 4);
 80016ee:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <main+0x43c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <main+0x428>)
 80016f4:	6153      	str	r3, [r2, #20]
		  memcpy(&UART2_txBuffer[24], &transmit_terminator, 4);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	4a08      	ldr	r2, [pc, #32]	@ (800171c <main+0x428>)
 80016fa:	6193      	str	r3, [r2, #24]

		  HAL_UART_Transmit(&huart2, UART2_txBuffer, 28, HAL_MAX_DELAY);
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001700:	221c      	movs	r2, #28
 8001702:	4906      	ldr	r1, [pc, #24]	@ (800171c <main+0x428>)
 8001704:	480b      	ldr	r0, [pc, #44]	@ (8001734 <main+0x440>)
 8001706:	f006 fbc9 	bl	8007e9c <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart2, UART2_rxBuffer, 32, HAL_MAX_DELAY);
 800170a:	e6e4      	b.n	80014d6 <main+0x1e2>
 800170c:	48000400 	.word	0x48000400
 8001710:	200026b4 	.word	0x200026b4
 8001714:	449a4000 	.word	0x449a4000
 8001718:	461a5000 	.word	0x461a5000
 800171c:	20002698 	.word	0x20002698
 8001720:	200022bc 	.word	0x200022bc
 8001724:	200022b4 	.word	0x200022b4
 8001728:	200022c0 	.word	0x200022c0
 800172c:	200022b8 	.word	0x200022b8
 8001730:	200022c4 	.word	0x200022c4
 8001734:	20002604 	.word	0x20002604

08001738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b094      	sub	sp, #80	@ 0x50
 800173c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173e:	f107 0318 	add.w	r3, r7, #24
 8001742:	2238      	movs	r2, #56	@ 0x38
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f008 fe3f 	bl	800a3ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800175a:	2000      	movs	r0, #0
 800175c:	f004 f9ca 	bl	8005af4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001760:	2302      	movs	r3, #2
 8001762:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001764:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800176a:	2340      	movs	r3, #64	@ 0x40
 800176c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800176e:	2302      	movs	r3, #2
 8001770:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001772:	2302      	movs	r3, #2
 8001774:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001776:	2304      	movs	r3, #4
 8001778:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800177a:	2355      	movs	r3, #85	@ 0x55
 800177c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800177e:	2302      	movs	r3, #2
 8001780:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001782:	2302      	movs	r3, #2
 8001784:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001786:	2302      	movs	r3, #2
 8001788:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178a:	f107 0318 	add.w	r3, r7, #24
 800178e:	4618      	mov	r0, r3
 8001790:	f004 fa64 	bl	8005c5c <HAL_RCC_OscConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800179a:	f000 fc55 	bl	8002048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179e:	230f      	movs	r3, #15
 80017a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a2:	2303      	movs	r3, #3
 80017a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	2104      	movs	r1, #4
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 fd62 	bl	8006280 <HAL_RCC_ClockConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80017c2:	f000 fc41 	bl	8002048 <Error_Handler>
  }
}
 80017c6:	bf00      	nop
 80017c8:	3750      	adds	r7, #80	@ 0x50
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08c      	sub	sp, #48	@ 0x30
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2220      	movs	r2, #32
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f008 fdee 	bl	800a3ca <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001928 <MX_ADC1_Init+0x158>)
 80017f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80017f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80017f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001928 <MX_ADC1_Init+0x158>)
 80017f8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80017fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001928 <MX_ADC1_Init+0x158>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001804:	4b48      	ldr	r3, [pc, #288]	@ (8001928 <MX_ADC1_Init+0x158>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800180a:	4b47      	ldr	r3, [pc, #284]	@ (8001928 <MX_ADC1_Init+0x158>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001810:	4b45      	ldr	r3, [pc, #276]	@ (8001928 <MX_ADC1_Init+0x158>)
 8001812:	2201      	movs	r2, #1
 8001814:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001816:	4b44      	ldr	r3, [pc, #272]	@ (8001928 <MX_ADC1_Init+0x158>)
 8001818:	2204      	movs	r2, #4
 800181a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800181c:	4b42      	ldr	r3, [pc, #264]	@ (8001928 <MX_ADC1_Init+0x158>)
 800181e:	2200      	movs	r2, #0
 8001820:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001822:	4b41      	ldr	r3, [pc, #260]	@ (8001928 <MX_ADC1_Init+0x158>)
 8001824:	2201      	movs	r2, #1
 8001826:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 5;
 8001828:	4b3f      	ldr	r3, [pc, #252]	@ (8001928 <MX_ADC1_Init+0x158>)
 800182a:	2205      	movs	r2, #5
 800182c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800182e:	4b3e      	ldr	r3, [pc, #248]	@ (8001928 <MX_ADC1_Init+0x158>)
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001836:	4b3c      	ldr	r3, [pc, #240]	@ (8001928 <MX_ADC1_Init+0x158>)
 8001838:	2200      	movs	r2, #0
 800183a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800183c:	4b3a      	ldr	r3, [pc, #232]	@ (8001928 <MX_ADC1_Init+0x158>)
 800183e:	2200      	movs	r2, #0
 8001840:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001842:	4b39      	ldr	r3, [pc, #228]	@ (8001928 <MX_ADC1_Init+0x158>)
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800184a:	4b37      	ldr	r3, [pc, #220]	@ (8001928 <MX_ADC1_Init+0x158>)
 800184c:	2200      	movs	r2, #0
 800184e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001850:	4b35      	ldr	r3, [pc, #212]	@ (8001928 <MX_ADC1_Init+0x158>)
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001858:	4833      	ldr	r0, [pc, #204]	@ (8001928 <MX_ADC1_Init+0x158>)
 800185a:	f001 fe5b 	bl	8003514 <HAL_ADC_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001864:	f000 fbf0 	bl	8002048 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001868:	2300      	movs	r3, #0
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800186c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	482d      	ldr	r0, [pc, #180]	@ (8001928 <MX_ADC1_Init+0x158>)
 8001874:	f002 ffe0 	bl	8004838 <HAL_ADCEx_MultiModeConfigChannel>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800187e:	f000 fbe3 	bl	8002048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001882:	4b2a      	ldr	r3, [pc, #168]	@ (800192c <MX_ADC1_Init+0x15c>)
 8001884:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001886:	2306      	movs	r3, #6
 8001888:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800188a:	2304      	movs	r3, #4
 800188c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800188e:	237f      	movs	r3, #127	@ 0x7f
 8001890:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001892:	2304      	movs	r3, #4
 8001894:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	4619      	mov	r1, r3
 800189e:	4822      	ldr	r0, [pc, #136]	@ (8001928 <MX_ADC1_Init+0x158>)
 80018a0:	f002 f8f0 	bl	8003a84 <HAL_ADC_ConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80018aa:	f000 fbcd 	bl	8002048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80018ae:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <MX_ADC1_Init+0x160>)
 80018b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018b2:	230c      	movs	r3, #12
 80018b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	481b      	ldr	r0, [pc, #108]	@ (8001928 <MX_ADC1_Init+0x158>)
 80018bc:	f002 f8e2 	bl	8003a84 <HAL_ADC_ConfigChannel>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80018c6:	f000 fbbf 	bl	8002048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80018ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001934 <MX_ADC1_Init+0x164>)
 80018cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80018ce:	2312      	movs	r3, #18
 80018d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	4619      	mov	r1, r3
 80018d6:	4814      	ldr	r0, [pc, #80]	@ (8001928 <MX_ADC1_Init+0x158>)
 80018d8:	f002 f8d4 	bl	8003a84 <HAL_ADC_ConfigChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80018e2:	f000 fbb1 	bl	8002048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80018e6:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <MX_ADC1_Init+0x168>)
 80018e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80018ea:	2318      	movs	r3, #24
 80018ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	480d      	ldr	r0, [pc, #52]	@ (8001928 <MX_ADC1_Init+0x158>)
 80018f4:	f002 f8c6 	bl	8003a84 <HAL_ADC_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80018fe:	f000 fba3 	bl	8002048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001902:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <MX_ADC1_Init+0x16c>)
 8001904:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001906:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800190a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	@ (8001928 <MX_ADC1_Init+0x158>)
 8001912:	f002 f8b7 	bl	8003a84 <HAL_ADC_ConfigChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 800191c:	f000 fb94 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	3730      	adds	r7, #48	@ 0x30
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200022dc 	.word	0x200022dc
 800192c:	04300002 	.word	0x04300002
 8001930:	08600004 	.word	0x08600004
 8001934:	2a000400 	.word	0x2a000400
 8001938:	c3210000 	.word	0xc3210000
 800193c:	cb840000 	.word	0xcb840000

08001940 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001946:	463b      	mov	r3, r7
 8001948:	2220      	movs	r2, #32
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f008 fd3c 	bl	800a3ca <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001952:	4b32      	ldr	r3, [pc, #200]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 8001954:	4a32      	ldr	r2, [pc, #200]	@ (8001a20 <MX_ADC2_Init+0xe0>)
 8001956:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001958:	4b30      	ldr	r3, [pc, #192]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 800195a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800195e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001960:	4b2e      	ldr	r3, [pc, #184]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001966:	4b2d      	ldr	r3, [pc, #180]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800196c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001972:	4b2a      	ldr	r3, [pc, #168]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 8001974:	2201      	movs	r2, #1
 8001976:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001978:	4b28      	ldr	r3, [pc, #160]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 800197a:	2204      	movs	r2, #4
 800197c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800197e:	4b27      	ldr	r3, [pc, #156]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 8001980:	2200      	movs	r2, #0
 8001982:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001984:	4b25      	ldr	r3, [pc, #148]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 8001986:	2201      	movs	r2, #1
 8001988:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800198a:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 800198c:	2202      	movs	r2, #2
 800198e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001990:	4b22      	ldr	r3, [pc, #136]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001998:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 800199a:	2200      	movs	r2, #0
 800199c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800199e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80019b2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80019ba:	4818      	ldr	r0, [pc, #96]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 80019bc:	f001 fdaa 	bl	8003514 <HAL_ADC_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80019c6:	f000 fb3f 	bl	8002048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80019ca:	4b16      	ldr	r3, [pc, #88]	@ (8001a24 <MX_ADC2_Init+0xe4>)
 80019cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019ce:	2306      	movs	r3, #6
 80019d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80019d2:	2306      	movs	r3, #6
 80019d4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019d6:	237f      	movs	r3, #127	@ 0x7f
 80019d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019da:	2304      	movs	r3, #4
 80019dc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80019e2:	463b      	mov	r3, r7
 80019e4:	4619      	mov	r1, r3
 80019e6:	480d      	ldr	r0, [pc, #52]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 80019e8:	f002 f84c 	bl	8003a84 <HAL_ADC_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80019f2:	f000 fb29 	bl	8002048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <MX_ADC2_Init+0xe8>)
 80019f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019fa:	230c      	movs	r3, #12
 80019fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80019fe:	463b      	mov	r3, r7
 8001a00:	4619      	mov	r1, r3
 8001a02:	4806      	ldr	r0, [pc, #24]	@ (8001a1c <MX_ADC2_Init+0xdc>)
 8001a04:	f002 f83e 	bl	8003a84 <HAL_ADC_ConfigChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8001a0e:	f000 fb1b 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	3720      	adds	r7, #32
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20002348 	.word	0x20002348
 8001a20:	50000100 	.word	0x50000100
 8001a24:	0c900008 	.word	0x0c900008
 8001a28:	10c00010 	.word	0x10c00010

08001a2c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08c      	sub	sp, #48	@ 0x30
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001a32:	463b      	mov	r3, r7
 8001a34:	2230      	movs	r2, #48	@ 0x30
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f008 fcc6 	bl	800a3ca <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <MX_DAC1_Init+0x80>)
 8001a40:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab0 <MX_DAC1_Init+0x84>)
 8001a42:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001a44:	4819      	ldr	r0, [pc, #100]	@ (8001aac <MX_DAC1_Init+0x80>)
 8001a46:	f003 f8aa 	bl	8004b9e <HAL_DAC_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001a50:	f000 fafa 	bl	8002048 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001a54:	2302      	movs	r3, #2
 8001a56:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001a70:	2301      	movs	r3, #1
 8001a72:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a78:	463b      	mov	r3, r7
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480b      	ldr	r0, [pc, #44]	@ (8001aac <MX_DAC1_Init+0x80>)
 8001a80:	f003 f9aa 	bl	8004dd8 <HAL_DAC_ConfigChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001a8a:	f000 fadd 	bl	8002048 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001a8e:	463b      	mov	r3, r7
 8001a90:	2210      	movs	r2, #16
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	@ (8001aac <MX_DAC1_Init+0x80>)
 8001a96:	f003 f99f 	bl	8004dd8 <HAL_DAC_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8001aa0:	f000 fad2 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	3730      	adds	r7, #48	@ 0x30
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20002474 	.word	0x20002474
 8001ab0:	50000800 	.word	0x50000800

08001ab4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b098      	sub	sp, #96	@ 0x60
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]
 8001ad6:	615a      	str	r2, [r3, #20]
 8001ad8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2234      	movs	r2, #52	@ 0x34
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f008 fc72 	bl	800a3ca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd4 <MX_TIM1_Init+0x120>)
 8001ae8:	4a3b      	ldr	r2, [pc, #236]	@ (8001bd8 <MX_TIM1_Init+0x124>)
 8001aea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001aec:	4b39      	ldr	r3, [pc, #228]	@ (8001bd4 <MX_TIM1_Init+0x120>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af2:	4b38      	ldr	r3, [pc, #224]	@ (8001bd4 <MX_TIM1_Init+0x120>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001af8:	4b36      	ldr	r3, [pc, #216]	@ (8001bd4 <MX_TIM1_Init+0x120>)
 8001afa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001afe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b00:	4b34      	ldr	r3, [pc, #208]	@ (8001bd4 <MX_TIM1_Init+0x120>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b06:	4b33      	ldr	r3, [pc, #204]	@ (8001bd4 <MX_TIM1_Init+0x120>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0c:	4b31      	ldr	r3, [pc, #196]	@ (8001bd4 <MX_TIM1_Init+0x120>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b12:	4830      	ldr	r0, [pc, #192]	@ (8001bd4 <MX_TIM1_Init+0x120>)
 8001b14:	f005 f882 	bl	8006c1c <HAL_TIM_PWM_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b1e:	f000 fa93 	bl	8002048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b2e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b32:	4619      	mov	r1, r3
 8001b34:	4827      	ldr	r0, [pc, #156]	@ (8001bd4 <MX_TIM1_Init+0x120>)
 8001b36:	f006 f80d 	bl	8007b54 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b40:	f000 fa82 	bl	8002048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b44:	2360      	movs	r3, #96	@ 0x60
 8001b46:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b50:	2300      	movs	r3, #0
 8001b52:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b64:	2204      	movs	r2, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	481a      	ldr	r0, [pc, #104]	@ (8001bd4 <MX_TIM1_Init+0x120>)
 8001b6a:	f005 faff 	bl	800716c <HAL_TIM_PWM_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b74:	f000 fa68 	bl	8002048 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4807      	ldr	r0, [pc, #28]	@ (8001bd4 <MX_TIM1_Init+0x120>)
 8001bb6:	f006 f84f 	bl	8007c58 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001bc0:	f000 fa42 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bc4:	4803      	ldr	r0, [pc, #12]	@ (8001bd4 <MX_TIM1_Init+0x120>)
 8001bc6:	f000 ff01 	bl	80029cc <HAL_TIM_MspPostInit>

}
 8001bca:	bf00      	nop
 8001bcc:	3760      	adds	r7, #96	@ 0x60
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20002488 	.word	0x20002488
 8001bd8:	40012c00 	.word	0x40012c00

08001bdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	@ 0x28
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bee:	463b      	mov	r3, r7
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
 8001bfc:	615a      	str	r2, [r3, #20]
 8001bfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c00:	4b22      	ldr	r3, [pc, #136]	@ (8001c8c <MX_TIM2_Init+0xb0>)
 8001c02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c08:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <MX_TIM2_Init+0xb0>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c8c <MX_TIM2_Init+0xb0>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c14:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <MX_TIM2_Init+0xb0>)
 8001c16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <MX_TIM2_Init+0xb0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <MX_TIM2_Init+0xb0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c28:	4818      	ldr	r0, [pc, #96]	@ (8001c8c <MX_TIM2_Init+0xb0>)
 8001c2a:	f004 fff7 	bl	8006c1c <HAL_TIM_PWM_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001c34:	f000 fa08 	bl	8002048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	4811      	ldr	r0, [pc, #68]	@ (8001c8c <MX_TIM2_Init+0xb0>)
 8001c48:	f005 ff84 	bl	8007b54 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001c52:	f000 f9f9 	bl	8002048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c56:	2360      	movs	r3, #96	@ 0x60
 8001c58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c66:	463b      	mov	r3, r7
 8001c68:	2200      	movs	r2, #0
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4807      	ldr	r0, [pc, #28]	@ (8001c8c <MX_TIM2_Init+0xb0>)
 8001c6e:	f005 fa7d 	bl	800716c <HAL_TIM_PWM_ConfigChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001c78:	f000 f9e6 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c7c:	4803      	ldr	r0, [pc, #12]	@ (8001c8c <MX_TIM2_Init+0xb0>)
 8001c7e:	f000 fea5 	bl	80029cc <HAL_TIM_MspPostInit>

}
 8001c82:	bf00      	nop
 8001c84:	3728      	adds	r7, #40	@ 0x28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200024d4 	.word	0x200024d4

08001c90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	@ 0x28
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
 8001cb0:	615a      	str	r2, [r3, #20]
 8001cb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cb4:	4b21      	ldr	r3, [pc, #132]	@ (8001d3c <MX_TIM4_Init+0xac>)
 8001cb6:	4a22      	ldr	r2, [pc, #136]	@ (8001d40 <MX_TIM4_Init+0xb0>)
 8001cb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001cba:	4b20      	ldr	r3, [pc, #128]	@ (8001d3c <MX_TIM4_Init+0xac>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <MX_TIM4_Init+0xac>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <MX_TIM4_Init+0xac>)
 8001cc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ccc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cce:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <MX_TIM4_Init+0xac>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd4:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <MX_TIM4_Init+0xac>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cda:	4818      	ldr	r0, [pc, #96]	@ (8001d3c <MX_TIM4_Init+0xac>)
 8001cdc:	f004 ff9e 	bl	8006c1c <HAL_TIM_PWM_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001ce6:	f000 f9af 	bl	8002048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cf2:	f107 031c 	add.w	r3, r7, #28
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4810      	ldr	r0, [pc, #64]	@ (8001d3c <MX_TIM4_Init+0xac>)
 8001cfa:	f005 ff2b 	bl	8007b54 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001d04:	f000 f9a0 	bl	8002048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d08:	2360      	movs	r3, #96	@ 0x60
 8001d0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d18:	463b      	mov	r3, r7
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4807      	ldr	r0, [pc, #28]	@ (8001d3c <MX_TIM4_Init+0xac>)
 8001d20:	f005 fa24 	bl	800716c <HAL_TIM_PWM_ConfigChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001d2a:	f000 f98d 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d2e:	4803      	ldr	r0, [pc, #12]	@ (8001d3c <MX_TIM4_Init+0xac>)
 8001d30:	f000 fe4c 	bl	80029cc <HAL_TIM_MspPostInit>

}
 8001d34:	bf00      	nop
 8001d36:	3728      	adds	r7, #40	@ 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20002520 	.word	0x20002520
 8001d40:	40000800 	.word	0x40000800

08001d44 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d54:	4b14      	ldr	r3, [pc, #80]	@ (8001da8 <MX_TIM6_Init+0x64>)
 8001d56:	4a15      	ldr	r2, [pc, #84]	@ (8001dac <MX_TIM6_Init+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <MX_TIM6_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d60:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <MX_TIM6_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001d66:	4b10      	ldr	r3, [pc, #64]	@ (8001da8 <MX_TIM6_Init+0x64>)
 8001d68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d6c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <MX_TIM6_Init+0x64>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d74:	480c      	ldr	r0, [pc, #48]	@ (8001da8 <MX_TIM6_Init+0x64>)
 8001d76:	f004 fe8f 	bl	8006a98 <HAL_TIM_Base_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001d80:	f000 f962 	bl	8002048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4805      	ldr	r0, [pc, #20]	@ (8001da8 <MX_TIM6_Init+0x64>)
 8001d92:	f005 fedf 	bl	8007b54 <HAL_TIMEx_MasterConfigSynchronization>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001d9c:	f000 f954 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	2000256c 	.word	0x2000256c
 8001dac:	40001000 	.word	0x40001000

08001db0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001dc0:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <MX_TIM7_Init+0x64>)
 8001dc2:	4a15      	ldr	r2, [pc, #84]	@ (8001e18 <MX_TIM7_Init+0x68>)
 8001dc4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001dc6:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <MX_TIM7_Init+0x64>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <MX_TIM7_Init+0x64>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <MX_TIM7_Init+0x64>)
 8001dd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dd8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <MX_TIM7_Init+0x64>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001de0:	480c      	ldr	r0, [pc, #48]	@ (8001e14 <MX_TIM7_Init+0x64>)
 8001de2:	f004 fe59 	bl	8006a98 <HAL_TIM_Base_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001dec:	f000 f92c 	bl	8002048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <MX_TIM7_Init+0x64>)
 8001dfe:	f005 fea9 	bl	8007b54 <HAL_TIMEx_MasterConfigSynchronization>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001e08:	f000 f91e 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200025b8 	.word	0x200025b8
 8001e18:	40001400 	.word	0x40001400

08001e1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e20:	4b22      	ldr	r3, [pc, #136]	@ (8001eac <MX_USART2_UART_Init+0x90>)
 8001e22:	4a23      	ldr	r2, [pc, #140]	@ (8001eb0 <MX_USART2_UART_Init+0x94>)
 8001e24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e26:	4b21      	ldr	r3, [pc, #132]	@ (8001eac <MX_USART2_UART_Init+0x90>)
 8001e28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001eac <MX_USART2_UART_Init+0x90>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e34:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <MX_USART2_UART_Init+0x90>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001eac <MX_USART2_UART_Init+0x90>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e40:	4b1a      	ldr	r3, [pc, #104]	@ (8001eac <MX_USART2_UART_Init+0x90>)
 8001e42:	220c      	movs	r2, #12
 8001e44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e46:	4b19      	ldr	r3, [pc, #100]	@ (8001eac <MX_USART2_UART_Init+0x90>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e4c:	4b17      	ldr	r3, [pc, #92]	@ (8001eac <MX_USART2_UART_Init+0x90>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e52:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <MX_USART2_UART_Init+0x90>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e58:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <MX_USART2_UART_Init+0x90>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e5e:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <MX_USART2_UART_Init+0x90>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e64:	4811      	ldr	r0, [pc, #68]	@ (8001eac <MX_USART2_UART_Init+0x90>)
 8001e66:	f005 ffc9 	bl	8007dfc <HAL_UART_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e70:	f000 f8ea 	bl	8002048 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e74:	2100      	movs	r1, #0
 8001e76:	480d      	ldr	r0, [pc, #52]	@ (8001eac <MX_USART2_UART_Init+0x90>)
 8001e78:	f007 fa4b 	bl	8009312 <HAL_UARTEx_SetTxFifoThreshold>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e82:	f000 f8e1 	bl	8002048 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e86:	2100      	movs	r1, #0
 8001e88:	4808      	ldr	r0, [pc, #32]	@ (8001eac <MX_USART2_UART_Init+0x90>)
 8001e8a:	f007 fa80 	bl	800938e <HAL_UARTEx_SetRxFifoThreshold>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001e94:	f000 f8d8 	bl	8002048 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e98:	4804      	ldr	r0, [pc, #16]	@ (8001eac <MX_USART2_UART_Init+0x90>)
 8001e9a:	f007 fa01 	bl	80092a0 <HAL_UARTEx_DisableFifoMode>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ea4:	f000 f8d0 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20002604 	.word	0x20002604
 8001eb0:	40004400 	.word	0x40004400

08001eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001eba:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <MX_DMA_Init+0x60>)
 8001ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ebe:	4a15      	ldr	r2, [pc, #84]	@ (8001f14 <MX_DMA_Init+0x60>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ec6:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <MX_DMA_Init+0x60>)
 8001ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ed2:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <MX_DMA_Init+0x60>)
 8001ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8001f14 <MX_DMA_Init+0x60>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ede:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <MX_DMA_Init+0x60>)
 8001ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2103      	movs	r1, #3
 8001eee:	200b      	movs	r0, #11
 8001ef0:	f002 fe21 	bl	8004b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ef4:	200b      	movs	r0, #11
 8001ef6:	f002 fe38 	bl	8004b6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 3, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2103      	movs	r1, #3
 8001efe:	200c      	movs	r0, #12
 8001f00:	f002 fe19 	bl	8004b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f04:	200c      	movs	r0, #12
 8001f06:	f002 fe30 	bl	8004b6a <HAL_NVIC_EnableIRQ>

}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000

08001f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa8 <MX_GPIO_Init+0x90>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f32:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa8 <MX_GPIO_Init+0x90>)
 8001f34:	f043 0320 	orr.w	r3, r3, #32
 8001f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa8 <MX_GPIO_Init+0x90>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f46:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <MX_GPIO_Init+0x90>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4a:	4a17      	ldr	r2, [pc, #92]	@ (8001fa8 <MX_GPIO_Init+0x90>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f52:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <MX_GPIO_Init+0x90>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5e:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <MX_GPIO_Init+0x90>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f62:	4a11      	ldr	r2, [pc, #68]	@ (8001fa8 <MX_GPIO_Init+0x90>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <MX_GPIO_Init+0x90>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, electro_Chem_ONOFF_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001f7c:	480b      	ldr	r0, [pc, #44]	@ (8001fac <MX_GPIO_Init+0x94>)
 8001f7e:	f003 fda1 	bl	8005ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : electro_Chem_ONOFF_Pin LD2_Pin */
  GPIO_InitStruct.Pin = electro_Chem_ONOFF_Pin|LD2_Pin;
 8001f82:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4804      	ldr	r0, [pc, #16]	@ (8001fac <MX_GPIO_Init+0x94>)
 8001f9c:	f003 fc10 	bl	80057c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fa0:	bf00      	nop
 8001fa2:	3720      	adds	r7, #32
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	48000400 	.word	0x48000400

08001fb0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	if (htim == &htim6)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a08      	ldr	r2, [pc, #32]	@ (8001fdc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d102      	bne.n	8001fc6 <HAL_TIM_PeriodElapsedCallback+0x16>
		Task1ISR();
 8001fc0:	f000 f8e4 	bl	800218c <Task1ISR>
	else if (htim == &htim7)
		Task2ISR();
}
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_PeriodElapsedCallback+0x22>
	else if (htim == &htim7)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a05      	ldr	r2, [pc, #20]	@ (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d101      	bne.n	8001fd2 <HAL_TIM_PeriodElapsedCallback+0x22>
		Task2ISR();
 8001fce:	f000 f91f 	bl	8002210 <Task2ISR>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000256c 	.word	0x2000256c
 8001fe0:	200025b8 	.word	0x200025b8

08001fe4 <__io_putchar>:

int __io_putchar(int ch)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 1);
 8001ff2:	f107 010c 	add.w	r1, r7, #12
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4804      	ldr	r0, [pc, #16]	@ (800200c <__io_putchar+0x28>)
 8001ffc:	f005 ff4e 	bl	8007e9c <HAL_UART_Transmit>
 return ch;
 8002000:	687b      	ldr	r3, [r7, #4]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20002604 	.word	0x20002604

08002010 <_write>:

int _write(int file,char *ptr, int len)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e009      	b.n	8002036 <_write+0x26>
 {
 __io_putchar(*ptr++);
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	60ba      	str	r2, [r7, #8]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ffda 	bl	8001fe4 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	3301      	adds	r3, #1
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	429a      	cmp	r2, r3
 800203c:	dbf1      	blt.n	8002022 <_write+0x12>
 }
return len;
 800203e:	687b      	ldr	r3, [r7, #4]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800204c:	b672      	cpsid	i
}
 800204e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <Error_Handler+0x8>

08002054 <initializeMovingAverage>:
 */

#include "moving_average.h"

void initializeMovingAverage(struct MovingAverage * MV)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < sizeof(MV->data)/sizeof(MV->data[0]); i++)
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	e009      	b.n	8002076 <initializeMovingAverage+0x22>
    {
        MV->data[i] = 0;
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < sizeof(MV->data)/sizeof(MV->data[0]); i++)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	3301      	adds	r3, #1
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800207c:	d3f1      	bcc.n	8002062 <initializeMovingAverage+0xe>
    }

    MV->currentIndex = 0;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f8c3 2fa0 	str.w	r2, [r3, #4000]	@ 0xfa0
    MV->size = 1000;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800208c:	f8c3 2fa4 	str.w	r2, [r3, #4004]	@ 0xfa4

    MV->sum = 0;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f603 73a8 	addw	r3, r3, #4008	@ 0xfa8
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
    MV->movingAverage = 0;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f603 73ac 	addw	r3, r3, #4012	@ 0xfac
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <calculateMovingAverage>:

float calculateMovingAverage(struct MovingAverage * MV, float currentSample)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	ed87 0a00 	vstr	s0, [r7]

    MV->sum = MV->sum - MV->data[MV->currentIndex];
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f603 73a8 	addw	r3, r3, #4008	@ 0xfa8
 80020c6:	ed93 7a00 	vldr	s14, [r3]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	@ 0xfa0
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f603 73a8 	addw	r3, r3, #4008	@ 0xfa8
 80020e4:	edc3 7a00 	vstr	s15, [r3]

    MV->data[MV->currentIndex] = currentSample;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	@ 0xfa0
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	601a      	str	r2, [r3, #0]

    MV->sum = MV->sum + MV->data[MV->currentIndex];
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f603 73a8 	addw	r3, r3, #4008	@ 0xfa8
 80020fe:	ed93 7a00 	vldr	s14, [r3]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	@ 0xfa0
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	edd3 7a00 	vldr	s15, [r3]
 8002112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f603 73a8 	addw	r3, r3, #4008	@ 0xfa8
 800211c:	edc3 7a00 	vstr	s15, [r3]

    MV->movingAverage = MV->sum/(float) MV->size;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f603 73a8 	addw	r3, r3, #4008	@ 0xfa8
 8002126:	edd3 6a00 	vldr	s13, [r3]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	@ 0xfa4
 8002130:	ee07 3a90 	vmov	s15, r3
 8002134:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f603 73ac 	addw	r3, r3, #4012	@ 0xfac
 8002142:	edc3 7a00 	vstr	s15, [r3]

    MV->currentIndex++;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	@ 0xfa0
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f8c3 2fa0 	str.w	r2, [r3, #4000]	@ 0xfa0
    MV->currentIndex %= MV->size;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	@ 0xfa0
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	f8d2 2fa4 	ldr.w	r2, [r2, #4004]	@ 0xfa4
 8002160:	fbb3 f1f2 	udiv	r1, r3, r2
 8002164:	fb01 f202 	mul.w	r2, r1, r2
 8002168:	1a9a      	subs	r2, r3, r2
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8c3 2fa0 	str.w	r2, [r3, #4000]	@ 0xfa0

    return MV->movingAverage;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f603 73ac 	addw	r3, r3, #4012	@ 0xfac
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	ee07 3a90 	vmov	s15, r3
}
 800217c:	eeb0 0a67 	vmov.f32	s0, s15
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <Task1ISR>:
#include "string.h"

extern UART_HandleTypeDef huart2;

void Task1ISR()		// Watchdog Task
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0

	if(start_flag == 1)
 8002190:	4b17      	ldr	r3, [pc, #92]	@ (80021f0 <Task1ISR+0x64>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800219a:	eef4 7a47 	vcmp.f32	s15, s14
 800219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a2:	d104      	bne.n	80021ae <Task1ISR+0x22>
		start_flag = 0;
 80021a4:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <Task1ISR+0x64>)
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

//	printf("%f\n", getLPF_1Output(&Main_Heater_Resistance_Filter, ((float) Analog_Value(&Main_Heater_Voltage) / 4096) * (AVDD) / (((float) Analog_Value(&Main_Heater_Current) / 4096) * (AVDD / (50 * 0.01)))));

//	getLPF_1Output(&Main_Heater_Resistance_Filter, ((float) Analog_Value(&Main_Heater_Voltage) / 4096) * (AVDD) / (((float) Analog_Value(&Main_Heater_Current) / 4096) * (AVDD / (50 * 0.01))));

}
 80021ac:	e01d      	b.n	80021ea <Task1ISR+0x5e>
		SetPWMDuty(&mainheater, 2.0);
 80021ae:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80021b2:	4810      	ldr	r0, [pc, #64]	@ (80021f4 <Task1ISR+0x68>)
 80021b4:	f000 f958 	bl	8002468 <SetPWMDuty>
		SetPWMDuty(&airheater, 0);
 80021b8:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80021f8 <Task1ISR+0x6c>
 80021bc:	480f      	ldr	r0, [pc, #60]	@ (80021fc <Task1ISR+0x70>)
 80021be:	f000 f953 	bl	8002468 <SetPWMDuty>
		SetPWMDuty(&fan, 0);
 80021c2:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80021f8 <Task1ISR+0x6c>
 80021c6:	480e      	ldr	r0, [pc, #56]	@ (8002200 <Task1ISR+0x74>)
 80021c8:	f000 f94e 	bl	8002468 <SetPWMDuty>
		DAC_Set_Value(&ElectroChem_Set, 2000);
 80021cc:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80021d0:	480c      	ldr	r0, [pc, #48]	@ (8002204 <Task1ISR+0x78>)
 80021d2:	f7fe ffd9 	bl	8001188 <DAC_Set_Value>
		DAC_Set_Value(&ElectroChem_Offset, 3000);
 80021d6:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80021da:	480b      	ldr	r0, [pc, #44]	@ (8002208 <Task1ISR+0x7c>)
 80021dc:	f7fe ffd4 	bl	8001188 <DAC_Set_Value>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2110      	movs	r1, #16
 80021e4:	4809      	ldr	r0, [pc, #36]	@ (800220c <Task1ISR+0x80>)
 80021e6:	f003 fc6d 	bl	8005ac4 <HAL_GPIO_WritePin>
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200022cc 	.word	0x200022cc
 80021f4:	2000024c 	.word	0x2000024c
 80021f8:	00000000 	.word	0x00000000
 80021fc:	20000230 	.word	0x20000230
 8002200:	20000268 	.word	0x20000268
 8002204:	200002c4 	.word	0x200002c4
 8002208:	200002bc 	.word	0x200002bc
 800220c:	48000400 	.word	0x48000400

08002210 <Task2ISR>:

void Task2ISR()		//Controlling Task
{
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	ed2d 8b02 	vpush	{d8}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
	uint16_t vrefint_cal = *((uint16_t*)VREFINT_CAL_ADDR);
 800221a:	4b50      	ldr	r3, [pc, #320]	@ (800235c <Task2ISR+0x14c>)
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	80fb      	strh	r3, [r7, #6]

	if ((float) Analog_Value(&Internal_Ref_Voltage) > 0)
 8002220:	484f      	ldr	r0, [pc, #316]	@ (8002360 <Task2ISR+0x150>)
 8002222:	f7fe ff67 	bl	80010f4 <Analog_Value>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d021      	beq.n	8002270 <Task2ISR+0x60>
		AVDD = 3.0 * ((float) vrefint_cal / (float) Analog_Value(&Internal_Ref_Voltage));
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	ee07 3a90 	vmov	s15, r3
 8002232:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002236:	484a      	ldr	r0, [pc, #296]	@ (8002360 <Task2ISR+0x150>)
 8002238:	f7fe ff5c 	bl	80010f4 <Analog_Value>
 800223c:	4603      	mov	r3, r0
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002246:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800224a:	ee17 0a10 	vmov	r0, s14
 800224e:	f7fe f9a3 	bl	8000598 <__aeabi_f2d>
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	4b43      	ldr	r3, [pc, #268]	@ (8002364 <Task2ISR+0x154>)
 8002258:	f7fe f9f6 	bl	8000648 <__aeabi_dmul>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4610      	mov	r0, r2
 8002262:	4619      	mov	r1, r3
 8002264:	f7fe fce8 	bl	8000c38 <__aeabi_d2f>
 8002268:	4603      	mov	r3, r0
 800226a:	4a3f      	ldr	r2, [pc, #252]	@ (8002368 <Task2ISR+0x158>)
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e002      	b.n	8002276 <Task2ISR+0x66>
	else
		AVDD = 0.1;
 8002270:	4b3d      	ldr	r3, [pc, #244]	@ (8002368 <Task2ISR+0x158>)
 8002272:	4a3e      	ldr	r2, [pc, #248]	@ (800236c <Task2ISR+0x15c>)
 8002274:	601a      	str	r2, [r3, #0]

	main_Heater_Voltage = ((float) Analog_Value(&Main_Heater_Voltage) / 4095) * (AVDD);
 8002276:	483e      	ldr	r0, [pc, #248]	@ (8002370 <Task2ISR+0x160>)
 8002278:	f7fe ff3c 	bl	80010f4 <Analog_Value>
 800227c:	4603      	mov	r3, r0
 800227e:	ee07 3a90 	vmov	s15, r3
 8002282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002286:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002374 <Task2ISR+0x164>
 800228a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800228e:	4b36      	ldr	r3, [pc, #216]	@ (8002368 <Task2ISR+0x158>)
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002298:	4b37      	ldr	r3, [pc, #220]	@ (8002378 <Task2ISR+0x168>)
 800229a:	edc3 7a00 	vstr	s15, [r3]
	main_Heater_Current = ((float) Analog_Value(&Main_Heater_Current) / 4095) * (AVDD / (50 * 0.01));
 800229e:	4837      	ldr	r0, [pc, #220]	@ (800237c <Task2ISR+0x16c>)
 80022a0:	f7fe ff28 	bl	80010f4 <Analog_Value>
 80022a4:	4603      	mov	r3, r0
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ae:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002374 <Task2ISR+0x164>
 80022b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022b6:	ee16 0a90 	vmov	r0, s13
 80022ba:	f7fe f96d 	bl	8000598 <__aeabi_f2d>
 80022be:	4604      	mov	r4, r0
 80022c0:	460d      	mov	r5, r1
 80022c2:	4b29      	ldr	r3, [pc, #164]	@ (8002368 <Task2ISR+0x158>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe f966 	bl	8000598 <__aeabi_f2d>
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002380 <Task2ISR+0x170>)
 80022d2:	f7fe fae3 	bl	800089c <__aeabi_ddiv>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4620      	mov	r0, r4
 80022dc:	4629      	mov	r1, r5
 80022de:	f7fe f9b3 	bl	8000648 <__aeabi_dmul>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4610      	mov	r0, r2
 80022e8:	4619      	mov	r1, r3
 80022ea:	f7fe fca5 	bl	8000c38 <__aeabi_d2f>
 80022ee:	4603      	mov	r3, r0
 80022f0:	4a24      	ldr	r2, [pc, #144]	@ (8002384 <Task2ISR+0x174>)
 80022f2:	6013      	str	r3, [r2, #0]

	main_Heater_Voltage = calculateMovingAverage(&Main_Heater_Voltage_MV, main_Heater_Voltage);
 80022f4:	4b20      	ldr	r3, [pc, #128]	@ (8002378 <Task2ISR+0x168>)
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	eeb0 0a67 	vmov.f32	s0, s15
 80022fe:	4822      	ldr	r0, [pc, #136]	@ (8002388 <Task2ISR+0x178>)
 8002300:	f7ff fed8 	bl	80020b4 <calculateMovingAverage>
 8002304:	eef0 7a40 	vmov.f32	s15, s0
 8002308:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <Task2ISR+0x168>)
 800230a:	edc3 7a00 	vstr	s15, [r3]
	main_Heater_Current = calculateMovingAverage(&Main_Heater_Current_MV, main_Heater_Current);
 800230e:	4b1d      	ldr	r3, [pc, #116]	@ (8002384 <Task2ISR+0x174>)
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eeb0 0a67 	vmov.f32	s0, s15
 8002318:	481c      	ldr	r0, [pc, #112]	@ (800238c <Task2ISR+0x17c>)
 800231a:	f7ff fecb 	bl	80020b4 <calculateMovingAverage>
 800231e:	eef0 7a40 	vmov.f32	s15, s0
 8002322:	4b18      	ldr	r3, [pc, #96]	@ (8002384 <Task2ISR+0x174>)
 8002324:	edc3 7a00 	vstr	s15, [r3]

	electro_Chem_Result = ((float) Analog_Value(&Electro_Chem_Result) / 4095) * (AVDD);
 8002328:	4819      	ldr	r0, [pc, #100]	@ (8002390 <Task2ISR+0x180>)
 800232a:	f7fe fee3 	bl	80010f4 <Analog_Value>
 800232e:	4603      	mov	r3, r0
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002338:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002374 <Task2ISR+0x164>
 800233c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002340:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <Task2ISR+0x158>)
 8002342:	edd3 7a00 	vldr	s15, [r3]
 8002346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800234a:	4b12      	ldr	r3, [pc, #72]	@ (8002394 <Task2ISR+0x184>)
 800234c:	edc3 7a00 	vstr	s15, [r3]
//		SetPWMDuty(&fan, 100);
//
//	else
//		SetPWMDuty(&fan, 0);

}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	ecbd 8b02 	vpop	{d8}
 800235a:	bdb0      	pop	{r4, r5, r7, pc}
 800235c:	1fff75aa 	.word	0x1fff75aa
 8002360:	200002a4 	.word	0x200002a4
 8002364:	40080000 	.word	0x40080000
 8002368:	200022d0 	.word	0x200022d0
 800236c:	3dcccccd 	.word	0x3dcccccd
 8002370:	2000028c 	.word	0x2000028c
 8002374:	457ff000 	.word	0x457ff000
 8002378:	200022bc 	.word	0x200022bc
 800237c:	200002b4 	.word	0x200002b4
 8002380:	3fe00000 	.word	0x3fe00000
 8002384:	200022b4 	.word	0x200022b4
 8002388:	20000354 	.word	0x20000354
 800238c:	20001304 	.word	0x20001304
 8002390:	20000294 	.word	0x20000294
 8002394:	200022c4 	.word	0x200022c4

08002398 <PWMInit>:
	 * Argument 3: Timer Handle Type Def, example: &htim7
	 * Argument 4: Timer Clock Speed: 80000000 (Hz)
	 * Argument 5: Sampling time/time between successive interrupts in microseconds, example: 500
	 */

	{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]

		pwm->timerNr = timeNr;						//Writes the timer number to the structure
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	615a      	str	r2, [r3, #20]
		pwm->htim	= TmrHandle;						//Writes the timer handle to the structure
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	611a      	str	r2, [r3, #16]
		pwm->chnl	= TmrChnl;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	619a      	str	r2, [r3, #24]
		pwm->Timer_Clock_Speed = tmrclkspd;			//Writes the timer clock speed to the structure
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	601a      	str	r2, [r3, #0]
		pwm->PWM_Frequency = pwm_freq;		//Writes the Sampling time/time between interrupts to the structure
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	605a      	str	r2, [r3, #4]


		UpdatePWMFreq (pwm, pwm_freq);		//Call the update interrupt time function to enter the values of the prescaler and counter resolution
 80023c4:	69f9      	ldr	r1, [r7, #28]
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f804 	bl	80023d4 <UpdatePWMFreq>

	}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <UpdatePWMFreq>:
	 * Inputs:
	 * Argument 1: INTERRUPT struct, named based on the interrupt name, example: ControllerInterrupt
	 * Argument 2: Sampling time/time between successive interrupts in microseconds, example: 500
	 */

{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
	pwm->PWM_Frequency = pwm_freq;		//Writes the sampling time to the structure
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	605a      	str	r2, [r3, #4]

	uint32_t frequency_fraction = pwm->Timer_Clock_Speed/pwm->PWM_Frequency;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	60fb      	str	r3, [r7, #12]

	if(frequency_fraction < 65535)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d806      	bhi.n	800240a <UpdatePWMFreq+0x36>
	{
		pwm->Prescaler = 0;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
		pwm->Counter_Resolution = frequency_fraction;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	e01a      	b.n	8002440 <UpdatePWMFreq+0x6c>
	}
	else
	{
		pwm->Prescaler = ((float) frequency_fraction)/65535.0f + 0.5f;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	ee07 3a90 	vmov	s15, r3
 8002410:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002414:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8002464 <UpdatePWMFreq+0x90>
 8002418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800241c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002420:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002428:	ee17 2a90 	vmov	r2, s15
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	60da      	str	r2, [r3, #12]
		pwm->Counter_Resolution = (frequency_fraction) / (pwm->Prescaler + 1);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	3301      	adds	r3, #1
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	fbb2 f2f3 	udiv	r2, r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	609a      	str	r2, [r3, #8]
	}

	pwm->timerNr->PSC = pwm->Prescaler;					//Write the prescaler to the timer control register
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	68d2      	ldr	r2, [r2, #12]
 8002448:	629a      	str	r2, [r3, #40]	@ 0x28
	pwm->timerNr->ARR = pwm->Counter_Resolution-1;		//Write the counter resolution resolution to the timer auto reload register
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	3a01      	subs	r2, #1
 8002454:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	477fff00 	.word	0x477fff00

08002468 <SetPWMDuty>:

void SetPWMDuty (struct PWM * pwm, float duty)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	ed87 0a00 	vstr	s0, [r7]

	if(pwm->chnl == 1)																				//Check if servo channel is 1 as pointer pointing to pointers to pointer is not available
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d114      	bne.n	80024a6 <SetPWMDuty+0x3e>
		pwm->timerNr->CCR1 = ( uint32_t) ( (float) ( pwm->Counter_Resolution) * ( (float) duty)/100 );	//Applies the duty cycle
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002488:	edd7 7a00 	vldr	s15, [r7]
 800248c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002490:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8002548 <SetPWMDuty+0xe0>
 8002494:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024a0:	ee17 2a90 	vmov	r2, s15
 80024a4:	635a      	str	r2, [r3, #52]	@ 0x34
	if(pwm->chnl == 2)																				//Check if servo channel is 3 as pointer pointing to pointers to pointer is not available
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d114      	bne.n	80024d8 <SetPWMDuty+0x70>
		pwm->timerNr->CCR2 = ( uint32_t) ( (float) ( pwm->Counter_Resolution) * ( (float) duty)/100 );	//Applies the duty cycle
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024ba:	edd7 7a00 	vldr	s15, [r7]
 80024be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c2:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8002548 <SetPWMDuty+0xe0>
 80024c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024d2:	ee17 2a90 	vmov	r2, s15
 80024d6:	639a      	str	r2, [r3, #56]	@ 0x38
	if(pwm->chnl == 3)																				//Check if servo channel is 3 as pointer pointing to pointers to pointer is not available
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d114      	bne.n	800250a <SetPWMDuty+0xa2>
		pwm->timerNr->CCR3 = ( uint32_t) ( (float) ( pwm->Counter_Resolution) * ( (float) duty)/100 );	//Applies the duty cycle
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024ec:	edd7 7a00 	vldr	s15, [r7]
 80024f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024f4:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002548 <SetPWMDuty+0xe0>
 80024f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002504:	ee17 2a90 	vmov	r2, s15
 8002508:	63da      	str	r2, [r3, #60]	@ 0x3c
	if(pwm->chnl == 4)																				//Check if servo channel is 4 as pointer pointing to pointers to pointer is not available
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b04      	cmp	r3, #4
 8002510:	d114      	bne.n	800253c <SetPWMDuty+0xd4>
		pwm->timerNr->CCR4 = ( uint32_t) ( (float) ( pwm->Counter_Resolution) * ( (float) duty)/100 );	//Applies the duty cycle
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800251e:	edd7 7a00 	vldr	s15, [r7]
 8002522:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002526:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8002548 <SetPWMDuty+0xe0>
 800252a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002536:	ee17 2a90 	vmov	r2, s15
 800253a:	641a      	str	r2, [r3, #64]	@ 0x40

}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	42c80000 	.word	0x42c80000

0800254c <StartPWM>:
	 *
	 * Input:
	 * Argument 1: INTERRUPT struct, named based on the interrupt name, example: ControllerInterrupt
	 */

	{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

		if(pwm->chnl == 1)																			//Check if servo channel is 1 as pointer pointing to pointers to pointer is not available
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d105      	bne.n	8002568 <StartPWM+0x1c>
			HAL_TIM_PWM_Start(pwm->htim, TIM_CHANNEL_1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f004 fbb2 	bl	8006ccc <HAL_TIM_PWM_Start>
		if(pwm->chnl == 2)																			//Check if servo channel is 3 as pointer pointing to pointers to pointer is not available
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d105      	bne.n	800257c <StartPWM+0x30>
			HAL_TIM_PWM_Start(pwm->htim, TIM_CHANNEL_2);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	2104      	movs	r1, #4
 8002576:	4618      	mov	r0, r3
 8002578:	f004 fba8 	bl	8006ccc <HAL_TIM_PWM_Start>
		if(pwm->chnl == 3)																			//Check if servo channel is 3 as pointer pointing to pointers to pointer is not available
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d105      	bne.n	8002590 <StartPWM+0x44>
			HAL_TIM_PWM_Start(pwm->htim, TIM_CHANNEL_3);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2108      	movs	r1, #8
 800258a:	4618      	mov	r0, r3
 800258c:	f004 fb9e 	bl	8006ccc <HAL_TIM_PWM_Start>
		if(pwm->chnl == 4)																			//Check if servo channel is 4 as pointer pointing to pointers to pointer is not available
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	2b04      	cmp	r3, #4
 8002596:	d105      	bne.n	80025a4 <StartPWM+0x58>
			HAL_TIM_PWM_Start(pwm->htim, TIM_CHANNEL_4);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	210c      	movs	r1, #12
 800259e:	4618      	mov	r0, r3
 80025a0:	f004 fb94 	bl	8006ccc <HAL_TIM_PWM_Start>

	}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b2:	4b0f      	ldr	r3, [pc, #60]	@ (80025f0 <HAL_MspInit+0x44>)
 80025b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b6:	4a0e      	ldr	r2, [pc, #56]	@ (80025f0 <HAL_MspInit+0x44>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80025be:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <HAL_MspInit+0x44>)
 80025c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	607b      	str	r3, [r7, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	4b09      	ldr	r3, [pc, #36]	@ (80025f0 <HAL_MspInit+0x44>)
 80025cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ce:	4a08      	ldr	r2, [pc, #32]	@ (80025f0 <HAL_MspInit+0x44>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80025d6:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_MspInit+0x44>)
 80025d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80025e2:	f003 fb2b 	bl	8005c3c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000

080025f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b09e      	sub	sp, #120	@ 0x78
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800260c:	f107 0320 	add.w	r3, r7, #32
 8002610:	2244      	movs	r2, #68	@ 0x44
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f007 fed8 	bl	800a3ca <memset>
  if(hadc->Instance==ADC1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002622:	f040 8082 	bne.w	800272a <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800262a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800262c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002630:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002632:	f107 0320 	add.w	r3, r7, #32
 8002636:	4618      	mov	r0, r3
 8002638:	f004 f83e 	bl	80066b8 <HAL_RCCEx_PeriphCLKConfig>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002642:	f7ff fd01 	bl	8002048 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002646:	4b72      	ldr	r3, [pc, #456]	@ (8002810 <HAL_ADC_MspInit+0x21c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	4a70      	ldr	r2, [pc, #448]	@ (8002810 <HAL_ADC_MspInit+0x21c>)
 800264e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002650:	4b6f      	ldr	r3, [pc, #444]	@ (8002810 <HAL_ADC_MspInit+0x21c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d10b      	bne.n	8002670 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002658:	4b6e      	ldr	r3, [pc, #440]	@ (8002814 <HAL_ADC_MspInit+0x220>)
 800265a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265c:	4a6d      	ldr	r2, [pc, #436]	@ (8002814 <HAL_ADC_MspInit+0x220>)
 800265e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002662:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002664:	4b6b      	ldr	r3, [pc, #428]	@ (8002814 <HAL_ADC_MspInit+0x220>)
 8002666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002670:	4b68      	ldr	r3, [pc, #416]	@ (8002814 <HAL_ADC_MspInit+0x220>)
 8002672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002674:	4a67      	ldr	r2, [pc, #412]	@ (8002814 <HAL_ADC_MspInit+0x220>)
 8002676:	f043 0320 	orr.w	r3, r3, #32
 800267a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800267c:	4b65      	ldr	r3, [pc, #404]	@ (8002814 <HAL_ADC_MspInit+0x220>)
 800267e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002688:	4b62      	ldr	r3, [pc, #392]	@ (8002814 <HAL_ADC_MspInit+0x220>)
 800268a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268c:	4a61      	ldr	r2, [pc, #388]	@ (8002814 <HAL_ADC_MspInit+0x220>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002694:	4b5f      	ldr	r3, [pc, #380]	@ (8002814 <HAL_ADC_MspInit+0x220>)
 8002696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF0-OSC_IN     ------> ADC1_IN10
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = electro_Chem_Result_Pin;
 80026a0:	2301      	movs	r3, #1
 80026a2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026a4:	2303      	movs	r3, #3
 80026a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(electro_Chem_Result_GPIO_Port, &GPIO_InitStruct);
 80026ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026b0:	4619      	mov	r1, r3
 80026b2:	4859      	ldr	r0, [pc, #356]	@ (8002818 <HAL_ADC_MspInit+0x224>)
 80026b4:	f003 f884 	bl	80057c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = air_Heater_Voltage_Pin_Pin|main_Heater_Voltage_Pin_Pin;
 80026b8:	2303      	movs	r3, #3
 80026ba:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026bc:	2303      	movs	r3, #3
 80026be:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026c8:	4619      	mov	r1, r3
 80026ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ce:	f003 f877 	bl	80057c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80026d2:	4b52      	ldr	r3, [pc, #328]	@ (800281c <HAL_ADC_MspInit+0x228>)
 80026d4:	4a52      	ldr	r2, [pc, #328]	@ (8002820 <HAL_ADC_MspInit+0x22c>)
 80026d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80026d8:	4b50      	ldr	r3, [pc, #320]	@ (800281c <HAL_ADC_MspInit+0x228>)
 80026da:	2205      	movs	r2, #5
 80026dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026de:	4b4f      	ldr	r3, [pc, #316]	@ (800281c <HAL_ADC_MspInit+0x228>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026e4:	4b4d      	ldr	r3, [pc, #308]	@ (800281c <HAL_ADC_MspInit+0x228>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026ea:	4b4c      	ldr	r3, [pc, #304]	@ (800281c <HAL_ADC_MspInit+0x228>)
 80026ec:	2280      	movs	r2, #128	@ 0x80
 80026ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026f0:	4b4a      	ldr	r3, [pc, #296]	@ (800281c <HAL_ADC_MspInit+0x228>)
 80026f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026f8:	4b48      	ldr	r3, [pc, #288]	@ (800281c <HAL_ADC_MspInit+0x228>)
 80026fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002700:	4b46      	ldr	r3, [pc, #280]	@ (800281c <HAL_ADC_MspInit+0x228>)
 8002702:	2220      	movs	r2, #32
 8002704:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002706:	4b45      	ldr	r3, [pc, #276]	@ (800281c <HAL_ADC_MspInit+0x228>)
 8002708:	2200      	movs	r2, #0
 800270a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800270c:	4843      	ldr	r0, [pc, #268]	@ (800281c <HAL_ADC_MspInit+0x228>)
 800270e:	f002 fd25 	bl	800515c <HAL_DMA_Init>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8002718:	f7ff fc96 	bl	8002048 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a3f      	ldr	r2, [pc, #252]	@ (800281c <HAL_ADC_MspInit+0x228>)
 8002720:	655a      	str	r2, [r3, #84]	@ 0x54
 8002722:	4a3e      	ldr	r2, [pc, #248]	@ (800281c <HAL_ADC_MspInit+0x228>)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002728:	e06d      	b.n	8002806 <HAL_ADC_MspInit+0x212>
  else if(hadc->Instance==ADC2)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a3d      	ldr	r2, [pc, #244]	@ (8002824 <HAL_ADC_MspInit+0x230>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d168      	bne.n	8002806 <HAL_ADC_MspInit+0x212>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002734:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002738:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800273a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800273e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002740:	f107 0320 	add.w	r3, r7, #32
 8002744:	4618      	mov	r0, r3
 8002746:	f003 ffb7 	bl	80066b8 <HAL_RCCEx_PeriphCLKConfig>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_ADC_MspInit+0x160>
      Error_Handler();
 8002750:	f7ff fc7a 	bl	8002048 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002754:	4b2e      	ldr	r3, [pc, #184]	@ (8002810 <HAL_ADC_MspInit+0x21c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	3301      	adds	r3, #1
 800275a:	4a2d      	ldr	r2, [pc, #180]	@ (8002810 <HAL_ADC_MspInit+0x21c>)
 800275c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800275e:	4b2c      	ldr	r3, [pc, #176]	@ (8002810 <HAL_ADC_MspInit+0x21c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d10b      	bne.n	800277e <HAL_ADC_MspInit+0x18a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002766:	4b2b      	ldr	r3, [pc, #172]	@ (8002814 <HAL_ADC_MspInit+0x220>)
 8002768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276a:	4a2a      	ldr	r2, [pc, #168]	@ (8002814 <HAL_ADC_MspInit+0x220>)
 800276c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002772:	4b28      	ldr	r3, [pc, #160]	@ (8002814 <HAL_ADC_MspInit+0x220>)
 8002774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	4b25      	ldr	r3, [pc, #148]	@ (8002814 <HAL_ADC_MspInit+0x220>)
 8002780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002782:	4a24      	ldr	r2, [pc, #144]	@ (8002814 <HAL_ADC_MspInit+0x220>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800278a:	4b22      	ldr	r3, [pc, #136]	@ (8002814 <HAL_ADC_MspInit+0x220>)
 800278c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = air_Heater_Current_Pin_Pin|main_Heater_Current_Pin_Pin;
 8002796:	23c0      	movs	r3, #192	@ 0xc0
 8002798:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800279a:	2303      	movs	r3, #3
 800279c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80027a6:	4619      	mov	r1, r3
 80027a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027ac:	f003 f808 	bl	80057c0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80027b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002828 <HAL_ADC_MspInit+0x234>)
 80027b2:	4a1e      	ldr	r2, [pc, #120]	@ (800282c <HAL_ADC_MspInit+0x238>)
 80027b4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80027b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002828 <HAL_ADC_MspInit+0x234>)
 80027b8:	2224      	movs	r2, #36	@ 0x24
 80027ba:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002828 <HAL_ADC_MspInit+0x234>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c2:	4b19      	ldr	r3, [pc, #100]	@ (8002828 <HAL_ADC_MspInit+0x234>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80027c8:	4b17      	ldr	r3, [pc, #92]	@ (8002828 <HAL_ADC_MspInit+0x234>)
 80027ca:	2280      	movs	r2, #128	@ 0x80
 80027cc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027ce:	4b16      	ldr	r3, [pc, #88]	@ (8002828 <HAL_ADC_MspInit+0x234>)
 80027d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027d4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027d6:	4b14      	ldr	r3, [pc, #80]	@ (8002828 <HAL_ADC_MspInit+0x234>)
 80027d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027dc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80027de:	4b12      	ldr	r3, [pc, #72]	@ (8002828 <HAL_ADC_MspInit+0x234>)
 80027e0:	2220      	movs	r2, #32
 80027e2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80027e4:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <HAL_ADC_MspInit+0x234>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80027ea:	480f      	ldr	r0, [pc, #60]	@ (8002828 <HAL_ADC_MspInit+0x234>)
 80027ec:	f002 fcb6 	bl	800515c <HAL_DMA_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_ADC_MspInit+0x206>
      Error_Handler();
 80027f6:	f7ff fc27 	bl	8002048 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002828 <HAL_ADC_MspInit+0x234>)
 80027fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8002800:	4a09      	ldr	r2, [pc, #36]	@ (8002828 <HAL_ADC_MspInit+0x234>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002806:	bf00      	nop
 8002808:	3778      	adds	r7, #120	@ 0x78
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200026ec 	.word	0x200026ec
 8002814:	40021000 	.word	0x40021000
 8002818:	48001400 	.word	0x48001400
 800281c:	200023b4 	.word	0x200023b4
 8002820:	40020008 	.word	0x40020008
 8002824:	50000100 	.word	0x50000100
 8002828:	20002414 	.word	0x20002414
 800282c:	4002001c 	.word	0x4002001c

08002830 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	@ 0x28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a19      	ldr	r2, [pc, #100]	@ (80028b4 <HAL_DAC_MspInit+0x84>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d12c      	bne.n	80028ac <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002852:	4b19      	ldr	r3, [pc, #100]	@ (80028b8 <HAL_DAC_MspInit+0x88>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002856:	4a18      	ldr	r2, [pc, #96]	@ (80028b8 <HAL_DAC_MspInit+0x88>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800285c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800285e:	4b16      	ldr	r3, [pc, #88]	@ (80028b8 <HAL_DAC_MspInit+0x88>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002862:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286a:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <HAL_DAC_MspInit+0x88>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286e:	4a12      	ldr	r2, [pc, #72]	@ (80028b8 <HAL_DAC_MspInit+0x88>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002876:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <HAL_DAC_MspInit+0x88>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = electro_Chem_Offset_Pin_Pin|electro_Chem_Set_Pin_Pin;
 8002882:	2330      	movs	r3, #48	@ 0x30
 8002884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002886:	2303      	movs	r3, #3
 8002888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002898:	f002 ff92 	bl	80057c0 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2101      	movs	r1, #1
 80028a0:	2036      	movs	r0, #54	@ 0x36
 80028a2:	f002 f948 	bl	8004b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028a6:	2036      	movs	r0, #54	@ 0x36
 80028a8:	f002 f95f 	bl	8004b6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80028ac:	bf00      	nop
 80028ae:	3728      	adds	r7, #40	@ 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	50000800 	.word	0x50000800
 80028b8:	40021000 	.word	0x40021000

080028bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1c      	ldr	r2, [pc, #112]	@ (800293c <HAL_TIM_PWM_MspInit+0x80>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d10c      	bne.n	80028e8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002940 <HAL_TIM_PWM_MspInit+0x84>)
 80028d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002940 <HAL_TIM_PWM_MspInit+0x84>)
 80028d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80028da:	4b19      	ldr	r3, [pc, #100]	@ (8002940 <HAL_TIM_PWM_MspInit+0x84>)
 80028dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028e6:	e022      	b.n	800292e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f0:	d10c      	bne.n	800290c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028f2:	4b13      	ldr	r3, [pc, #76]	@ (8002940 <HAL_TIM_PWM_MspInit+0x84>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f6:	4a12      	ldr	r2, [pc, #72]	@ (8002940 <HAL_TIM_PWM_MspInit+0x84>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80028fe:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <HAL_TIM_PWM_MspInit+0x84>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	693b      	ldr	r3, [r7, #16]
}
 800290a:	e010      	b.n	800292e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM4)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0c      	ldr	r2, [pc, #48]	@ (8002944 <HAL_TIM_PWM_MspInit+0x88>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d10b      	bne.n	800292e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002916:	4b0a      	ldr	r3, [pc, #40]	@ (8002940 <HAL_TIM_PWM_MspInit+0x84>)
 8002918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291a:	4a09      	ldr	r2, [pc, #36]	@ (8002940 <HAL_TIM_PWM_MspInit+0x84>)
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	6593      	str	r3, [r2, #88]	@ 0x58
 8002922:	4b07      	ldr	r3, [pc, #28]	@ (8002940 <HAL_TIM_PWM_MspInit+0x84>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40021000 	.word	0x40021000
 8002944:	40000800 	.word	0x40000800

08002948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1a      	ldr	r2, [pc, #104]	@ (80029c0 <HAL_TIM_Base_MspInit+0x78>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d114      	bne.n	8002984 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800295a:	4b1a      	ldr	r3, [pc, #104]	@ (80029c4 <HAL_TIM_Base_MspInit+0x7c>)
 800295c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295e:	4a19      	ldr	r2, [pc, #100]	@ (80029c4 <HAL_TIM_Base_MspInit+0x7c>)
 8002960:	f043 0310 	orr.w	r3, r3, #16
 8002964:	6593      	str	r3, [r2, #88]	@ 0x58
 8002966:	4b17      	ldr	r3, [pc, #92]	@ (80029c4 <HAL_TIM_Base_MspInit+0x7c>)
 8002968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002972:	2200      	movs	r2, #0
 8002974:	2101      	movs	r1, #1
 8002976:	2036      	movs	r0, #54	@ 0x36
 8002978:	f002 f8dd 	bl	8004b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800297c:	2036      	movs	r0, #54	@ 0x36
 800297e:	f002 f8f4 	bl	8004b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002982:	e018      	b.n	80029b6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0f      	ldr	r2, [pc, #60]	@ (80029c8 <HAL_TIM_Base_MspInit+0x80>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d113      	bne.n	80029b6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800298e:	4b0d      	ldr	r3, [pc, #52]	@ (80029c4 <HAL_TIM_Base_MspInit+0x7c>)
 8002990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002992:	4a0c      	ldr	r2, [pc, #48]	@ (80029c4 <HAL_TIM_Base_MspInit+0x7c>)
 8002994:	f043 0320 	orr.w	r3, r3, #32
 8002998:	6593      	str	r3, [r2, #88]	@ 0x58
 800299a:	4b0a      	ldr	r3, [pc, #40]	@ (80029c4 <HAL_TIM_Base_MspInit+0x7c>)
 800299c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2101      	movs	r1, #1
 80029aa:	2037      	movs	r0, #55	@ 0x37
 80029ac:	f002 f8c3 	bl	8004b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80029b0:	2037      	movs	r0, #55	@ 0x37
 80029b2:	f002 f8da 	bl	8004b6a <HAL_NVIC_EnableIRQ>
}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40001000 	.word	0x40001000
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40001400 	.word	0x40001400

080029cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	@ 0x28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a35      	ldr	r2, [pc, #212]	@ (8002ac0 <HAL_TIM_MspPostInit+0xf4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d11e      	bne.n	8002a2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ee:	4b35      	ldr	r3, [pc, #212]	@ (8002ac4 <HAL_TIM_MspPostInit+0xf8>)
 80029f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f2:	4a34      	ldr	r2, [pc, #208]	@ (8002ac4 <HAL_TIM_MspPostInit+0xf8>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029fa:	4b32      	ldr	r3, [pc, #200]	@ (8002ac4 <HAL_TIM_MspPostInit+0xf8>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = fan_Pin_Pin;
 8002a06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	2300      	movs	r3, #0
 8002a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002a18:	2306      	movs	r3, #6
 8002a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(fan_Pin_GPIO_Port, &GPIO_InitStruct);
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	4619      	mov	r1, r3
 8002a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a26:	f002 fecb 	bl	80057c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a2a:	e044      	b.n	8002ab6 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a34:	d11e      	bne.n	8002a74 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	4b23      	ldr	r3, [pc, #140]	@ (8002ac4 <HAL_TIM_MspPostInit+0xf8>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3a:	4a22      	ldr	r2, [pc, #136]	@ (8002ac4 <HAL_TIM_MspPostInit+0xf8>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a42:	4b20      	ldr	r3, [pc, #128]	@ (8002ac4 <HAL_TIM_MspPostInit+0xf8>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = air_Heater_PWM_Pin_Pin;
 8002a4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a60:	2301      	movs	r3, #1
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(air_Heater_PWM_Pin_GPIO_Port, &GPIO_InitStruct);
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a6e:	f002 fea7 	bl	80057c0 <HAL_GPIO_Init>
}
 8002a72:	e020      	b.n	8002ab6 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM4)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a13      	ldr	r2, [pc, #76]	@ (8002ac8 <HAL_TIM_MspPostInit+0xfc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d11b      	bne.n	8002ab6 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7e:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <HAL_TIM_MspPostInit+0xf8>)
 8002a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a82:	4a10      	ldr	r2, [pc, #64]	@ (8002ac4 <HAL_TIM_MspPostInit+0xf8>)
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac4 <HAL_TIM_MspPostInit+0xf8>)
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = main_Heater_PWM_Pin_Pin;
 8002a96:	2340      	movs	r3, #64	@ 0x40
 8002a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(main_Heater_PWM_Pin_GPIO_Port, &GPIO_InitStruct);
 8002aaa:	f107 0314 	add.w	r3, r7, #20
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4806      	ldr	r0, [pc, #24]	@ (8002acc <HAL_TIM_MspPostInit+0x100>)
 8002ab2:	f002 fe85 	bl	80057c0 <HAL_GPIO_Init>
}
 8002ab6:	bf00      	nop
 8002ab8:	3728      	adds	r7, #40	@ 0x28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40012c00 	.word	0x40012c00
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40000800 	.word	0x40000800
 8002acc:	48000400 	.word	0x48000400

08002ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b09a      	sub	sp, #104	@ 0x68
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ae8:	f107 0310 	add.w	r3, r7, #16
 8002aec:	2244      	movs	r2, #68	@ 0x44
 8002aee:	2100      	movs	r1, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f007 fc6a 	bl	800a3ca <memset>
  if(huart->Instance==USART2)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a23      	ldr	r2, [pc, #140]	@ (8002b88 <HAL_UART_MspInit+0xb8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d13e      	bne.n	8002b7e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b00:	2302      	movs	r3, #2
 8002b02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b08:	f107 0310 	add.w	r3, r7, #16
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f003 fdd3 	bl	80066b8 <HAL_RCCEx_PeriphCLKConfig>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b18:	f7ff fa96 	bl	8002048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b8c <HAL_UART_MspInit+0xbc>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b20:	4a1a      	ldr	r2, [pc, #104]	@ (8002b8c <HAL_UART_MspInit+0xbc>)
 8002b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b28:	4b18      	ldr	r3, [pc, #96]	@ (8002b8c <HAL_UART_MspInit+0xbc>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b34:	4b15      	ldr	r3, [pc, #84]	@ (8002b8c <HAL_UART_MspInit+0xbc>)
 8002b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b38:	4a14      	ldr	r2, [pc, #80]	@ (8002b8c <HAL_UART_MspInit+0xbc>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b40:	4b12      	ldr	r3, [pc, #72]	@ (8002b8c <HAL_UART_MspInit+0xbc>)
 8002b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002b4c:	230c      	movs	r3, #12
 8002b4e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	2302      	movs	r3, #2
 8002b52:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b5c:	2307      	movs	r3, #7
 8002b5e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b64:	4619      	mov	r1, r3
 8002b66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b6a:	f002 fe29 	bl	80057c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2102      	movs	r1, #2
 8002b72:	2026      	movs	r0, #38	@ 0x26
 8002b74:	f001 ffdf 	bl	8004b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b78:	2026      	movs	r0, #38	@ 0x26
 8002b7a:	f001 fff6 	bl	8004b6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002b7e:	bf00      	nop
 8002b80:	3768      	adds	r7, #104	@ 0x68
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40004400 	.word	0x40004400
 8002b8c:	40021000 	.word	0x40021000

08002b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b94:	bf00      	nop
 8002b96:	e7fd      	b.n	8002b94 <NMI_Handler+0x4>

08002b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b9c:	bf00      	nop
 8002b9e:	e7fd      	b.n	8002b9c <HardFault_Handler+0x4>

08002ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ba4:	bf00      	nop
 8002ba6:	e7fd      	b.n	8002ba4 <MemManage_Handler+0x4>

08002ba8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <BusFault_Handler+0x4>

08002bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bb4:	bf00      	nop
 8002bb6:	e7fd      	b.n	8002bb4 <UsageFault_Handler+0x4>

08002bb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002be6:	f000 f9e9 	bl	8002fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bf4:	4802      	ldr	r0, [pc, #8]	@ (8002c00 <DMA1_Channel1_IRQHandler+0x10>)
 8002bf6:	f002 fc94 	bl	8005522 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200023b4 	.word	0x200023b4

08002c04 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002c08:	4802      	ldr	r0, [pc, #8]	@ (8002c14 <DMA1_Channel2_IRQHandler+0x10>)
 8002c0a:	f002 fc8a 	bl	8005522 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20002414 	.word	0x20002414

08002c18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c1c:	4802      	ldr	r0, [pc, #8]	@ (8002c28 <USART2_IRQHandler+0x10>)
 8002c1e:	f005 fa93 	bl	8008148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20002604 	.word	0x20002604

08002c2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c30:	4803      	ldr	r0, [pc, #12]	@ (8002c40 <TIM6_DAC_IRQHandler+0x14>)
 8002c32:	f004 f94b 	bl	8006ecc <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002c36:	4803      	ldr	r0, [pc, #12]	@ (8002c44 <TIM6_DAC_IRQHandler+0x18>)
 8002c38:	f002 f840 	bl	8004cbc <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	2000256c 	.word	0x2000256c
 8002c44:	20002474 	.word	0x20002474

08002c48 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c4c:	4802      	ldr	r0, [pc, #8]	@ (8002c58 <TIM7_IRQHandler+0x10>)
 8002c4e:	f004 f93d 	bl	8006ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	200025b8 	.word	0x200025b8

08002c5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return 1;
 8002c60:	2301      	movs	r3, #1
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <_kill>:

int _kill(int pid, int sig)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c76:	f007 fbfb 	bl	800a470 <__errno>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2216      	movs	r2, #22
 8002c7e:	601a      	str	r2, [r3, #0]
  return -1;
 8002c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <_exit>:

void _exit (int status)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c94:	f04f 31ff 	mov.w	r1, #4294967295
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ffe7 	bl	8002c6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c9e:	bf00      	nop
 8002ca0:	e7fd      	b.n	8002c9e <_exit+0x12>

08002ca2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	e00a      	b.n	8002cca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cb4:	f3af 8000 	nop.w
 8002cb8:	4601      	mov	r1, r0
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	60ba      	str	r2, [r7, #8]
 8002cc0:	b2ca      	uxtb	r2, r1
 8002cc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	dbf0      	blt.n	8002cb4 <_read+0x12>
  }

  return len;
 8002cd2:	687b      	ldr	r3, [r7, #4]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <_close>:
  }
  return len;
}

int _close(int file)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d04:	605a      	str	r2, [r3, #4]
  return 0;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <_isatty>:

int _isatty(int file)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d1c:	2301      	movs	r3, #1
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b085      	sub	sp, #20
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d4c:	4a14      	ldr	r2, [pc, #80]	@ (8002da0 <_sbrk+0x5c>)
 8002d4e:	4b15      	ldr	r3, [pc, #84]	@ (8002da4 <_sbrk+0x60>)
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d58:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <_sbrk+0x64>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d60:	4b11      	ldr	r3, [pc, #68]	@ (8002da8 <_sbrk+0x64>)
 8002d62:	4a12      	ldr	r2, [pc, #72]	@ (8002dac <_sbrk+0x68>)
 8002d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d66:	4b10      	ldr	r3, [pc, #64]	@ (8002da8 <_sbrk+0x64>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d207      	bcs.n	8002d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d74:	f007 fb7c 	bl	800a470 <__errno>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	220c      	movs	r2, #12
 8002d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	e009      	b.n	8002d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d84:	4b08      	ldr	r3, [pc, #32]	@ (8002da8 <_sbrk+0x64>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d8a:	4b07      	ldr	r3, [pc, #28]	@ (8002da8 <_sbrk+0x64>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	4a05      	ldr	r2, [pc, #20]	@ (8002da8 <_sbrk+0x64>)
 8002d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d96:	68fb      	ldr	r3, [r7, #12]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20008000 	.word	0x20008000
 8002da4:	00000400 	.word	0x00000400
 8002da8:	200026f0 	.word	0x200026f0
 8002dac:	20002848 	.word	0x20002848

08002db0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002db4:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <SystemInit+0x20>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dba:	4a05      	ldr	r2, [pc, #20]	@ (8002dd0 <SystemInit+0x20>)
 8002dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <TimerInterruptInit>:
	 * Argument 3: Timer Handle Type Def, example: &htim7
	 * Argument 4: Timer Clock Speed: 80000000 (Hz)
	 * Argument 5: Sampling time/time between successive interrupts in microseconds, example: 500
	 */

	{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]

		interrupt->timerNr = timeNr;						//Writes the timer number to the structure
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	615a      	str	r2, [r3, #20]
		interrupt->htim	= TmrHandle;						//Writes the timer handle to the structure
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	611a      	str	r2, [r3, #16]
		interrupt->Timer_Clock_Speed = tmrclkspd;			//Writes the timer clock speed to the structure
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	601a      	str	r2, [r3, #0]
		interrupt->Interrupt_Frequency = sampling_time;		//Writes the Sampling time/time between interrupts to the structure
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	605a      	str	r2, [r3, #4]


		UpdateInterruptTime (interrupt, sampling_time);		//Call the update interrupt time function to enter the values of the prescaler and counter resolution
 8002dfa:	69b9      	ldr	r1, [r7, #24]
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f805 	bl	8002e0c <UpdateInterruptTime>

	}
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <UpdateInterruptTime>:
	 * Inputs:
	 * Argument 1: INTERRUPT struct, named based on the interrupt name, example: ControllerInterrupt
	 * Argument 2: Sampling time/time between successive interrupts in microseconds, example: 500
	 */

{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
	interrupt->Interrupt_Frequency = sampling_time;		//Writes the sampling time to the structure
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	605a      	str	r2, [r3, #4]

	if(interrupt->Interrupt_Frequency > 65535)			//The maximum counter resolution is 65535, if the sampling time is greater than this, we need to adjust the prescaler
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e24:	d314      	bcc.n	8002e50 <UpdateInterruptTime+0x44>
	{
		interrupt->Counter_Resolution = 65535;			//Fix the resolution to the maximum 16 bits possible
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e2c:	609a      	str	r2, [r3, #8]
		interrupt->Prescaler = ((interrupt->Interrupt_Frequency)*(interrupt->Timer_Clock_Speed/1000000))/(interrupt->Counter_Resolution);	//Calculate prescaler value, brackets are very important
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	491b      	ldr	r1, [pc, #108]	@ (8002ea4 <UpdateInterruptTime+0x98>)
 8002e38:	fba1 1202 	umull	r1, r2, r1, r2
 8002e3c:	0c92      	lsrs	r2, r2, #18
 8002e3e:	fb03 f202 	mul.w	r2, r3, r2
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	e017      	b.n	8002e80 <UpdateInterruptTime+0x74>

	}

	else
	{
		interrupt->Counter_Resolution = (interrupt->Timer_Clock_Speed/1000000);			//Fix the resolution to 80 to get the minimum possible  resolution of 1 micro-second
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a13      	ldr	r2, [pc, #76]	@ (8002ea4 <UpdateInterruptTime+0x98>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	0c9a      	lsrs	r2, r3, #18
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
		interrupt->Prescaler = (interrupt->Interrupt_Frequency)*((interrupt->Timer_Clock_Speed/1000000)/((interrupt->Counter_Resolution)));	//Calculate prescaler value, brackets are very important
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	490e      	ldr	r1, [pc, #56]	@ (8002ea4 <UpdateInterruptTime+0x98>)
 8002e6a:	fba1 1202 	umull	r1, r2, r1, r2
 8002e6e:	0c91      	lsrs	r1, r2, #18
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6892      	ldr	r2, [r2, #8]
 8002e74:	fbb1 f2f2 	udiv	r2, r1, r2
 8002e78:	fb03 f202 	mul.w	r2, r3, r2
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	60da      	str	r2, [r3, #12]

	}

	interrupt->timerNr->PSC = interrupt->Prescaler;					//Write the prescaler to the timer control register
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	68d2      	ldr	r2, [r2, #12]
 8002e88:	629a      	str	r2, [r3, #40]	@ 0x28
	interrupt->timerNr->ARR = interrupt->Counter_Resolution-1;	//Write the counter resolution resolution to the timer auto reload register
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	3a01      	subs	r2, #1
 8002e94:	62da      	str	r2, [r3, #44]	@ 0x2c

}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	431bde83 	.word	0x431bde83

08002ea8 <StartInterrupt>:
	 *
	 * Input:
	 * Argument 1: INTERRUPT struct, named based on the interrupt name, example: ControllerInterrupt
	 */

	{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

		HAL_TIM_Base_Start_IT(interrupt->htim);			//Start the timer
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f003 fe47 	bl	8006b48 <HAL_TIM_Base_Start_IT>

	}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ec4:	480d      	ldr	r0, [pc, #52]	@ (8002efc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ec6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ec8:	f7ff ff72 	bl	8002db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ecc:	480c      	ldr	r0, [pc, #48]	@ (8002f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ece:	490d      	ldr	r1, [pc, #52]	@ (8002f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f08 <LoopForever+0xe>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002ed4:	e002      	b.n	8002edc <LoopCopyDataInit>

08002ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eda:	3304      	adds	r3, #4

08002edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee0:	d3f9      	bcc.n	8002ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8002f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8002f10 <LoopForever+0x16>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee8:	e001      	b.n	8002eee <LoopFillZerobss>

08002eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eec:	3204      	adds	r2, #4

08002eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef0:	d3fb      	bcc.n	8002eea <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002ef2:	f007 fac3 	bl	800a47c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ef6:	f7fe f9fd 	bl	80012f4 <main>

08002efa <LoopForever>:

LoopForever:
    b LoopForever
 8002efa:	e7fe      	b.n	8002efa <LoopForever>
  ldr   r0, =_estack
 8002efc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f04:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002f08:	0800e290 	.word	0x0800e290
  ldr r2, =_sbss
 8002f0c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002f10:	20002844 	.word	0x20002844

08002f14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f14:	e7fe      	b.n	8002f14 <ADC1_2_IRQHandler>

08002f16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f20:	2003      	movs	r0, #3
 8002f22:	f001 fdfd 	bl	8004b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f26:	2000      	movs	r0, #0
 8002f28:	f000 f80e 	bl	8002f48 <HAL_InitTick>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	71fb      	strb	r3, [r7, #7]
 8002f36:	e001      	b.n	8002f3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f38:	f7ff fb38 	bl	80025ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f3c:	79fb      	ldrb	r3, [r7, #7]

}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002f54:	4b16      	ldr	r3, [pc, #88]	@ (8002fb0 <HAL_InitTick+0x68>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d022      	beq.n	8002fa2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002f5c:	4b15      	ldr	r3, [pc, #84]	@ (8002fb4 <HAL_InitTick+0x6c>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b13      	ldr	r3, [pc, #76]	@ (8002fb0 <HAL_InitTick+0x68>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002f68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f70:	4618      	mov	r0, r3
 8002f72:	f001 fe08 	bl	8004b86 <HAL_SYSTICK_Config>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10f      	bne.n	8002f9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b0f      	cmp	r3, #15
 8002f80:	d809      	bhi.n	8002f96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f82:	2200      	movs	r2, #0
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8a:	f001 fdd4 	bl	8004b36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb8 <HAL_InitTick+0x70>)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	e007      	b.n	8002fa6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	e004      	b.n	8002fa6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
 8002fa0:	e001      	b.n	8002fa6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20000008 	.word	0x20000008
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	20000004 	.word	0x20000004

08002fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fc0:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <HAL_IncTick+0x1c>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b05      	ldr	r3, [pc, #20]	@ (8002fdc <HAL_IncTick+0x20>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4413      	add	r3, r2
 8002fca:	4a03      	ldr	r2, [pc, #12]	@ (8002fd8 <HAL_IncTick+0x1c>)
 8002fcc:	6013      	str	r3, [r2, #0]
}
 8002fce:	bf00      	nop
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	200026f4 	.word	0x200026f4
 8002fdc:	20000008 	.word	0x20000008

08002fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe4:	4b03      	ldr	r3, [pc, #12]	@ (8002ff4 <HAL_GetTick+0x14>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	200026f4 	.word	0x200026f4

08002ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003000:	f7ff ffee 	bl	8002fe0 <HAL_GetTick>
 8003004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d004      	beq.n	800301c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003012:	4b09      	ldr	r3, [pc, #36]	@ (8003038 <HAL_Delay+0x40>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4413      	add	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800301c:	bf00      	nop
 800301e:	f7ff ffdf 	bl	8002fe0 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	429a      	cmp	r2, r3
 800302c:	d8f7      	bhi.n	800301e <HAL_Delay+0x26>
  {
  }
}
 800302e:	bf00      	nop
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000008 	.word	0x20000008

0800303c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	609a      	str	r2, [r3, #8]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3360      	adds	r3, #96	@ 0x60
 80030b6:	461a      	mov	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b08      	ldr	r3, [pc, #32]	@ (80030e8 <LL_ADC_SetOffset+0x44>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80030dc:	bf00      	nop
 80030de:	371c      	adds	r7, #28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	03fff000 	.word	0x03fff000

080030ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3360      	adds	r3, #96	@ 0x60
 80030fa:	461a      	mov	r2, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3360      	adds	r3, #96	@ 0x60
 8003128:	461a      	mov	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	431a      	orrs	r2, r3
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003142:	bf00      	nop
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800314e:	b480      	push	{r7}
 8003150:	b087      	sub	sp, #28
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3360      	adds	r3, #96	@ 0x60
 800315e:	461a      	mov	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	431a      	orrs	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3360      	adds	r3, #96	@ 0x60
 8003194:	461a      	mov	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	431a      	orrs	r2, r3
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	615a      	str	r2, [r3, #20]
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003206:	b480      	push	{r7}
 8003208:	b087      	sub	sp, #28
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3330      	adds	r3, #48	@ 0x30
 8003216:	461a      	mov	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	0a1b      	lsrs	r3, r3, #8
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	4413      	add	r3, r2
 8003224:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	211f      	movs	r1, #31
 8003232:	fa01 f303 	lsl.w	r3, r1, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	401a      	ands	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0e9b      	lsrs	r3, r3, #26
 800323e:	f003 011f 	and.w	r1, r3, #31
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	fa01 f303 	lsl.w	r3, r1, r3
 800324c:	431a      	orrs	r2, r3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003252:	bf00      	nop
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800325e:	b480      	push	{r7}
 8003260:	b087      	sub	sp, #28
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3314      	adds	r3, #20
 800326e:	461a      	mov	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	0e5b      	lsrs	r3, r3, #25
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	4413      	add	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	0d1b      	lsrs	r3, r3, #20
 8003286:	f003 031f 	and.w	r3, r3, #31
 800328a:	2107      	movs	r1, #7
 800328c:	fa01 f303 	lsl.w	r3, r1, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	401a      	ands	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	0d1b      	lsrs	r3, r3, #20
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	fa01 f303 	lsl.w	r3, r1, r3
 80032a2:	431a      	orrs	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80032a8:	bf00      	nop
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032cc:	43db      	mvns	r3, r3
 80032ce:	401a      	ands	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f003 0318 	and.w	r3, r3, #24
 80032d6:	4908      	ldr	r1, [pc, #32]	@ (80032f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80032d8:	40d9      	lsrs	r1, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	400b      	ands	r3, r1
 80032de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e2:	431a      	orrs	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80032ea:	bf00      	nop
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	0007ffff 	.word	0x0007ffff

080032fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 031f 	and.w	r3, r3, #31
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003328:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6093      	str	r3, [r2, #8]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800334c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003350:	d101      	bne.n	8003356 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003374:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003378:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033a0:	d101      	bne.n	80033a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033c8:	f043 0201 	orr.w	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033f0:	f043 0202 	orr.w	r2, r3, #2
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <LL_ADC_IsEnabled+0x18>
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <LL_ADC_IsEnabled+0x1a>
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b02      	cmp	r3, #2
 800343c:	d101      	bne.n	8003442 <LL_ADC_IsDisableOngoing+0x18>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <LL_ADC_IsDisableOngoing+0x1a>
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003460:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003464:	f043 0204 	orr.w	r2, r3, #4
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003488:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800348c:	f043 0210 	orr.w	r2, r3, #16
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d101      	bne.n	80034b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034da:	f043 0220 	orr.w	r2, r3, #32
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d101      	bne.n	8003506 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b089      	sub	sp, #36	@ 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e167      	b.n	80037fe <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d109      	bne.n	8003550 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff f859 	bl	80025f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fef1 	bl	800333c <LL_ADC_IsDeepPowerDownEnabled>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d004      	beq.n	800356a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fed7 	bl	8003318 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff ff0c 	bl	800338c <LL_ADC_IsInternalRegulatorEnabled>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d115      	bne.n	80035a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fef0 	bl	8003364 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003584:	4ba0      	ldr	r3, [pc, #640]	@ (8003808 <HAL_ADC_Init+0x2f4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	099b      	lsrs	r3, r3, #6
 800358a:	4aa0      	ldr	r2, [pc, #640]	@ (800380c <HAL_ADC_Init+0x2f8>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	099b      	lsrs	r3, r3, #6
 8003592:	3301      	adds	r3, #1
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003598:	e002      	b.n	80035a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3b01      	subs	r3, #1
 800359e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f9      	bne.n	800359a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff feee 	bl	800338c <LL_ADC_IsInternalRegulatorEnabled>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10d      	bne.n	80035d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ba:	f043 0210 	orr.w	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c6:	f043 0201 	orr.w	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff ff62 	bl	80034a0 <LL_ADC_REG_IsConversionOngoing>
 80035dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 8100 	bne.w	80037ec <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f040 80fc 	bne.w	80037ec <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80035fc:	f043 0202 	orr.w	r2, r3, #2
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fefb 	bl	8003404 <LL_ADC_IsEnabled>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d111      	bne.n	8003638 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003614:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003618:	f7ff fef4 	bl	8003404 <LL_ADC_IsEnabled>
 800361c:	4604      	mov	r4, r0
 800361e:	487c      	ldr	r0, [pc, #496]	@ (8003810 <HAL_ADC_Init+0x2fc>)
 8003620:	f7ff fef0 	bl	8003404 <LL_ADC_IsEnabled>
 8003624:	4603      	mov	r3, r0
 8003626:	4323      	orrs	r3, r4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d105      	bne.n	8003638 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4619      	mov	r1, r3
 8003632:	4878      	ldr	r0, [pc, #480]	@ (8003814 <HAL_ADC_Init+0x300>)
 8003634:	f7ff fd02 	bl	800303c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	7f5b      	ldrb	r3, [r3, #29]
 800363c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003642:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003648:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800364e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003656:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003662:	2b01      	cmp	r3, #1
 8003664:	d106      	bne.n	8003674 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366a:	3b01      	subs	r3, #1
 800366c:	045b      	lsls	r3, r3, #17
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d009      	beq.n	8003690 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003680:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003688:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	4b60      	ldr	r3, [pc, #384]	@ (8003818 <HAL_ADC_Init+0x304>)
 8003698:	4013      	ands	r3, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	69b9      	ldr	r1, [r7, #24]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff ff15 	bl	80034ee <LL_ADC_INJ_IsConversionOngoing>
 80036c4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d16d      	bne.n	80037a8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d16a      	bne.n	80037a8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036d6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036de:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036ee:	f023 0302 	bic.w	r3, r3, #2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	69b9      	ldr	r1, [r7, #24]
 80036f8:	430b      	orrs	r3, r1
 80036fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d017      	beq.n	8003734 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003712:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800371c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003720:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6911      	ldr	r1, [r2, #16]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	430b      	orrs	r3, r1
 800372e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003732:	e013      	b.n	800375c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003742:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003754:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003758:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003762:	2b01      	cmp	r3, #1
 8003764:	d118      	bne.n	8003798 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003770:	f023 0304 	bic.w	r3, r3, #4
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800377c:	4311      	orrs	r1, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003782:	4311      	orrs	r1, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003788:	430a      	orrs	r2, r1
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0201 	orr.w	r2, r2, #1
 8003794:	611a      	str	r2, [r3, #16]
 8003796:	e007      	b.n	80037a8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0201 	bic.w	r2, r2, #1
 80037a6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d10c      	bne.n	80037ca <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b6:	f023 010f 	bic.w	r1, r3, #15
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	1e5a      	subs	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80037c8:	e007      	b.n	80037da <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 020f 	bic.w	r2, r2, #15
 80037d8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037de:	f023 0303 	bic.w	r3, r3, #3
 80037e2:	f043 0201 	orr.w	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037ea:	e007      	b.n	80037fc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f0:	f043 0210 	orr.w	r2, r3, #16
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3724      	adds	r7, #36	@ 0x24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd90      	pop	{r4, r7, pc}
 8003806:	bf00      	nop
 8003808:	20000000 	.word	0x20000000
 800380c:	053e2d63 	.word	0x053e2d63
 8003810:	50000100 	.word	0x50000100
 8003814:	50000300 	.word	0x50000300
 8003818:	fff04007 	.word	0xfff04007

0800381c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003828:	4851      	ldr	r0, [pc, #324]	@ (8003970 <HAL_ADC_Start_DMA+0x154>)
 800382a:	f7ff fd67 	bl	80032fc <LL_ADC_GetMultimode>
 800382e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff fe33 	bl	80034a0 <LL_ADC_REG_IsConversionOngoing>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	f040 808f 	bne.w	8003960 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_ADC_Start_DMA+0x34>
 800384c:	2302      	movs	r3, #2
 800384e:	e08a      	b.n	8003966 <HAL_ADC_Start_DMA+0x14a>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b05      	cmp	r3, #5
 8003862:	d002      	beq.n	800386a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b09      	cmp	r3, #9
 8003868:	d173      	bne.n	8003952 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 fdb6 	bl	80043dc <ADC_Enable>
 8003870:	4603      	mov	r3, r0
 8003872:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d166      	bne.n	8003948 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a38      	ldr	r2, [pc, #224]	@ (8003974 <HAL_ADC_Start_DMA+0x158>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d002      	beq.n	800389e <HAL_ADC_Start_DMA+0x82>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	e001      	b.n	80038a2 <HAL_ADC_Start_DMA+0x86>
 800389e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d002      	beq.n	80038b0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d006      	beq.n	80038d6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038cc:	f023 0206 	bic.w	r2, r3, #6
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	661a      	str	r2, [r3, #96]	@ 0x60
 80038d4:	e002      	b.n	80038dc <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e0:	4a25      	ldr	r2, [pc, #148]	@ (8003978 <HAL_ADC_Start_DMA+0x15c>)
 80038e2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e8:	4a24      	ldr	r2, [pc, #144]	@ (800397c <HAL_ADC_Start_DMA+0x160>)
 80038ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f0:	4a23      	ldr	r2, [pc, #140]	@ (8003980 <HAL_ADC_Start_DMA+0x164>)
 80038f2:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	221c      	movs	r2, #28
 80038fa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0210 	orr.w	r2, r2, #16
 8003912:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3340      	adds	r3, #64	@ 0x40
 800392e:	4619      	mov	r1, r3
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f001 fcba 	bl	80052ac <HAL_DMA_Start_IT>
 8003938:	4603      	mov	r3, r0
 800393a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fd85 	bl	8003450 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003946:	e00d      	b.n	8003964 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003950:	e008      	b.n	8003964 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800395e:	e001      	b.n	8003964 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003960:	2302      	movs	r3, #2
 8003962:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003964:	7dfb      	ldrb	r3, [r7, #23]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	50000300 	.word	0x50000300
 8003974:	50000100 	.word	0x50000100
 8003978:	080045a7 	.word	0x080045a7
 800397c:	0800467f 	.word	0x0800467f
 8003980:	0800469b 	.word	0x0800469b

08003984 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_ADC_Stop_DMA+0x16>
 8003996:	2302      	movs	r3, #2
 8003998:	e051      	b.n	8003a3e <HAL_ADC_Stop_DMA+0xba>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80039a2:	2103      	movs	r1, #3
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 fc5d 	bl	8004264 <ADC_ConversionStop>
 80039aa:	4603      	mov	r3, r0
 80039ac:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d13f      	bne.n	8003a34 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d10f      	bne.n	80039f2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 fce3 	bl	80053a2 <HAL_DMA_Abort>
 80039dc:	4603      	mov	r3, r0
 80039de:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0210 	bic.w	r2, r2, #16
 8003a00:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d105      	bne.n	8003a14 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 fd6d 	bl	80044e8 <ADC_Disable>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	73fb      	strb	r3, [r7, #15]
 8003a12:	e002      	b.n	8003a1a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fd67 	bl	80044e8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d109      	bne.n	8003a34 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	f043 0201 	orr.w	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b0b6      	sub	sp, #216	@ 0xd8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x22>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e3c8      	b.n	8004238 <HAL_ADC_ConfigChannel+0x7b4>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fcf4 	bl	80034a0 <LL_ADC_REG_IsConversionOngoing>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f040 83ad 	bne.w	800421a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	6859      	ldr	r1, [r3, #4]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	f7ff fb9a 	bl	8003206 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fce2 	bl	80034a0 <LL_ADC_REG_IsConversionOngoing>
 8003adc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff fd02 	bl	80034ee <LL_ADC_INJ_IsConversionOngoing>
 8003aea:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003aee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f040 81d9 	bne.w	8003eaa <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003af8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f040 81d4 	bne.w	8003eaa <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b0a:	d10f      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2200      	movs	r2, #0
 8003b16:	4619      	mov	r1, r3
 8003b18:	f7ff fba1 	bl	800325e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff fb48 	bl	80031ba <LL_ADC_SetSamplingTimeCommonConfig>
 8003b2a:	e00e      	b.n	8003b4a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	6819      	ldr	r1, [r3, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f7ff fb90 	bl	800325e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2100      	movs	r1, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff fb38 	bl	80031ba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	08db      	lsrs	r3, r3, #3
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d022      	beq.n	8003bb2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	6919      	ldr	r1, [r3, #16]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b7c:	f7ff fa92 	bl	80030a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6818      	ldr	r0, [r3, #0]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	6919      	ldr	r1, [r3, #16]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f7ff fade 	bl	800314e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d102      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x124>
 8003ba2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ba6:	e000      	b.n	8003baa <HAL_ADC_ConfigChannel+0x126>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	461a      	mov	r2, r3
 8003bac:	f7ff faea 	bl	8003184 <LL_ADC_SetOffsetSaturation>
 8003bb0:	e17b      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fa97 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x15a>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fa8c 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	0e9b      	lsrs	r3, r3, #26
 8003bd8:	f003 021f 	and.w	r2, r3, #31
 8003bdc:	e01e      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x198>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2100      	movs	r1, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff fa81 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003bf4:	fa93 f3a3 	rbit	r3, r3
 8003bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003bfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003c0c:	2320      	movs	r3, #32
 8003c0e:	e004      	b.n	8003c1a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003c10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c14:	fab3 f383 	clz	r3, r3
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d105      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x1b0>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	0e9b      	lsrs	r3, r3, #26
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	e018      	b.n	8003c66 <HAL_ADC_ConfigChannel+0x1e2>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c40:	fa93 f3a3 	rbit	r3, r3
 8003c44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003c48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003c50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003c58:	2320      	movs	r3, #32
 8003c5a:	e004      	b.n	8003c66 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003c5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c60:	fab3 f383 	clz	r3, r3
 8003c64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d106      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fa50 	bl	8003118 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fa34 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10a      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x220>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2101      	movs	r1, #1
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff fa29 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	0e9b      	lsrs	r3, r3, #26
 8003c9e:	f003 021f 	and.w	r2, r3, #31
 8003ca2:	e01e      	b.n	8003ce2 <HAL_ADC_ConfigChannel+0x25e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fa1e 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003cca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003cd2:	2320      	movs	r3, #32
 8003cd4:	e004      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003cd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003cda:	fab3 f383 	clz	r3, r3
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d105      	bne.n	8003cfa <HAL_ADC_ConfigChannel+0x276>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	0e9b      	lsrs	r3, r3, #26
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	e018      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x2a8>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003d0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003d16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003d1e:	2320      	movs	r3, #32
 8003d20:	e004      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003d22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d106      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2200      	movs	r2, #0
 8003d36:	2101      	movs	r1, #1
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff f9ed 	bl	8003118 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2102      	movs	r1, #2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff f9d1 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x2e6>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2102      	movs	r1, #2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff f9c6 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8003d60:	4603      	mov	r3, r0
 8003d62:	0e9b      	lsrs	r3, r3, #26
 8003d64:	f003 021f 	and.w	r2, r3, #31
 8003d68:	e01e      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x324>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2102      	movs	r1, #2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff f9bb 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d80:	fa93 f3a3 	rbit	r3, r3
 8003d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003d90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003d98:	2320      	movs	r3, #32
 8003d9a:	e004      	b.n	8003da6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003d9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003da0:	fab3 f383 	clz	r3, r3
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x33c>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	0e9b      	lsrs	r3, r3, #26
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	e016      	b.n	8003dee <HAL_ADC_ConfigChannel+0x36a>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003dcc:	fa93 f3a3 	rbit	r3, r3
 8003dd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003dd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003dd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003de0:	2320      	movs	r3, #32
 8003de2:	e004      	b.n	8003dee <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003de8:	fab3 f383 	clz	r3, r3
 8003dec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d106      	bne.n	8003e00 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2200      	movs	r2, #0
 8003df8:	2102      	movs	r1, #2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff f98c 	bl	8003118 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2103      	movs	r1, #3
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff f970 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10a      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x3a8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2103      	movs	r1, #3
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff f965 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8003e22:	4603      	mov	r3, r0
 8003e24:	0e9b      	lsrs	r3, r3, #26
 8003e26:	f003 021f 	and.w	r2, r3, #31
 8003e2a:	e017      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x3d8>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2103      	movs	r1, #3
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff f95a 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e3e:	fa93 f3a3 	rbit	r3, r3
 8003e42:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003e44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e46:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003e48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003e4e:	2320      	movs	r3, #32
 8003e50:	e003      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003e52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e54:	fab3 f383 	clz	r3, r3
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d105      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x3f0>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	0e9b      	lsrs	r3, r3, #26
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	e011      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x414>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e7c:	fa93 f3a3 	rbit	r3, r3
 8003e80:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003e82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e84:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003e8c:	2320      	movs	r3, #32
 8003e8e:	e003      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e92:	fab3 f383 	clz	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d106      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2103      	movs	r1, #3
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff f937 	bl	8003118 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff faa8 	bl	8003404 <LL_ADC_IsEnabled>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f040 8140 	bne.w	800413c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	6819      	ldr	r1, [r3, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f7ff f9f3 	bl	80032b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	4a8f      	ldr	r2, [pc, #572]	@ (8004110 <HAL_ADC_ConfigChannel+0x68c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	f040 8131 	bne.w	800413c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10b      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x47e>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	0e9b      	lsrs	r3, r3, #26
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	f003 031f 	and.w	r3, r3, #31
 8003ef6:	2b09      	cmp	r3, #9
 8003ef8:	bf94      	ite	ls
 8003efa:	2301      	movls	r3, #1
 8003efc:	2300      	movhi	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	e019      	b.n	8003f36 <HAL_ADC_ConfigChannel+0x4b2>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f0a:	fa93 f3a3 	rbit	r3, r3
 8003f0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003f10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f12:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003f14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003f1a:	2320      	movs	r3, #32
 8003f1c:	e003      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003f1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f20:	fab3 f383 	clz	r3, r3
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	3301      	adds	r3, #1
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	2b09      	cmp	r3, #9
 8003f2e:	bf94      	ite	ls
 8003f30:	2301      	movls	r3, #1
 8003f32:	2300      	movhi	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d079      	beq.n	800402e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d107      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x4d2>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	0e9b      	lsrs	r3, r3, #26
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	069b      	lsls	r3, r3, #26
 8003f50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f54:	e015      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x4fe>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f5e:	fa93 f3a3 	rbit	r3, r3
 8003f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f66:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003f6e:	2320      	movs	r3, #32
 8003f70:	e003      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f74:	fab3 f383 	clz	r3, r3
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	069b      	lsls	r3, r3, #26
 8003f7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x51e>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	0e9b      	lsrs	r3, r3, #26
 8003f94:	3301      	adds	r3, #1
 8003f96:	f003 031f 	and.w	r3, r3, #31
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa0:	e017      	b.n	8003fd2 <HAL_ADC_ConfigChannel+0x54e>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003faa:	fa93 f3a3 	rbit	r3, r3
 8003fae:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003fb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003fba:	2320      	movs	r3, #32
 8003fbc:	e003      	b.n	8003fc6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fc0:	fab3 f383 	clz	r3, r3
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	2101      	movs	r1, #1
 8003fce:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd2:	ea42 0103 	orr.w	r1, r2, r3
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x574>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	0e9b      	lsrs	r3, r3, #26
 8003fe8:	3301      	adds	r3, #1
 8003fea:	f003 021f 	and.w	r2, r3, #31
 8003fee:	4613      	mov	r3, r2
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	4413      	add	r3, r2
 8003ff4:	051b      	lsls	r3, r3, #20
 8003ff6:	e018      	b.n	800402a <HAL_ADC_ConfigChannel+0x5a6>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004000:	fa93 f3a3 	rbit	r3, r3
 8004004:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004008:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800400a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004010:	2320      	movs	r3, #32
 8004012:	e003      	b.n	800401c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004016:	fab3 f383 	clz	r3, r3
 800401a:	b2db      	uxtb	r3, r3
 800401c:	3301      	adds	r3, #1
 800401e:	f003 021f 	and.w	r2, r3, #31
 8004022:	4613      	mov	r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4413      	add	r3, r2
 8004028:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800402a:	430b      	orrs	r3, r1
 800402c:	e081      	b.n	8004132 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004036:	2b00      	cmp	r3, #0
 8004038:	d107      	bne.n	800404a <HAL_ADC_ConfigChannel+0x5c6>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	0e9b      	lsrs	r3, r3, #26
 8004040:	3301      	adds	r3, #1
 8004042:	069b      	lsls	r3, r3, #26
 8004044:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004048:	e015      	b.n	8004076 <HAL_ADC_ConfigChannel+0x5f2>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004052:	fa93 f3a3 	rbit	r3, r3
 8004056:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800405c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004062:	2320      	movs	r3, #32
 8004064:	e003      	b.n	800406e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004068:	fab3 f383 	clz	r3, r3
 800406c:	b2db      	uxtb	r3, r3
 800406e:	3301      	adds	r3, #1
 8004070:	069b      	lsls	r3, r3, #26
 8004072:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800407e:	2b00      	cmp	r3, #0
 8004080:	d109      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x612>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	0e9b      	lsrs	r3, r3, #26
 8004088:	3301      	adds	r3, #1
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	2101      	movs	r1, #1
 8004090:	fa01 f303 	lsl.w	r3, r1, r3
 8004094:	e017      	b.n	80040c6 <HAL_ADC_ConfigChannel+0x642>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	61fb      	str	r3, [r7, #28]
  return result;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80040a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80040ae:	2320      	movs	r3, #32
 80040b0:	e003      	b.n	80040ba <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	fab3 f383 	clz	r3, r3
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	3301      	adds	r3, #1
 80040bc:	f003 031f 	and.w	r3, r3, #31
 80040c0:	2101      	movs	r1, #1
 80040c2:	fa01 f303 	lsl.w	r3, r1, r3
 80040c6:	ea42 0103 	orr.w	r1, r2, r3
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10d      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x66e>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	0e9b      	lsrs	r3, r3, #26
 80040dc:	3301      	adds	r3, #1
 80040de:	f003 021f 	and.w	r2, r3, #31
 80040e2:	4613      	mov	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	3b1e      	subs	r3, #30
 80040ea:	051b      	lsls	r3, r3, #20
 80040ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80040f0:	e01e      	b.n	8004130 <HAL_ADC_ConfigChannel+0x6ac>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	fa93 f3a3 	rbit	r3, r3
 80040fe:	613b      	str	r3, [r7, #16]
  return result;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d104      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800410a:	2320      	movs	r3, #32
 800410c:	e006      	b.n	800411c <HAL_ADC_ConfigChannel+0x698>
 800410e:	bf00      	nop
 8004110:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	fab3 f383 	clz	r3, r3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	3301      	adds	r3, #1
 800411e:	f003 021f 	and.w	r2, r3, #31
 8004122:	4613      	mov	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	4413      	add	r3, r2
 8004128:	3b1e      	subs	r3, #30
 800412a:	051b      	lsls	r3, r3, #20
 800412c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004130:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004136:	4619      	mov	r1, r3
 8004138:	f7ff f891 	bl	800325e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b3f      	ldr	r3, [pc, #252]	@ (8004240 <HAL_ADC_ConfigChannel+0x7bc>)
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d071      	beq.n	800422c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004148:	483e      	ldr	r0, [pc, #248]	@ (8004244 <HAL_ADC_ConfigChannel+0x7c0>)
 800414a:	f7fe ff9d 	bl	8003088 <LL_ADC_GetCommonPathInternalCh>
 800414e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a3c      	ldr	r2, [pc, #240]	@ (8004248 <HAL_ADC_ConfigChannel+0x7c4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d004      	beq.n	8004166 <HAL_ADC_ConfigChannel+0x6e2>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a3a      	ldr	r2, [pc, #232]	@ (800424c <HAL_ADC_ConfigChannel+0x7c8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d127      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004166:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800416a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d121      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800417a:	d157      	bne.n	800422c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800417c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004180:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004184:	4619      	mov	r1, r3
 8004186:	482f      	ldr	r0, [pc, #188]	@ (8004244 <HAL_ADC_ConfigChannel+0x7c0>)
 8004188:	f7fe ff6b 	bl	8003062 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800418c:	4b30      	ldr	r3, [pc, #192]	@ (8004250 <HAL_ADC_ConfigChannel+0x7cc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	099b      	lsrs	r3, r3, #6
 8004192:	4a30      	ldr	r2, [pc, #192]	@ (8004254 <HAL_ADC_ConfigChannel+0x7d0>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	099b      	lsrs	r3, r3, #6
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	4613      	mov	r3, r2
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041a6:	e002      	b.n	80041ae <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1f9      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041b4:	e03a      	b.n	800422c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a27      	ldr	r2, [pc, #156]	@ (8004258 <HAL_ADC_ConfigChannel+0x7d4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d113      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10d      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a22      	ldr	r2, [pc, #136]	@ (800425c <HAL_ADC_ConfigChannel+0x7d8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d02a      	beq.n	800422c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041de:	4619      	mov	r1, r3
 80041e0:	4818      	ldr	r0, [pc, #96]	@ (8004244 <HAL_ADC_ConfigChannel+0x7c0>)
 80041e2:	f7fe ff3e 	bl	8003062 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041e6:	e021      	b.n	800422c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004260 <HAL_ADC_ConfigChannel+0x7dc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d11c      	bne.n	800422c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d116      	bne.n	800422c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a16      	ldr	r2, [pc, #88]	@ (800425c <HAL_ADC_ConfigChannel+0x7d8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d011      	beq.n	800422c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004208:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800420c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004210:	4619      	mov	r1, r3
 8004212:	480c      	ldr	r0, [pc, #48]	@ (8004244 <HAL_ADC_ConfigChannel+0x7c0>)
 8004214:	f7fe ff25 	bl	8003062 <LL_ADC_SetCommonPathInternalCh>
 8004218:	e008      	b.n	800422c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421e:	f043 0220 	orr.w	r2, r3, #32
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004234:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004238:	4618      	mov	r0, r3
 800423a:	37d8      	adds	r7, #216	@ 0xd8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	80080000 	.word	0x80080000
 8004244:	50000300 	.word	0x50000300
 8004248:	c3210000 	.word	0xc3210000
 800424c:	90c00010 	.word	0x90c00010
 8004250:	20000000 	.word	0x20000000
 8004254:	053e2d63 	.word	0x053e2d63
 8004258:	c7520000 	.word	0xc7520000
 800425c:	50000100 	.word	0x50000100
 8004260:	cb840000 	.word	0xcb840000

08004264 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800426e:	2300      	movs	r3, #0
 8004270:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff f910 	bl	80034a0 <LL_ADC_REG_IsConversionOngoing>
 8004280:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff f931 	bl	80034ee <LL_ADC_INJ_IsConversionOngoing>
 800428c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d103      	bne.n	800429c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8098 	beq.w	80043cc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d02a      	beq.n	8004300 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	7f5b      	ldrb	r3, [r3, #29]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d126      	bne.n	8004300 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	7f1b      	ldrb	r3, [r3, #28]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d122      	bne.n	8004300 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80042ba:	2301      	movs	r3, #1
 80042bc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80042be:	e014      	b.n	80042ea <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	4a45      	ldr	r2, [pc, #276]	@ (80043d8 <ADC_ConversionStop+0x174>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d90d      	bls.n	80042e4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042cc:	f043 0210 	orr.w	r2, r3, #16
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d8:	f043 0201 	orr.w	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e074      	b.n	80043ce <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	3301      	adds	r3, #1
 80042e8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f4:	2b40      	cmp	r3, #64	@ 0x40
 80042f6:	d1e3      	bne.n	80042c0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2240      	movs	r2, #64	@ 0x40
 80042fe:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d014      	beq.n	8004330 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff f8c8 	bl	80034a0 <LL_ADC_REG_IsConversionOngoing>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00c      	beq.n	8004330 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff f885 	bl	800342a <LL_ADC_IsDisableOngoing>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d104      	bne.n	8004330 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff f8a4 	bl	8003478 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d014      	beq.n	8004360 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff f8d7 	bl	80034ee <LL_ADC_INJ_IsConversionOngoing>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00c      	beq.n	8004360 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff f86d 	bl	800342a <LL_ADC_IsDisableOngoing>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d104      	bne.n	8004360 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff f8b3 	bl	80034c6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d005      	beq.n	8004372 <ADC_ConversionStop+0x10e>
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	2b03      	cmp	r3, #3
 800436a:	d105      	bne.n	8004378 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800436c:	230c      	movs	r3, #12
 800436e:	617b      	str	r3, [r7, #20]
        break;
 8004370:	e005      	b.n	800437e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004372:	2308      	movs	r3, #8
 8004374:	617b      	str	r3, [r7, #20]
        break;
 8004376:	e002      	b.n	800437e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004378:	2304      	movs	r3, #4
 800437a:	617b      	str	r3, [r7, #20]
        break;
 800437c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800437e:	f7fe fe2f 	bl	8002fe0 <HAL_GetTick>
 8004382:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004384:	e01b      	b.n	80043be <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004386:	f7fe fe2b 	bl	8002fe0 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b05      	cmp	r3, #5
 8004392:	d914      	bls.n	80043be <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00d      	beq.n	80043be <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a6:	f043 0210 	orr.w	r2, r3, #16
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e007      	b.n	80043ce <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1dc      	bne.n	8004386 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3720      	adds	r7, #32
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	a33fffff 	.word	0xa33fffff

080043dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff f809 	bl	8003404 <LL_ADC_IsEnabled>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d169      	bne.n	80044cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	4b36      	ldr	r3, [pc, #216]	@ (80044d8 <ADC_Enable+0xfc>)
 8004400:	4013      	ands	r3, r2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00d      	beq.n	8004422 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440a:	f043 0210 	orr.w	r2, r3, #16
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004416:	f043 0201 	orr.w	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e055      	b.n	80044ce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe ffc4 	bl	80033b4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800442c:	482b      	ldr	r0, [pc, #172]	@ (80044dc <ADC_Enable+0x100>)
 800442e:	f7fe fe2b 	bl	8003088 <LL_ADC_GetCommonPathInternalCh>
 8004432:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004434:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004438:	2b00      	cmp	r3, #0
 800443a:	d013      	beq.n	8004464 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800443c:	4b28      	ldr	r3, [pc, #160]	@ (80044e0 <ADC_Enable+0x104>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	099b      	lsrs	r3, r3, #6
 8004442:	4a28      	ldr	r2, [pc, #160]	@ (80044e4 <ADC_Enable+0x108>)
 8004444:	fba2 2303 	umull	r2, r3, r2, r3
 8004448:	099b      	lsrs	r3, r3, #6
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	4613      	mov	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004456:	e002      	b.n	800445e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	3b01      	subs	r3, #1
 800445c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1f9      	bne.n	8004458 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004464:	f7fe fdbc 	bl	8002fe0 <HAL_GetTick>
 8004468:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800446a:	e028      	b.n	80044be <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f7fe ffc7 	bl	8003404 <LL_ADC_IsEnabled>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d104      	bne.n	8004486 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f7fe ff97 	bl	80033b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004486:	f7fe fdab 	bl	8002fe0 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d914      	bls.n	80044be <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d00d      	beq.n	80044be <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a6:	f043 0210 	orr.w	r2, r3, #16
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b2:	f043 0201 	orr.w	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e007      	b.n	80044ce <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d1cf      	bne.n	800446c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	8000003f 	.word	0x8000003f
 80044dc:	50000300 	.word	0x50000300
 80044e0:	20000000 	.word	0x20000000
 80044e4:	053e2d63 	.word	0x053e2d63

080044e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fe ff98 	bl	800342a <LL_ADC_IsDisableOngoing>
 80044fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe ff7f 	bl	8003404 <LL_ADC_IsEnabled>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d047      	beq.n	800459c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d144      	bne.n	800459c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 030d 	and.w	r3, r3, #13
 800451c:	2b01      	cmp	r3, #1
 800451e:	d10c      	bne.n	800453a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f7fe ff59 	bl	80033dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2203      	movs	r2, #3
 8004530:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004532:	f7fe fd55 	bl	8002fe0 <HAL_GetTick>
 8004536:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004538:	e029      	b.n	800458e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453e:	f043 0210 	orr.w	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800454a:	f043 0201 	orr.w	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e023      	b.n	800459e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004556:	f7fe fd43 	bl	8002fe0 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d914      	bls.n	800458e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00d      	beq.n	800458e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004576:	f043 0210 	orr.w	r2, r3, #16
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004582:	f043 0201 	orr.w	r2, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e007      	b.n	800459e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1dc      	bne.n	8004556 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d14b      	bne.n	8004658 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d021      	beq.n	800461e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fe fdfe 	bl	80031e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d032      	beq.n	8004650 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d12b      	bne.n	8004650 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004608:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d11f      	bne.n	8004650 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004614:	f043 0201 	orr.w	r2, r3, #1
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800461c:	e018      	b.n	8004650 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d111      	bne.n	8004650 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004630:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d105      	bne.n	8004650 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004648:	f043 0201 	orr.w	r2, r3, #1
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f7ff f9f8 	bl	8003a46 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004656:	e00e      	b.n	8004676 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800465c:	f003 0310 	and.w	r3, r3, #16
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7ff fa02 	bl	8003a6e <HAL_ADC_ErrorCallback>
}
 800466a:	e004      	b.n	8004676 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	4798      	blx	r3
}
 8004676:	bf00      	nop
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f7ff f9e4 	bl	8003a5a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004692:	bf00      	nop
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046b8:	f043 0204 	orr.w	r2, r3, #4
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f7ff f9d4 	bl	8003a6e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <LL_ADC_IsEnabled>:
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <LL_ADC_IsEnabled+0x18>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <LL_ADC_IsEnabled+0x1a>
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <LL_ADC_StartCalibration>:
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004706:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004710:	4313      	orrs	r3, r2
 8004712:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	609a      	str	r2, [r3, #8]
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <LL_ADC_IsCalibrationOnGoing>:
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004736:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800473a:	d101      	bne.n	8004740 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800473c:	2301      	movs	r3, #1
 800473e:	e000      	b.n	8004742 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <LL_ADC_REG_IsConversionOngoing>:
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b04      	cmp	r3, #4
 8004760:	d101      	bne.n	8004766 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800477e:	2300      	movs	r3, #0
 8004780:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_ADCEx_Calibration_Start+0x1c>
 800478c:	2302      	movs	r3, #2
 800478e:	e04d      	b.n	800482c <HAL_ADCEx_Calibration_Start+0xb8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff fea5 	bl	80044e8 <ADC_Disable>
 800479e:	4603      	mov	r3, r0
 80047a0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d136      	bne.n	8004816 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80047b0:	f023 0302 	bic.w	r3, r3, #2
 80047b4:	f043 0202 	orr.w	r2, r3, #2
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6839      	ldr	r1, [r7, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff ff96 	bl	80046f4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80047c8:	e014      	b.n	80047f4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	3301      	adds	r3, #1
 80047ce:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4a18      	ldr	r2, [pc, #96]	@ (8004834 <HAL_ADCEx_Calibration_Start+0xc0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d90d      	bls.n	80047f4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047dc:	f023 0312 	bic.w	r3, r3, #18
 80047e0:	f043 0210 	orr.w	r2, r3, #16
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e01b      	b.n	800482c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff ff94 	bl	8004726 <LL_ADC_IsCalibrationOnGoing>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e2      	bne.n	80047ca <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004808:	f023 0303 	bic.w	r3, r3, #3
 800480c:	f043 0201 	orr.w	r2, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004814:	e005      	b.n	8004822 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481a:	f043 0210 	orr.w	r2, r3, #16
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800482a:	7bfb      	ldrb	r3, [r7, #15]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	0004de01 	.word	0x0004de01

08004838 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004838:	b590      	push	{r4, r7, lr}
 800483a:	b0a1      	sub	sp, #132	@ 0x84
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004852:	2302      	movs	r3, #2
 8004854:	e08b      	b.n	800496e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800485e:	2300      	movs	r3, #0
 8004860:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004862:	2300      	movs	r3, #0
 8004864:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800486e:	d102      	bne.n	8004876 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004870:	4b41      	ldr	r3, [pc, #260]	@ (8004978 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	e001      	b.n	800487a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004876:	2300      	movs	r3, #0
 8004878:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10b      	bne.n	8004898 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004884:	f043 0220 	orr.w	r2, r3, #32
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e06a      	b.n	800496e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff ff57 	bl	800474e <LL_ADC_REG_IsConversionOngoing>
 80048a0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff ff51 	bl	800474e <LL_ADC_REG_IsConversionOngoing>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d14c      	bne.n	800494c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80048b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d149      	bne.n	800494c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048b8:	4b30      	ldr	r3, [pc, #192]	@ (800497c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80048ba:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d028      	beq.n	8004916 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80048c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	6859      	ldr	r1, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80048d6:	035b      	lsls	r3, r3, #13
 80048d8:	430b      	orrs	r3, r1
 80048da:	431a      	orrs	r2, r3
 80048dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80048e4:	f7ff fef3 	bl	80046ce <LL_ADC_IsEnabled>
 80048e8:	4604      	mov	r4, r0
 80048ea:	4823      	ldr	r0, [pc, #140]	@ (8004978 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80048ec:	f7ff feef 	bl	80046ce <LL_ADC_IsEnabled>
 80048f0:	4603      	mov	r3, r0
 80048f2:	4323      	orrs	r3, r4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d133      	bne.n	8004960 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80048f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004900:	f023 030f 	bic.w	r3, r3, #15
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	6811      	ldr	r1, [r2, #0]
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	6892      	ldr	r2, [r2, #8]
 800490c:	430a      	orrs	r2, r1
 800490e:	431a      	orrs	r2, r3
 8004910:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004912:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004914:	e024      	b.n	8004960 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004916:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800491e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004920:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004922:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004926:	f7ff fed2 	bl	80046ce <LL_ADC_IsEnabled>
 800492a:	4604      	mov	r4, r0
 800492c:	4812      	ldr	r0, [pc, #72]	@ (8004978 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800492e:	f7ff fece 	bl	80046ce <LL_ADC_IsEnabled>
 8004932:	4603      	mov	r3, r0
 8004934:	4323      	orrs	r3, r4
 8004936:	2b00      	cmp	r3, #0
 8004938:	d112      	bne.n	8004960 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800493a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004942:	f023 030f 	bic.w	r3, r3, #15
 8004946:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004948:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800494a:	e009      	b.n	8004960 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004950:	f043 0220 	orr.w	r2, r3, #32
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800495e:	e000      	b.n	8004962 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004960:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800496a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800496e:	4618      	mov	r0, r3
 8004970:	3784      	adds	r7, #132	@ 0x84
 8004972:	46bd      	mov	sp, r7
 8004974:	bd90      	pop	{r4, r7, pc}
 8004976:	bf00      	nop
 8004978:	50000100 	.word	0x50000100
 800497c:	50000300 	.word	0x50000300

08004980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004990:	4b0c      	ldr	r3, [pc, #48]	@ (80049c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800499c:	4013      	ands	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049b2:	4a04      	ldr	r2, [pc, #16]	@ (80049c4 <__NVIC_SetPriorityGrouping+0x44>)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	60d3      	str	r3, [r2, #12]
}
 80049b8:	bf00      	nop
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	e000ed00 	.word	0xe000ed00

080049c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049cc:	4b04      	ldr	r3, [pc, #16]	@ (80049e0 <__NVIC_GetPriorityGrouping+0x18>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	0a1b      	lsrs	r3, r3, #8
 80049d2:	f003 0307 	and.w	r3, r3, #7
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000ed00 	.word	0xe000ed00

080049e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	db0b      	blt.n	8004a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	f003 021f 	and.w	r2, r3, #31
 80049fc:	4907      	ldr	r1, [pc, #28]	@ (8004a1c <__NVIC_EnableIRQ+0x38>)
 80049fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	2001      	movs	r0, #1
 8004a06:	fa00 f202 	lsl.w	r2, r0, r2
 8004a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000e100 	.word	0xe000e100

08004a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	6039      	str	r1, [r7, #0]
 8004a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	db0a      	blt.n	8004a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	490c      	ldr	r1, [pc, #48]	@ (8004a6c <__NVIC_SetPriority+0x4c>)
 8004a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3e:	0112      	lsls	r2, r2, #4
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	440b      	add	r3, r1
 8004a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a48:	e00a      	b.n	8004a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	4908      	ldr	r1, [pc, #32]	@ (8004a70 <__NVIC_SetPriority+0x50>)
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	3b04      	subs	r3, #4
 8004a58:	0112      	lsls	r2, r2, #4
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	761a      	strb	r2, [r3, #24]
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	e000e100 	.word	0xe000e100
 8004a70:	e000ed00 	.word	0xe000ed00

08004a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b089      	sub	sp, #36	@ 0x24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f1c3 0307 	rsb	r3, r3, #7
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	bf28      	it	cs
 8004a92:	2304      	movcs	r3, #4
 8004a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	2b06      	cmp	r3, #6
 8004a9c:	d902      	bls.n	8004aa4 <NVIC_EncodePriority+0x30>
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	3b03      	subs	r3, #3
 8004aa2:	e000      	b.n	8004aa6 <NVIC_EncodePriority+0x32>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	43da      	mvns	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	401a      	ands	r2, r3
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004abc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac6:	43d9      	mvns	r1, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004acc:	4313      	orrs	r3, r2
         );
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3724      	adds	r7, #36	@ 0x24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
	...

08004adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004aec:	d301      	bcc.n	8004af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aee:	2301      	movs	r3, #1
 8004af0:	e00f      	b.n	8004b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004af2:	4a0a      	ldr	r2, [pc, #40]	@ (8004b1c <SysTick_Config+0x40>)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004afa:	210f      	movs	r1, #15
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	f7ff ff8e 	bl	8004a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b04:	4b05      	ldr	r3, [pc, #20]	@ (8004b1c <SysTick_Config+0x40>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b0a:	4b04      	ldr	r3, [pc, #16]	@ (8004b1c <SysTick_Config+0x40>)
 8004b0c:	2207      	movs	r2, #7
 8004b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	e000e010 	.word	0xe000e010

08004b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff ff29 	bl	8004980 <__NVIC_SetPriorityGrouping>
}
 8004b2e:	bf00      	nop
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b086      	sub	sp, #24
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
 8004b42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b44:	f7ff ff40 	bl	80049c8 <__NVIC_GetPriorityGrouping>
 8004b48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	6978      	ldr	r0, [r7, #20]
 8004b50:	f7ff ff90 	bl	8004a74 <NVIC_EncodePriority>
 8004b54:	4602      	mov	r2, r0
 8004b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff ff5f 	bl	8004a20 <__NVIC_SetPriority>
}
 8004b62:	bf00      	nop
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	4603      	mov	r3, r0
 8004b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff ff33 	bl	80049e4 <__NVIC_EnableIRQ>
}
 8004b7e:	bf00      	nop
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff ffa4 	bl	8004adc <SysTick_Config>
 8004b94:	4603      	mov	r3, r0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b082      	sub	sp, #8
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e014      	b.n	8004bda <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	791b      	ldrb	r3, [r3, #4]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7fd fe35 	bl	8002830 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e056      	b.n	8004ca6 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	795b      	ldrb	r3, [r3, #5]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_DAC_Start+0x20>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e050      	b.n	8004ca6 <HAL_DAC_Start+0xc2>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6819      	ldr	r1, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	409a      	lsls	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c28:	4b22      	ldr	r3, [pc, #136]	@ (8004cb4 <HAL_DAC_Start+0xd0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	099b      	lsrs	r3, r3, #6
 8004c2e:	4a22      	ldr	r2, [pc, #136]	@ (8004cb8 <HAL_DAC_Start+0xd4>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	099b      	lsrs	r3, r3, #6
 8004c36:	3301      	adds	r3, #1
 8004c38:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004c3a:	e002      	b.n	8004c42 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f9      	bne.n	8004c3c <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10f      	bne.n	8004c6e <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d11d      	bne.n	8004c98 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0201 	orr.w	r2, r2, #1
 8004c6a:	605a      	str	r2, [r3, #4]
 8004c6c:	e014      	b.n	8004c98 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	2102      	movs	r1, #2
 8004c80:	fa01 f303 	lsl.w	r3, r1, r3
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d107      	bne.n	8004c98 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0202 	orr.w	r2, r2, #2
 8004c96:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20000000 	.word	0x20000000
 8004cb8:	053e2d63 	.word	0x053e2d63

08004cbc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd2:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01d      	beq.n	8004d1a <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d018      	beq.n	8004d1a <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2204      	movs	r2, #4
 8004cec:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f043 0201 	orr.w	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d12:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f854 	bl	8004dc2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01d      	beq.n	8004d60 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d018      	beq.n	8004d60 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2204      	movs	r2, #4
 8004d32:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f043 0202 	orr.w	r2, r3, #2
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004d48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004d58:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f9f4 	bl	8005148 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e018      	b.n	8004db6 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d105      	bne.n	8004da2 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	e004      	b.n	8004dac <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4413      	add	r3, r2
 8004da8:	3314      	adds	r3, #20
 8004daa:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	461a      	mov	r2, r3
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	371c      	adds	r7, #28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	@ 0x28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <HAL_DAC_ConfigChannel+0x1c>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e19e      	b.n	8005136 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	795b      	ldrb	r3, [r3, #5]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_DAC_ConfigChannel+0x2c>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e198      	b.n	8005136 <HAL_DAC_ConfigChannel+0x35e>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2201      	movs	r2, #1
 8004e08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d17a      	bne.n	8004f0e <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004e18:	f7fe f8e2 	bl	8002fe0 <HAL_GetTick>
 8004e1c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d13d      	bne.n	8004ea0 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e24:	e018      	b.n	8004e58 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e26:	f7fe f8db 	bl	8002fe0 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d911      	bls.n	8004e58 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f043 0208 	orr.w	r2, r3, #8
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2203      	movs	r2, #3
 8004e52:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e16e      	b.n	8005136 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1df      	bne.n	8004e26 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e70:	e020      	b.n	8004eb4 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e72:	f7fe f8b5 	bl	8002fe0 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d90f      	bls.n	8004ea0 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	da0a      	bge.n	8004ea0 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f043 0208 	orr.w	r2, r3, #8
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2203      	movs	r2, #3
 8004e9a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e14a      	b.n	8005136 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	dbe3      	blt.n	8004e72 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004eb2:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	ea02 0103 	and.w	r1, r2, r3
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	409a      	lsls	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	21ff      	movs	r1, #255	@ 0xff
 8004ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	ea02 0103 	and.w	r1, r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	409a      	lsls	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d11d      	bne.n	8004f52 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	221f      	movs	r2, #31
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f2e:	4013      	ands	r3, r2
 8004f30:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f003 0310 	and.w	r3, r3, #16
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f46:	4313      	orrs	r3, r2
 8004f48:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f50:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f58:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	2207      	movs	r2, #7
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	43db      	mvns	r3, r3
 8004f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d102      	bne.n	8004f7c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	623b      	str	r3, [r7, #32]
 8004f7a:	e00f      	b.n	8004f9c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d102      	bne.n	8004f8a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004f84:	2301      	movs	r3, #1
 8004f86:	623b      	str	r3, [r7, #32]
 8004f88:	e008      	b.n	8004f9c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d102      	bne.n	8004f98 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004f92:	2301      	movs	r3, #1
 8004f94:	623b      	str	r3, [r7, #32]
 8004f96:	e001      	b.n	8004f9c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	6a3a      	ldr	r2, [r7, #32]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	791b      	ldrb	r3, [r3, #4]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d102      	bne.n	8004fd0 <HAL_DAC_ConfigChannel+0x1f8>
 8004fca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fce:	e000      	b.n	8004fd2 <HAL_DAC_ConfigChannel+0x1fa>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f003 0310 	and.w	r3, r3, #16
 8004fde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fea:	4013      	ands	r3, r2
 8004fec:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	795b      	ldrb	r3, [r3, #5]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d102      	bne.n	8004ffc <HAL_DAC_ConfigChannel+0x224>
 8004ff6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ffa:	e000      	b.n	8004ffe <HAL_DAC_ConfigChannel+0x226>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800500a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d114      	bne.n	800503e <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005014:	f001 fad2 	bl	80065bc <HAL_RCC_GetHCLKFreq>
 8005018:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	4a48      	ldr	r2, [pc, #288]	@ (8005140 <HAL_DAC_ConfigChannel+0x368>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d904      	bls.n	800502c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005028:	627b      	str	r3, [r7, #36]	@ 0x24
 800502a:	e00f      	b.n	800504c <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4a45      	ldr	r2, [pc, #276]	@ (8005144 <HAL_DAC_ConfigChannel+0x36c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d90a      	bls.n	800504a <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005036:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800503a:	627b      	str	r3, [r7, #36]	@ 0x24
 800503c:	e006      	b.n	800504c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005044:	4313      	orrs	r3, r2
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24
 8005048:	e000      	b.n	800504c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800504a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800505a:	4313      	orrs	r3, r2
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005064:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6819      	ldr	r1, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f003 0310 	and.w	r3, r3, #16
 8005072:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	43da      	mvns	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	400a      	ands	r2, r1
 8005082:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f003 0310 	and.w	r3, r3, #16
 8005092:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	43db      	mvns	r3, r3
 800509c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800509e:	4013      	ands	r3, r2
 80050a0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f003 0310 	and.w	r3, r3, #16
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b6:	4313      	orrs	r3, r2
 80050b8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6819      	ldr	r1, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	22c0      	movs	r2, #192	@ 0xc0
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	43da      	mvns	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	400a      	ands	r2, r1
 80050dc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	089b      	lsrs	r3, r3, #2
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	089b      	lsrs	r3, r3, #2
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	43db      	mvns	r3, r3
 8005112:	ea02 0103 	and.w	r1, r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	409a      	lsls	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005134:	7ffb      	ldrb	r3, [r7, #31]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3728      	adds	r7, #40	@ 0x28
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	09896800 	.word	0x09896800
 8005144:	04c4b400 	.word	0x04c4b400

08005148 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e08d      	b.n	800528a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	4b47      	ldr	r3, [pc, #284]	@ (8005294 <HAL_DMA_Init+0x138>)
 8005176:	429a      	cmp	r2, r3
 8005178:	d80f      	bhi.n	800519a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	4b45      	ldr	r3, [pc, #276]	@ (8005298 <HAL_DMA_Init+0x13c>)
 8005182:	4413      	add	r3, r2
 8005184:	4a45      	ldr	r2, [pc, #276]	@ (800529c <HAL_DMA_Init+0x140>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	091b      	lsrs	r3, r3, #4
 800518c:	009a      	lsls	r2, r3, #2
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a42      	ldr	r2, [pc, #264]	@ (80052a0 <HAL_DMA_Init+0x144>)
 8005196:	641a      	str	r2, [r3, #64]	@ 0x40
 8005198:	e00e      	b.n	80051b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	4b40      	ldr	r3, [pc, #256]	@ (80052a4 <HAL_DMA_Init+0x148>)
 80051a2:	4413      	add	r3, r2
 80051a4:	4a3d      	ldr	r2, [pc, #244]	@ (800529c <HAL_DMA_Init+0x140>)
 80051a6:	fba2 2303 	umull	r2, r3, r2, r3
 80051aa:	091b      	lsrs	r3, r3, #4
 80051ac:	009a      	lsls	r2, r3, #2
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a3c      	ldr	r2, [pc, #240]	@ (80052a8 <HAL_DMA_Init+0x14c>)
 80051b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80051ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80051dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fa76 	bl	80056fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005218:	d102      	bne.n	8005220 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005234:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d010      	beq.n	8005260 <HAL_DMA_Init+0x104>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2b04      	cmp	r3, #4
 8005244:	d80c      	bhi.n	8005260 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa96 	bl	8005778 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800525c:	605a      	str	r2, [r3, #4]
 800525e:	e008      	b.n	8005272 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40020407 	.word	0x40020407
 8005298:	bffdfff8 	.word	0xbffdfff8
 800529c:	cccccccd 	.word	0xcccccccd
 80052a0:	40020000 	.word	0x40020000
 80052a4:	bffdfbf8 	.word	0xbffdfbf8
 80052a8:	40020400 	.word	0x40020400

080052ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_DMA_Start_IT+0x20>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e066      	b.n	800539a <HAL_DMA_Start_IT+0xee>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d155      	bne.n	800538c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0201 	bic.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f9bb 	bl	8005680 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530e:	2b00      	cmp	r3, #0
 8005310:	d008      	beq.n	8005324 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 020e 	orr.w	r2, r2, #14
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	e00f      	b.n	8005344 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0204 	bic.w	r2, r2, #4
 8005332:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 020a 	orr.w	r2, r2, #10
 8005342:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800535c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005360:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005366:	2b00      	cmp	r3, #0
 8005368:	d007      	beq.n	800537a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005374:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005378:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f042 0201 	orr.w	r2, r2, #1
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	e005      	b.n	8005398 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005394:	2302      	movs	r3, #2
 8005396:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005398:	7dfb      	ldrb	r3, [r7, #23]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d005      	beq.n	80053c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2204      	movs	r2, #4
 80053be:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	73fb      	strb	r3, [r7, #15]
 80053c4:	e037      	b.n	8005436 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 020e 	bic.w	r2, r2, #14
 80053d4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053e4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0201 	bic.w	r2, r2, #1
 80053f4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fa:	f003 021f 	and.w	r2, r3, #31
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005402:	2101      	movs	r1, #1
 8005404:	fa01 f202 	lsl.w	r2, r1, r2
 8005408:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005412:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00c      	beq.n	8005436 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005426:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800542a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005434:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005446:	7bfb      	ldrb	r3, [r7, #15]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d00d      	beq.n	8005488 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2204      	movs	r2, #4
 8005470:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	73fb      	strb	r3, [r7, #15]
 8005486:	e047      	b.n	8005518 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 020e 	bic.w	r2, r2, #14
 8005496:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0201 	bic.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054bc:	f003 021f 	and.w	r2, r3, #31
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c4:	2101      	movs	r1, #1
 80054c6:	fa01 f202 	lsl.w	r2, r1, r2
 80054ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80054d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00c      	beq.n	80054f8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80054f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	4798      	blx	r3
    }
  }
  return status;
 8005518:	7bfb      	ldrb	r3, [r7, #15]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553e:	f003 031f 	and.w	r3, r3, #31
 8005542:	2204      	movs	r2, #4
 8005544:	409a      	lsls	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4013      	ands	r3, r2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d026      	beq.n	800559c <HAL_DMA_IRQHandler+0x7a>
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d021      	beq.n	800559c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d107      	bne.n	8005576 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0204 	bic.w	r2, r2, #4
 8005574:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800557a:	f003 021f 	and.w	r2, r3, #31
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005582:	2104      	movs	r1, #4
 8005584:	fa01 f202 	lsl.w	r2, r1, r2
 8005588:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558e:	2b00      	cmp	r3, #0
 8005590:	d071      	beq.n	8005676 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800559a:	e06c      	b.n	8005676 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a0:	f003 031f 	and.w	r3, r3, #31
 80055a4:	2202      	movs	r2, #2
 80055a6:	409a      	lsls	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4013      	ands	r3, r2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d02e      	beq.n	800560e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d029      	beq.n	800560e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10b      	bne.n	80055e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 020a 	bic.w	r2, r2, #10
 80055d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e4:	f003 021f 	and.w	r2, r3, #31
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ec:	2102      	movs	r1, #2
 80055ee:	fa01 f202 	lsl.w	r2, r1, r2
 80055f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005600:	2b00      	cmp	r3, #0
 8005602:	d038      	beq.n	8005676 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800560c:	e033      	b.n	8005676 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	2208      	movs	r2, #8
 8005618:	409a      	lsls	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4013      	ands	r3, r2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d02a      	beq.n	8005678 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b00      	cmp	r3, #0
 800562a:	d025      	beq.n	8005678 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 020e 	bic.w	r2, r2, #14
 800563a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005640:	f003 021f 	and.w	r2, r3, #31
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005648:	2101      	movs	r1, #1
 800564a:	fa01 f202 	lsl.w	r2, r1, r2
 800564e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800566a:	2b00      	cmp	r3, #0
 800566c:	d004      	beq.n	8005678 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005676:	bf00      	nop
 8005678:	bf00      	nop
}
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005696:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ae:	f003 021f 	and.w	r2, r3, #31
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b6:	2101      	movs	r1, #1
 80056b8:	fa01 f202 	lsl.w	r2, r1, r2
 80056bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	2b10      	cmp	r3, #16
 80056cc:	d108      	bne.n	80056e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80056de:	e007      	b.n	80056f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	60da      	str	r2, [r3, #12]
}
 80056f0:	bf00      	nop
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	4b16      	ldr	r3, [pc, #88]	@ (8005764 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800570c:	429a      	cmp	r2, r3
 800570e:	d802      	bhi.n	8005716 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005710:	4b15      	ldr	r3, [pc, #84]	@ (8005768 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	e001      	b.n	800571a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005716:	4b15      	ldr	r3, [pc, #84]	@ (800576c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005718:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	3b08      	subs	r3, #8
 8005726:	4a12      	ldr	r2, [pc, #72]	@ (8005770 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005728:	fba2 2303 	umull	r2, r3, r2, r3
 800572c:	091b      	lsrs	r3, r3, #4
 800572e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005734:	089b      	lsrs	r3, r3, #2
 8005736:	009a      	lsls	r2, r3, #2
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	4413      	add	r3, r2
 800573c:	461a      	mov	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a0b      	ldr	r2, [pc, #44]	@ (8005774 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005746:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 031f 	and.w	r3, r3, #31
 800574e:	2201      	movs	r2, #1
 8005750:	409a      	lsls	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005756:	bf00      	nop
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	40020407 	.word	0x40020407
 8005768:	40020800 	.word	0x40020800
 800576c:	40020820 	.word	0x40020820
 8005770:	cccccccd 	.word	0xcccccccd
 8005774:	40020880 	.word	0x40020880

08005778 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	b2db      	uxtb	r3, r3
 8005786:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4b0b      	ldr	r3, [pc, #44]	@ (80057b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	461a      	mov	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a08      	ldr	r2, [pc, #32]	@ (80057bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800579a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3b01      	subs	r3, #1
 80057a0:	f003 031f 	and.w	r3, r3, #31
 80057a4:	2201      	movs	r2, #1
 80057a6:	409a      	lsls	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80057ac:	bf00      	nop
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	1000823f 	.word	0x1000823f
 80057bc:	40020940 	.word	0x40020940

080057c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80057ce:	e15a      	b.n	8005a86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	2101      	movs	r1, #1
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	fa01 f303 	lsl.w	r3, r1, r3
 80057dc:	4013      	ands	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 814c 	beq.w	8005a80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f003 0303 	and.w	r3, r3, #3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d005      	beq.n	8005800 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d130      	bne.n	8005862 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	2203      	movs	r2, #3
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	43db      	mvns	r3, r3
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4013      	ands	r3, r2
 8005816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005836:	2201      	movs	r2, #1
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	43db      	mvns	r3, r3
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4013      	ands	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	091b      	lsrs	r3, r3, #4
 800584c:	f003 0201 	and.w	r2, r3, #1
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	2b03      	cmp	r3, #3
 800586c:	d017      	beq.n	800589e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	2203      	movs	r2, #3
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43db      	mvns	r3, r3
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4013      	ands	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	fa02 f303 	lsl.w	r3, r2, r3
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d123      	bne.n	80058f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	08da      	lsrs	r2, r3, #3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3208      	adds	r2, #8
 80058b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	220f      	movs	r2, #15
 80058c2:	fa02 f303 	lsl.w	r3, r2, r3
 80058c6:	43db      	mvns	r3, r3
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4013      	ands	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	fa02 f303 	lsl.w	r3, r2, r3
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	08da      	lsrs	r2, r3, #3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3208      	adds	r2, #8
 80058ec:	6939      	ldr	r1, [r7, #16]
 80058ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	2203      	movs	r2, #3
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	43db      	mvns	r3, r3
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4013      	ands	r3, r2
 8005908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f003 0203 	and.w	r2, r3, #3
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	4313      	orrs	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 80a6 	beq.w	8005a80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005934:	4b5b      	ldr	r3, [pc, #364]	@ (8005aa4 <HAL_GPIO_Init+0x2e4>)
 8005936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005938:	4a5a      	ldr	r2, [pc, #360]	@ (8005aa4 <HAL_GPIO_Init+0x2e4>)
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005940:	4b58      	ldr	r3, [pc, #352]	@ (8005aa4 <HAL_GPIO_Init+0x2e4>)
 8005942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	60bb      	str	r3, [r7, #8]
 800594a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800594c:	4a56      	ldr	r2, [pc, #344]	@ (8005aa8 <HAL_GPIO_Init+0x2e8>)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	089b      	lsrs	r3, r3, #2
 8005952:	3302      	adds	r3, #2
 8005954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	220f      	movs	r2, #15
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	43db      	mvns	r3, r3
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4013      	ands	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005976:	d01f      	beq.n	80059b8 <HAL_GPIO_Init+0x1f8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a4c      	ldr	r2, [pc, #304]	@ (8005aac <HAL_GPIO_Init+0x2ec>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d019      	beq.n	80059b4 <HAL_GPIO_Init+0x1f4>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a4b      	ldr	r2, [pc, #300]	@ (8005ab0 <HAL_GPIO_Init+0x2f0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <HAL_GPIO_Init+0x1f0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a4a      	ldr	r2, [pc, #296]	@ (8005ab4 <HAL_GPIO_Init+0x2f4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00d      	beq.n	80059ac <HAL_GPIO_Init+0x1ec>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a49      	ldr	r2, [pc, #292]	@ (8005ab8 <HAL_GPIO_Init+0x2f8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d007      	beq.n	80059a8 <HAL_GPIO_Init+0x1e8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a48      	ldr	r2, [pc, #288]	@ (8005abc <HAL_GPIO_Init+0x2fc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d101      	bne.n	80059a4 <HAL_GPIO_Init+0x1e4>
 80059a0:	2305      	movs	r3, #5
 80059a2:	e00a      	b.n	80059ba <HAL_GPIO_Init+0x1fa>
 80059a4:	2306      	movs	r3, #6
 80059a6:	e008      	b.n	80059ba <HAL_GPIO_Init+0x1fa>
 80059a8:	2304      	movs	r3, #4
 80059aa:	e006      	b.n	80059ba <HAL_GPIO_Init+0x1fa>
 80059ac:	2303      	movs	r3, #3
 80059ae:	e004      	b.n	80059ba <HAL_GPIO_Init+0x1fa>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e002      	b.n	80059ba <HAL_GPIO_Init+0x1fa>
 80059b4:	2301      	movs	r3, #1
 80059b6:	e000      	b.n	80059ba <HAL_GPIO_Init+0x1fa>
 80059b8:	2300      	movs	r3, #0
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	f002 0203 	and.w	r2, r2, #3
 80059c0:	0092      	lsls	r2, r2, #2
 80059c2:	4093      	lsls	r3, r2
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059ca:	4937      	ldr	r1, [pc, #220]	@ (8005aa8 <HAL_GPIO_Init+0x2e8>)
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	089b      	lsrs	r3, r3, #2
 80059d0:	3302      	adds	r3, #2
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059d8:	4b39      	ldr	r3, [pc, #228]	@ (8005ac0 <HAL_GPIO_Init+0x300>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	43db      	mvns	r3, r3
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4013      	ands	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80059fc:	4a30      	ldr	r2, [pc, #192]	@ (8005ac0 <HAL_GPIO_Init+0x300>)
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005a02:	4b2f      	ldr	r3, [pc, #188]	@ (8005ac0 <HAL_GPIO_Init+0x300>)
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	43db      	mvns	r3, r3
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005a26:	4a26      	ldr	r2, [pc, #152]	@ (8005ac0 <HAL_GPIO_Init+0x300>)
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005a2c:	4b24      	ldr	r3, [pc, #144]	@ (8005ac0 <HAL_GPIO_Init+0x300>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	43db      	mvns	r3, r3
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a50:	4a1b      	ldr	r2, [pc, #108]	@ (8005ac0 <HAL_GPIO_Init+0x300>)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005a56:	4b1a      	ldr	r3, [pc, #104]	@ (8005ac0 <HAL_GPIO_Init+0x300>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	43db      	mvns	r3, r3
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	4013      	ands	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005a7a:	4a11      	ldr	r2, [pc, #68]	@ (8005ac0 <HAL_GPIO_Init+0x300>)
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	3301      	adds	r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f47f ae9d 	bne.w	80057d0 <HAL_GPIO_Init+0x10>
  }
}
 8005a96:	bf00      	nop
 8005a98:	bf00      	nop
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	40010000 	.word	0x40010000
 8005aac:	48000400 	.word	0x48000400
 8005ab0:	48000800 	.word	0x48000800
 8005ab4:	48000c00 	.word	0x48000c00
 8005ab8:	48001000 	.word	0x48001000
 8005abc:	48001400 	.word	0x48001400
 8005ac0:	40010400 	.word	0x40010400

08005ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	807b      	strh	r3, [r7, #2]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ad4:	787b      	ldrb	r3, [r7, #1]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ada:	887a      	ldrh	r2, [r7, #2]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ae0:	e002      	b.n	8005ae8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ae2:	887a      	ldrh	r2, [r7, #2]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d141      	bne.n	8005b86 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b02:	4b4b      	ldr	r3, [pc, #300]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b0e:	d131      	bne.n	8005b74 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b10:	4b47      	ldr	r3, [pc, #284]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b16:	4a46      	ldr	r2, [pc, #280]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b20:	4b43      	ldr	r3, [pc, #268]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b28:	4a41      	ldr	r2, [pc, #260]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b30:	4b40      	ldr	r3, [pc, #256]	@ (8005c34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2232      	movs	r2, #50	@ 0x32
 8005b36:	fb02 f303 	mul.w	r3, r2, r3
 8005b3a:	4a3f      	ldr	r2, [pc, #252]	@ (8005c38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b40:	0c9b      	lsrs	r3, r3, #18
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b46:	e002      	b.n	8005b4e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b4e:	4b38      	ldr	r3, [pc, #224]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b5a:	d102      	bne.n	8005b62 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1f2      	bne.n	8005b48 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b62:	4b33      	ldr	r3, [pc, #204]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b6e:	d158      	bne.n	8005c22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e057      	b.n	8005c24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b74:	4b2e      	ldr	r3, [pc, #184]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b7a:	4a2d      	ldr	r2, [pc, #180]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005b84:	e04d      	b.n	8005c22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b8c:	d141      	bne.n	8005c12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b8e:	4b28      	ldr	r3, [pc, #160]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b9a:	d131      	bne.n	8005c00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b9c:	4b24      	ldr	r3, [pc, #144]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ba2:	4a23      	ldr	r2, [pc, #140]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ba8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bac:	4b20      	ldr	r3, [pc, #128]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005bba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8005c34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2232      	movs	r2, #50	@ 0x32
 8005bc2:	fb02 f303 	mul.w	r3, r2, r3
 8005bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8005c38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bcc:	0c9b      	lsrs	r3, r3, #18
 8005bce:	3301      	adds	r3, #1
 8005bd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bd2:	e002      	b.n	8005bda <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bda:	4b15      	ldr	r3, [pc, #84]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005be6:	d102      	bne.n	8005bee <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1f2      	bne.n	8005bd4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bee:	4b10      	ldr	r3, [pc, #64]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bfa:	d112      	bne.n	8005c22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e011      	b.n	8005c24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c00:	4b0b      	ldr	r3, [pc, #44]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c06:	4a0a      	ldr	r2, [pc, #40]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005c10:	e007      	b.n	8005c22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c12:	4b07      	ldr	r3, [pc, #28]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c1a:	4a05      	ldr	r2, [pc, #20]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c20:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	40007000 	.word	0x40007000
 8005c34:	20000000 	.word	0x20000000
 8005c38:	431bde83 	.word	0x431bde83

08005c3c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005c40:	4b05      	ldr	r3, [pc, #20]	@ (8005c58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	4a04      	ldr	r2, [pc, #16]	@ (8005c58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c4a:	6093      	str	r3, [r2, #8]
}
 8005c4c:	bf00      	nop
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40007000 	.word	0x40007000

08005c5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e2fe      	b.n	800626c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d075      	beq.n	8005d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c7a:	4b97      	ldr	r3, [pc, #604]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 030c 	and.w	r3, r3, #12
 8005c82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c84:	4b94      	ldr	r3, [pc, #592]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f003 0303 	and.w	r3, r3, #3
 8005c8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	2b0c      	cmp	r3, #12
 8005c92:	d102      	bne.n	8005c9a <HAL_RCC_OscConfig+0x3e>
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d002      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x44>
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d10b      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca0:	4b8d      	ldr	r3, [pc, #564]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d05b      	beq.n	8005d64 <HAL_RCC_OscConfig+0x108>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d157      	bne.n	8005d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e2d9      	b.n	800626c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cc0:	d106      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x74>
 8005cc2:	4b85      	ldr	r3, [pc, #532]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a84      	ldr	r2, [pc, #528]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	e01d      	b.n	8005d0c <HAL_RCC_OscConfig+0xb0>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cd8:	d10c      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x98>
 8005cda:	4b7f      	ldr	r3, [pc, #508]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a7e      	ldr	r2, [pc, #504]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	4b7c      	ldr	r3, [pc, #496]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a7b      	ldr	r2, [pc, #492]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	e00b      	b.n	8005d0c <HAL_RCC_OscConfig+0xb0>
 8005cf4:	4b78      	ldr	r3, [pc, #480]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a77      	ldr	r2, [pc, #476]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	4b75      	ldr	r3, [pc, #468]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a74      	ldr	r2, [pc, #464]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d013      	beq.n	8005d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d14:	f7fd f964 	bl	8002fe0 <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d1c:	f7fd f960 	bl	8002fe0 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b64      	cmp	r3, #100	@ 0x64
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e29e      	b.n	800626c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f0      	beq.n	8005d1c <HAL_RCC_OscConfig+0xc0>
 8005d3a:	e014      	b.n	8005d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3c:	f7fd f950 	bl	8002fe0 <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d44:	f7fd f94c 	bl	8002fe0 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b64      	cmp	r3, #100	@ 0x64
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e28a      	b.n	800626c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d56:	4b60      	ldr	r3, [pc, #384]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1f0      	bne.n	8005d44 <HAL_RCC_OscConfig+0xe8>
 8005d62:	e000      	b.n	8005d66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d075      	beq.n	8005e5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d72:	4b59      	ldr	r3, [pc, #356]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 030c 	and.w	r3, r3, #12
 8005d7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d7c:	4b56      	ldr	r3, [pc, #344]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 0303 	and.w	r3, r3, #3
 8005d84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	2b0c      	cmp	r3, #12
 8005d8a:	d102      	bne.n	8005d92 <HAL_RCC_OscConfig+0x136>
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d002      	beq.n	8005d98 <HAL_RCC_OscConfig+0x13c>
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d11f      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d98:	4b4f      	ldr	r3, [pc, #316]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_RCC_OscConfig+0x154>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e25d      	b.n	800626c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db0:	4b49      	ldr	r3, [pc, #292]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	061b      	lsls	r3, r3, #24
 8005dbe:	4946      	ldr	r1, [pc, #280]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005dc4:	4b45      	ldr	r3, [pc, #276]	@ (8005edc <HAL_RCC_OscConfig+0x280>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fd f8bd 	bl	8002f48 <HAL_InitTick>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d043      	beq.n	8005e5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e249      	b.n	800626c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d023      	beq.n	8005e28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005de0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dec:	f7fd f8f8 	bl	8002fe0 <HAL_GetTick>
 8005df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df4:	f7fd f8f4 	bl	8002fe0 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e232      	b.n	800626c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e06:	4b34      	ldr	r3, [pc, #208]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0f0      	beq.n	8005df4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e12:	4b31      	ldr	r3, [pc, #196]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	061b      	lsls	r3, r3, #24
 8005e20:	492d      	ldr	r1, [pc, #180]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	604b      	str	r3, [r1, #4]
 8005e26:	e01a      	b.n	8005e5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e28:	4b2b      	ldr	r3, [pc, #172]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005e2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e34:	f7fd f8d4 	bl	8002fe0 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e3c:	f7fd f8d0 	bl	8002fe0 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e20e      	b.n	800626c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e4e:	4b22      	ldr	r3, [pc, #136]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1f0      	bne.n	8005e3c <HAL_RCC_OscConfig+0x1e0>
 8005e5a:	e000      	b.n	8005e5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d041      	beq.n	8005eee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d01c      	beq.n	8005eac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e72:	4b19      	ldr	r3, [pc, #100]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e78:	4a17      	ldr	r2, [pc, #92]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005e7a:	f043 0301 	orr.w	r3, r3, #1
 8005e7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e82:	f7fd f8ad 	bl	8002fe0 <HAL_GetTick>
 8005e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e88:	e008      	b.n	8005e9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e8a:	f7fd f8a9 	bl	8002fe0 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d901      	bls.n	8005e9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e1e7      	b.n	800626c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0ef      	beq.n	8005e8a <HAL_RCC_OscConfig+0x22e>
 8005eaa:	e020      	b.n	8005eee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eac:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005eb2:	4a09      	ldr	r2, [pc, #36]	@ (8005ed8 <HAL_RCC_OscConfig+0x27c>)
 8005eb4:	f023 0301 	bic.w	r3, r3, #1
 8005eb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ebc:	f7fd f890 	bl	8002fe0 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ec2:	e00d      	b.n	8005ee0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ec4:	f7fd f88c 	bl	8002fe0 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d906      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e1ca      	b.n	800626c <HAL_RCC_OscConfig+0x610>
 8005ed6:	bf00      	nop
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ee0:	4b8c      	ldr	r3, [pc, #560]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8005ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1ea      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 80a6 	beq.w	8006048 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005efc:	2300      	movs	r3, #0
 8005efe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f00:	4b84      	ldr	r3, [pc, #528]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8005f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_RCC_OscConfig+0x2b4>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <HAL_RCC_OscConfig+0x2b6>
 8005f10:	2300      	movs	r3, #0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00d      	beq.n	8005f32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f16:	4b7f      	ldr	r3, [pc, #508]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8005f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f1a:	4a7e      	ldr	r2, [pc, #504]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8005f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f20:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f22:	4b7c      	ldr	r3, [pc, #496]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8005f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f32:	4b79      	ldr	r3, [pc, #484]	@ (8006118 <HAL_RCC_OscConfig+0x4bc>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d118      	bne.n	8005f70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f3e:	4b76      	ldr	r3, [pc, #472]	@ (8006118 <HAL_RCC_OscConfig+0x4bc>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a75      	ldr	r2, [pc, #468]	@ (8006118 <HAL_RCC_OscConfig+0x4bc>)
 8005f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f4a:	f7fd f849 	bl	8002fe0 <HAL_GetTick>
 8005f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f50:	e008      	b.n	8005f64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f52:	f7fd f845 	bl	8002fe0 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e183      	b.n	800626c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f64:	4b6c      	ldr	r3, [pc, #432]	@ (8006118 <HAL_RCC_OscConfig+0x4bc>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0f0      	beq.n	8005f52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d108      	bne.n	8005f8a <HAL_RCC_OscConfig+0x32e>
 8005f78:	4b66      	ldr	r3, [pc, #408]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8005f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f7e:	4a65      	ldr	r2, [pc, #404]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8005f80:	f043 0301 	orr.w	r3, r3, #1
 8005f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f88:	e024      	b.n	8005fd4 <HAL_RCC_OscConfig+0x378>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	2b05      	cmp	r3, #5
 8005f90:	d110      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x358>
 8005f92:	4b60      	ldr	r3, [pc, #384]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8005f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f98:	4a5e      	ldr	r2, [pc, #376]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8005f9a:	f043 0304 	orr.w	r3, r3, #4
 8005f9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fa2:	4b5c      	ldr	r3, [pc, #368]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8005fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fa8:	4a5a      	ldr	r2, [pc, #360]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fb2:	e00f      	b.n	8005fd4 <HAL_RCC_OscConfig+0x378>
 8005fb4:	4b57      	ldr	r3, [pc, #348]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8005fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fba:	4a56      	ldr	r2, [pc, #344]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8005fbc:	f023 0301 	bic.w	r3, r3, #1
 8005fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fc4:	4b53      	ldr	r3, [pc, #332]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8005fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fca:	4a52      	ldr	r2, [pc, #328]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8005fcc:	f023 0304 	bic.w	r3, r3, #4
 8005fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d016      	beq.n	800600a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fdc:	f7fd f800 	bl	8002fe0 <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fe2:	e00a      	b.n	8005ffa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe4:	f7fc fffc 	bl	8002fe0 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e138      	b.n	800626c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ffa:	4b46      	ldr	r3, [pc, #280]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8005ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0ed      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x388>
 8006008:	e015      	b.n	8006036 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800600a:	f7fc ffe9 	bl	8002fe0 <HAL_GetTick>
 800600e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006010:	e00a      	b.n	8006028 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006012:	f7fc ffe5 	bl	8002fe0 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006020:	4293      	cmp	r3, r2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e121      	b.n	800626c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006028:	4b3a      	ldr	r3, [pc, #232]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1ed      	bne.n	8006012 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006036:	7ffb      	ldrb	r3, [r7, #31]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d105      	bne.n	8006048 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800603c:	4b35      	ldr	r3, [pc, #212]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 800603e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006040:	4a34      	ldr	r2, [pc, #208]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8006042:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006046:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0320 	and.w	r3, r3, #32
 8006050:	2b00      	cmp	r3, #0
 8006052:	d03c      	beq.n	80060ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01c      	beq.n	8006096 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800605c:	4b2d      	ldr	r3, [pc, #180]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 800605e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006062:	4a2c      	ldr	r2, [pc, #176]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8006064:	f043 0301 	orr.w	r3, r3, #1
 8006068:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606c:	f7fc ffb8 	bl	8002fe0 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006074:	f7fc ffb4 	bl	8002fe0 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e0f2      	b.n	800626c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006086:	4b23      	ldr	r3, [pc, #140]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8006088:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0ef      	beq.n	8006074 <HAL_RCC_OscConfig+0x418>
 8006094:	e01b      	b.n	80060ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006096:	4b1f      	ldr	r3, [pc, #124]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 8006098:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800609c:	4a1d      	ldr	r2, [pc, #116]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 800609e:	f023 0301 	bic.w	r3, r3, #1
 80060a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a6:	f7fc ff9b 	bl	8002fe0 <HAL_GetTick>
 80060aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060ac:	e008      	b.n	80060c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060ae:	f7fc ff97 	bl	8002fe0 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e0d5      	b.n	800626c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060c0:	4b14      	ldr	r3, [pc, #80]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 80060c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1ef      	bne.n	80060ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 80c9 	beq.w	800626a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 030c 	and.w	r3, r3, #12
 80060e0:	2b0c      	cmp	r3, #12
 80060e2:	f000 8083 	beq.w	80061ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d15e      	bne.n	80061ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ee:	4b09      	ldr	r3, [pc, #36]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a08      	ldr	r2, [pc, #32]	@ (8006114 <HAL_RCC_OscConfig+0x4b8>)
 80060f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060fa:	f7fc ff71 	bl	8002fe0 <HAL_GetTick>
 80060fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006100:	e00c      	b.n	800611c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006102:	f7fc ff6d 	bl	8002fe0 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d905      	bls.n	800611c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e0ab      	b.n	800626c <HAL_RCC_OscConfig+0x610>
 8006114:	40021000 	.word	0x40021000
 8006118:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800611c:	4b55      	ldr	r3, [pc, #340]	@ (8006274 <HAL_RCC_OscConfig+0x618>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1ec      	bne.n	8006102 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006128:	4b52      	ldr	r3, [pc, #328]	@ (8006274 <HAL_RCC_OscConfig+0x618>)
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	4b52      	ldr	r3, [pc, #328]	@ (8006278 <HAL_RCC_OscConfig+0x61c>)
 800612e:	4013      	ands	r3, r2
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6a11      	ldr	r1, [r2, #32]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006138:	3a01      	subs	r2, #1
 800613a:	0112      	lsls	r2, r2, #4
 800613c:	4311      	orrs	r1, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006142:	0212      	lsls	r2, r2, #8
 8006144:	4311      	orrs	r1, r2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800614a:	0852      	lsrs	r2, r2, #1
 800614c:	3a01      	subs	r2, #1
 800614e:	0552      	lsls	r2, r2, #21
 8006150:	4311      	orrs	r1, r2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006156:	0852      	lsrs	r2, r2, #1
 8006158:	3a01      	subs	r2, #1
 800615a:	0652      	lsls	r2, r2, #25
 800615c:	4311      	orrs	r1, r2
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006162:	06d2      	lsls	r2, r2, #27
 8006164:	430a      	orrs	r2, r1
 8006166:	4943      	ldr	r1, [pc, #268]	@ (8006274 <HAL_RCC_OscConfig+0x618>)
 8006168:	4313      	orrs	r3, r2
 800616a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800616c:	4b41      	ldr	r3, [pc, #260]	@ (8006274 <HAL_RCC_OscConfig+0x618>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a40      	ldr	r2, [pc, #256]	@ (8006274 <HAL_RCC_OscConfig+0x618>)
 8006172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006176:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006178:	4b3e      	ldr	r3, [pc, #248]	@ (8006274 <HAL_RCC_OscConfig+0x618>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	4a3d      	ldr	r2, [pc, #244]	@ (8006274 <HAL_RCC_OscConfig+0x618>)
 800617e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006182:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006184:	f7fc ff2c 	bl	8002fe0 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800618c:	f7fc ff28 	bl	8002fe0 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b02      	cmp	r3, #2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e066      	b.n	800626c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800619e:	4b35      	ldr	r3, [pc, #212]	@ (8006274 <HAL_RCC_OscConfig+0x618>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0f0      	beq.n	800618c <HAL_RCC_OscConfig+0x530>
 80061aa:	e05e      	b.n	800626a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ac:	4b31      	ldr	r3, [pc, #196]	@ (8006274 <HAL_RCC_OscConfig+0x618>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a30      	ldr	r2, [pc, #192]	@ (8006274 <HAL_RCC_OscConfig+0x618>)
 80061b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b8:	f7fc ff12 	bl	8002fe0 <HAL_GetTick>
 80061bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061c0:	f7fc ff0e 	bl	8002fe0 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e04c      	b.n	800626c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061d2:	4b28      	ldr	r3, [pc, #160]	@ (8006274 <HAL_RCC_OscConfig+0x618>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1f0      	bne.n	80061c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80061de:	4b25      	ldr	r3, [pc, #148]	@ (8006274 <HAL_RCC_OscConfig+0x618>)
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	4924      	ldr	r1, [pc, #144]	@ (8006274 <HAL_RCC_OscConfig+0x618>)
 80061e4:	4b25      	ldr	r3, [pc, #148]	@ (800627c <HAL_RCC_OscConfig+0x620>)
 80061e6:	4013      	ands	r3, r2
 80061e8:	60cb      	str	r3, [r1, #12]
 80061ea:	e03e      	b.n	800626a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e039      	b.n	800626c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80061f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006274 <HAL_RCC_OscConfig+0x618>)
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f003 0203 	and.w	r2, r3, #3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	429a      	cmp	r2, r3
 800620a:	d12c      	bne.n	8006266 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006216:	3b01      	subs	r3, #1
 8006218:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800621a:	429a      	cmp	r2, r3
 800621c:	d123      	bne.n	8006266 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006228:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800622a:	429a      	cmp	r2, r3
 800622c:	d11b      	bne.n	8006266 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006238:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800623a:	429a      	cmp	r2, r3
 800623c:	d113      	bne.n	8006266 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006248:	085b      	lsrs	r3, r3, #1
 800624a:	3b01      	subs	r3, #1
 800624c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800624e:	429a      	cmp	r2, r3
 8006250:	d109      	bne.n	8006266 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800625c:	085b      	lsrs	r3, r3, #1
 800625e:	3b01      	subs	r3, #1
 8006260:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006262:	429a      	cmp	r2, r3
 8006264:	d001      	beq.n	800626a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3720      	adds	r7, #32
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40021000 	.word	0x40021000
 8006278:	019f800c 	.word	0x019f800c
 800627c:	feeefffc 	.word	0xfeeefffc

08006280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e11e      	b.n	80064d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006298:	4b91      	ldr	r3, [pc, #580]	@ (80064e0 <HAL_RCC_ClockConfig+0x260>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 030f 	and.w	r3, r3, #15
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d910      	bls.n	80062c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a6:	4b8e      	ldr	r3, [pc, #568]	@ (80064e0 <HAL_RCC_ClockConfig+0x260>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f023 020f 	bic.w	r2, r3, #15
 80062ae:	498c      	ldr	r1, [pc, #560]	@ (80064e0 <HAL_RCC_ClockConfig+0x260>)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062b6:	4b8a      	ldr	r3, [pc, #552]	@ (80064e0 <HAL_RCC_ClockConfig+0x260>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d001      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e106      	b.n	80064d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d073      	beq.n	80063bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d129      	bne.n	8006330 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062dc:	4b81      	ldr	r3, [pc, #516]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e0f4      	b.n	80064d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80062ec:	f000 f99e 	bl	800662c <RCC_GetSysClockFreqFromPLLSource>
 80062f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	4a7c      	ldr	r2, [pc, #496]	@ (80064e8 <HAL_RCC_ClockConfig+0x268>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d93f      	bls.n	800637a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80062fa:	4b7a      	ldr	r3, [pc, #488]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d009      	beq.n	800631a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800630e:	2b00      	cmp	r3, #0
 8006310:	d033      	beq.n	800637a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006316:	2b00      	cmp	r3, #0
 8006318:	d12f      	bne.n	800637a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800631a:	4b72      	ldr	r3, [pc, #456]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006322:	4a70      	ldr	r2, [pc, #448]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 8006324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006328:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800632a:	2380      	movs	r3, #128	@ 0x80
 800632c:	617b      	str	r3, [r7, #20]
 800632e:	e024      	b.n	800637a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d107      	bne.n	8006348 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006338:	4b6a      	ldr	r3, [pc, #424]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d109      	bne.n	8006358 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e0c6      	b.n	80064d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006348:	4b66      	ldr	r3, [pc, #408]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e0be      	b.n	80064d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006358:	f000 f8ce 	bl	80064f8 <HAL_RCC_GetSysClockFreq>
 800635c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	4a61      	ldr	r2, [pc, #388]	@ (80064e8 <HAL_RCC_ClockConfig+0x268>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d909      	bls.n	800637a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006366:	4b5f      	ldr	r3, [pc, #380]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800636e:	4a5d      	ldr	r2, [pc, #372]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 8006370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006374:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006376:	2380      	movs	r3, #128	@ 0x80
 8006378:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800637a:	4b5a      	ldr	r3, [pc, #360]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f023 0203 	bic.w	r2, r3, #3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	4957      	ldr	r1, [pc, #348]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 8006388:	4313      	orrs	r3, r2
 800638a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800638c:	f7fc fe28 	bl	8002fe0 <HAL_GetTick>
 8006390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006392:	e00a      	b.n	80063aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006394:	f7fc fe24 	bl	8002fe0 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e095      	b.n	80064d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063aa:	4b4e      	ldr	r3, [pc, #312]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 020c 	and.w	r2, r3, #12
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d1eb      	bne.n	8006394 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d023      	beq.n	8006410 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063d4:	4b43      	ldr	r3, [pc, #268]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	4a42      	ldr	r2, [pc, #264]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 80063da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80063de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0308 	and.w	r3, r3, #8
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d007      	beq.n	80063fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80063ec:	4b3d      	ldr	r3, [pc, #244]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80063f4:	4a3b      	ldr	r2, [pc, #236]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 80063f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80063fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063fc:	4b39      	ldr	r3, [pc, #228]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	4936      	ldr	r1, [pc, #216]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 800640a:	4313      	orrs	r3, r2
 800640c:	608b      	str	r3, [r1, #8]
 800640e:	e008      	b.n	8006422 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	2b80      	cmp	r3, #128	@ 0x80
 8006414:	d105      	bne.n	8006422 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006416:	4b33      	ldr	r3, [pc, #204]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	4a32      	ldr	r2, [pc, #200]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 800641c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006420:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006422:	4b2f      	ldr	r3, [pc, #188]	@ (80064e0 <HAL_RCC_ClockConfig+0x260>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d21d      	bcs.n	800646c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006430:	4b2b      	ldr	r3, [pc, #172]	@ (80064e0 <HAL_RCC_ClockConfig+0x260>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f023 020f 	bic.w	r2, r3, #15
 8006438:	4929      	ldr	r1, [pc, #164]	@ (80064e0 <HAL_RCC_ClockConfig+0x260>)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	4313      	orrs	r3, r2
 800643e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006440:	f7fc fdce 	bl	8002fe0 <HAL_GetTick>
 8006444:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006446:	e00a      	b.n	800645e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006448:	f7fc fdca 	bl	8002fe0 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006456:	4293      	cmp	r3, r2
 8006458:	d901      	bls.n	800645e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e03b      	b.n	80064d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800645e:	4b20      	ldr	r3, [pc, #128]	@ (80064e0 <HAL_RCC_ClockConfig+0x260>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d1ed      	bne.n	8006448 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b00      	cmp	r3, #0
 8006476:	d008      	beq.n	800648a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006478:	4b1a      	ldr	r3, [pc, #104]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	4917      	ldr	r1, [pc, #92]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 8006486:	4313      	orrs	r3, r2
 8006488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0308 	and.w	r3, r3, #8
 8006492:	2b00      	cmp	r3, #0
 8006494:	d009      	beq.n	80064aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006496:	4b13      	ldr	r3, [pc, #76]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	490f      	ldr	r1, [pc, #60]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064aa:	f000 f825 	bl	80064f8 <HAL_RCC_GetSysClockFreq>
 80064ae:	4602      	mov	r2, r0
 80064b0:	4b0c      	ldr	r3, [pc, #48]	@ (80064e4 <HAL_RCC_ClockConfig+0x264>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	091b      	lsrs	r3, r3, #4
 80064b6:	f003 030f 	and.w	r3, r3, #15
 80064ba:	490c      	ldr	r1, [pc, #48]	@ (80064ec <HAL_RCC_ClockConfig+0x26c>)
 80064bc:	5ccb      	ldrb	r3, [r1, r3]
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	fa22 f303 	lsr.w	r3, r2, r3
 80064c6:	4a0a      	ldr	r2, [pc, #40]	@ (80064f0 <HAL_RCC_ClockConfig+0x270>)
 80064c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80064ca:	4b0a      	ldr	r3, [pc, #40]	@ (80064f4 <HAL_RCC_ClockConfig+0x274>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fc fd3a 	bl	8002f48 <HAL_InitTick>
 80064d4:	4603      	mov	r3, r0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	40022000 	.word	0x40022000
 80064e4:	40021000 	.word	0x40021000
 80064e8:	04c4b400 	.word	0x04c4b400
 80064ec:	0800ddf8 	.word	0x0800ddf8
 80064f0:	20000000 	.word	0x20000000
 80064f4:	20000004 	.word	0x20000004

080064f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80064fe:	4b2c      	ldr	r3, [pc, #176]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 030c 	and.w	r3, r3, #12
 8006506:	2b04      	cmp	r3, #4
 8006508:	d102      	bne.n	8006510 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800650a:	4b2a      	ldr	r3, [pc, #168]	@ (80065b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800650c:	613b      	str	r3, [r7, #16]
 800650e:	e047      	b.n	80065a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006510:	4b27      	ldr	r3, [pc, #156]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f003 030c 	and.w	r3, r3, #12
 8006518:	2b08      	cmp	r3, #8
 800651a:	d102      	bne.n	8006522 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800651c:	4b26      	ldr	r3, [pc, #152]	@ (80065b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800651e:	613b      	str	r3, [r7, #16]
 8006520:	e03e      	b.n	80065a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006522:	4b23      	ldr	r3, [pc, #140]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 030c 	and.w	r3, r3, #12
 800652a:	2b0c      	cmp	r3, #12
 800652c:	d136      	bne.n	800659c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800652e:	4b20      	ldr	r3, [pc, #128]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006538:	4b1d      	ldr	r3, [pc, #116]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	091b      	lsrs	r3, r3, #4
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	3301      	adds	r3, #1
 8006544:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b03      	cmp	r3, #3
 800654a:	d10c      	bne.n	8006566 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800654c:	4a1a      	ldr	r2, [pc, #104]	@ (80065b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	fbb2 f3f3 	udiv	r3, r2, r3
 8006554:	4a16      	ldr	r2, [pc, #88]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006556:	68d2      	ldr	r2, [r2, #12]
 8006558:	0a12      	lsrs	r2, r2, #8
 800655a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800655e:	fb02 f303 	mul.w	r3, r2, r3
 8006562:	617b      	str	r3, [r7, #20]
      break;
 8006564:	e00c      	b.n	8006580 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006566:	4a13      	ldr	r2, [pc, #76]	@ (80065b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	fbb2 f3f3 	udiv	r3, r2, r3
 800656e:	4a10      	ldr	r2, [pc, #64]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006570:	68d2      	ldr	r2, [r2, #12]
 8006572:	0a12      	lsrs	r2, r2, #8
 8006574:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006578:	fb02 f303 	mul.w	r3, r2, r3
 800657c:	617b      	str	r3, [r7, #20]
      break;
 800657e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006580:	4b0b      	ldr	r3, [pc, #44]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	0e5b      	lsrs	r3, r3, #25
 8006586:	f003 0303 	and.w	r3, r3, #3
 800658a:	3301      	adds	r3, #1
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	fbb2 f3f3 	udiv	r3, r2, r3
 8006598:	613b      	str	r3, [r7, #16]
 800659a:	e001      	b.n	80065a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80065a0:	693b      	ldr	r3, [r7, #16]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40021000 	.word	0x40021000
 80065b4:	00f42400 	.word	0x00f42400
 80065b8:	007a1200 	.word	0x007a1200

080065bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065c0:	4b03      	ldr	r3, [pc, #12]	@ (80065d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80065c2:	681b      	ldr	r3, [r3, #0]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	20000000 	.word	0x20000000

080065d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80065d8:	f7ff fff0 	bl	80065bc <HAL_RCC_GetHCLKFreq>
 80065dc:	4602      	mov	r2, r0
 80065de:	4b06      	ldr	r3, [pc, #24]	@ (80065f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	0a1b      	lsrs	r3, r3, #8
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	4904      	ldr	r1, [pc, #16]	@ (80065fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80065ea:	5ccb      	ldrb	r3, [r1, r3]
 80065ec:	f003 031f 	and.w	r3, r3, #31
 80065f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	40021000 	.word	0x40021000
 80065fc:	0800de08 	.word	0x0800de08

08006600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006604:	f7ff ffda 	bl	80065bc <HAL_RCC_GetHCLKFreq>
 8006608:	4602      	mov	r2, r0
 800660a:	4b06      	ldr	r3, [pc, #24]	@ (8006624 <HAL_RCC_GetPCLK2Freq+0x24>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	0adb      	lsrs	r3, r3, #11
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	4904      	ldr	r1, [pc, #16]	@ (8006628 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006616:	5ccb      	ldrb	r3, [r1, r3]
 8006618:	f003 031f 	and.w	r3, r3, #31
 800661c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006620:	4618      	mov	r0, r3
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40021000 	.word	0x40021000
 8006628:	0800de08 	.word	0x0800de08

0800662c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006632:	4b1e      	ldr	r3, [pc, #120]	@ (80066ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800663c:	4b1b      	ldr	r3, [pc, #108]	@ (80066ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	091b      	lsrs	r3, r3, #4
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	3301      	adds	r3, #1
 8006648:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	2b03      	cmp	r3, #3
 800664e:	d10c      	bne.n	800666a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006650:	4a17      	ldr	r2, [pc, #92]	@ (80066b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	fbb2 f3f3 	udiv	r3, r2, r3
 8006658:	4a14      	ldr	r2, [pc, #80]	@ (80066ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800665a:	68d2      	ldr	r2, [r2, #12]
 800665c:	0a12      	lsrs	r2, r2, #8
 800665e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006662:	fb02 f303 	mul.w	r3, r2, r3
 8006666:	617b      	str	r3, [r7, #20]
    break;
 8006668:	e00c      	b.n	8006684 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800666a:	4a12      	ldr	r2, [pc, #72]	@ (80066b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006672:	4a0e      	ldr	r2, [pc, #56]	@ (80066ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006674:	68d2      	ldr	r2, [r2, #12]
 8006676:	0a12      	lsrs	r2, r2, #8
 8006678:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800667c:	fb02 f303 	mul.w	r3, r2, r3
 8006680:	617b      	str	r3, [r7, #20]
    break;
 8006682:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006684:	4b09      	ldr	r3, [pc, #36]	@ (80066ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	0e5b      	lsrs	r3, r3, #25
 800668a:	f003 0303 	and.w	r3, r3, #3
 800668e:	3301      	adds	r3, #1
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	fbb2 f3f3 	udiv	r3, r2, r3
 800669c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800669e:	687b      	ldr	r3, [r7, #4]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	371c      	adds	r7, #28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	40021000 	.word	0x40021000
 80066b0:	007a1200 	.word	0x007a1200
 80066b4:	00f42400 	.word	0x00f42400

080066b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066c0:	2300      	movs	r3, #0
 80066c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066c4:	2300      	movs	r3, #0
 80066c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 8098 	beq.w	8006806 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066d6:	2300      	movs	r3, #0
 80066d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066da:	4b43      	ldr	r3, [pc, #268]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10d      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066e6:	4b40      	ldr	r3, [pc, #256]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ea:	4a3f      	ldr	r2, [pc, #252]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80066f2:	4b3d      	ldr	r3, [pc, #244]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066fa:	60bb      	str	r3, [r7, #8]
 80066fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066fe:	2301      	movs	r3, #1
 8006700:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006702:	4b3a      	ldr	r3, [pc, #232]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a39      	ldr	r2, [pc, #228]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800670c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800670e:	f7fc fc67 	bl	8002fe0 <HAL_GetTick>
 8006712:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006714:	e009      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006716:	f7fc fc63 	bl	8002fe0 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d902      	bls.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	74fb      	strb	r3, [r7, #19]
        break;
 8006728:	e005      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800672a:	4b30      	ldr	r3, [pc, #192]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0ef      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006736:	7cfb      	ldrb	r3, [r7, #19]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d159      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800673c:	4b2a      	ldr	r3, [pc, #168]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800673e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006746:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d01e      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	429a      	cmp	r2, r3
 8006756:	d019      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006758:	4b23      	ldr	r3, [pc, #140]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800675a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800675e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006762:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006764:	4b20      	ldr	r3, [pc, #128]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800676a:	4a1f      	ldr	r2, [pc, #124]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800676c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006774:	4b1c      	ldr	r3, [pc, #112]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800677a:	4a1b      	ldr	r2, [pc, #108]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800677c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006784:	4a18      	ldr	r2, [pc, #96]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d016      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006796:	f7fc fc23 	bl	8002fe0 <HAL_GetTick>
 800679a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800679c:	e00b      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800679e:	f7fc fc1f 	bl	8002fe0 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d902      	bls.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	74fb      	strb	r3, [r7, #19]
            break;
 80067b4:	e006      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067b6:	4b0c      	ldr	r3, [pc, #48]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0ec      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80067c4:	7cfb      	ldrb	r3, [r7, #19]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10b      	bne.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067ca:	4b07      	ldr	r3, [pc, #28]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d8:	4903      	ldr	r1, [pc, #12]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80067e0:	e008      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067e2:	7cfb      	ldrb	r3, [r7, #19]
 80067e4:	74bb      	strb	r3, [r7, #18]
 80067e6:	e005      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067e8:	40021000 	.word	0x40021000
 80067ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f0:	7cfb      	ldrb	r3, [r7, #19]
 80067f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067f4:	7c7b      	ldrb	r3, [r7, #17]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d105      	bne.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067fa:	4ba6      	ldr	r3, [pc, #664]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067fe:	4aa5      	ldr	r2, [pc, #660]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006800:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006804:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006812:	4ba0      	ldr	r3, [pc, #640]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006818:	f023 0203 	bic.w	r2, r3, #3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	499c      	ldr	r1, [pc, #624]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006834:	4b97      	ldr	r3, [pc, #604]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800683a:	f023 020c 	bic.w	r2, r3, #12
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	4994      	ldr	r1, [pc, #592]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006844:	4313      	orrs	r3, r2
 8006846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006856:	4b8f      	ldr	r3, [pc, #572]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800685c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	498b      	ldr	r1, [pc, #556]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006866:	4313      	orrs	r3, r2
 8006868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0308 	and.w	r3, r3, #8
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006878:	4b86      	ldr	r3, [pc, #536]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800687a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800687e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	4983      	ldr	r1, [pc, #524]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006888:	4313      	orrs	r3, r2
 800688a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800689a:	4b7e      	ldr	r3, [pc, #504]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800689c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	497a      	ldr	r1, [pc, #488]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068bc:	4b75      	ldr	r3, [pc, #468]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068c2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	4972      	ldr	r1, [pc, #456]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80068de:	4b6d      	ldr	r3, [pc, #436]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	4969      	ldr	r1, [pc, #420]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006900:	4b64      	ldr	r3, [pc, #400]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006906:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	4961      	ldr	r1, [pc, #388]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006910:	4313      	orrs	r3, r2
 8006912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006922:	4b5c      	ldr	r3, [pc, #368]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006928:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006930:	4958      	ldr	r1, [pc, #352]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006932:	4313      	orrs	r3, r2
 8006934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006940:	2b00      	cmp	r3, #0
 8006942:	d015      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006944:	4b53      	ldr	r3, [pc, #332]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800694a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006952:	4950      	ldr	r1, [pc, #320]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006954:	4313      	orrs	r3, r2
 8006956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006962:	d105      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006964:	4b4b      	ldr	r3, [pc, #300]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	4a4a      	ldr	r2, [pc, #296]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800696a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800696e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006978:	2b00      	cmp	r3, #0
 800697a:	d015      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800697c:	4b45      	ldr	r3, [pc, #276]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800697e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006982:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698a:	4942      	ldr	r1, [pc, #264]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800698c:	4313      	orrs	r3, r2
 800698e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006996:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800699a:	d105      	bne.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800699c:	4b3d      	ldr	r3, [pc, #244]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	4a3c      	ldr	r2, [pc, #240]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069a6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d015      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80069b4:	4b37      	ldr	r3, [pc, #220]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c2:	4934      	ldr	r1, [pc, #208]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069d2:	d105      	bne.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069d4:	4b2f      	ldr	r3, [pc, #188]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	4a2e      	ldr	r2, [pc, #184]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d015      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069ec:	4b29      	ldr	r3, [pc, #164]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069fa:	4926      	ldr	r1, [pc, #152]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a0a:	d105      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a0c:	4b21      	ldr	r3, [pc, #132]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	4a20      	ldr	r2, [pc, #128]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d015      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a24:	4b1b      	ldr	r3, [pc, #108]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a32:	4918      	ldr	r1, [pc, #96]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a42:	d105      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a44:	4b13      	ldr	r3, [pc, #76]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	4a12      	ldr	r2, [pc, #72]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d015      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a62:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a6a:	490a      	ldr	r1, [pc, #40]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a7a:	d105      	bne.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a7c:	4b05      	ldr	r3, [pc, #20]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	4a04      	ldr	r2, [pc, #16]	@ (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006a88:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	40021000 	.word	0x40021000

08006a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e049      	b.n	8006b3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d106      	bne.n	8006ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7fb ff42 	bl	8002948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f000 fc84 	bl	80073e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d001      	beq.n	8006b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e04a      	b.n	8006bf6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68da      	ldr	r2, [r3, #12]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a21      	ldr	r2, [pc, #132]	@ (8006c04 <HAL_TIM_Base_Start_IT+0xbc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d018      	beq.n	8006bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b8a:	d013      	beq.n	8006bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a1d      	ldr	r2, [pc, #116]	@ (8006c08 <HAL_TIM_Base_Start_IT+0xc0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d00e      	beq.n	8006bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8006c0c <HAL_TIM_Base_Start_IT+0xc4>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d009      	beq.n	8006bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a1a      	ldr	r2, [pc, #104]	@ (8006c10 <HAL_TIM_Base_Start_IT+0xc8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d004      	beq.n	8006bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a19      	ldr	r2, [pc, #100]	@ (8006c14 <HAL_TIM_Base_Start_IT+0xcc>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d115      	bne.n	8006be0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	4b17      	ldr	r3, [pc, #92]	@ (8006c18 <HAL_TIM_Base_Start_IT+0xd0>)
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b06      	cmp	r3, #6
 8006bc4:	d015      	beq.n	8006bf2 <HAL_TIM_Base_Start_IT+0xaa>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bcc:	d011      	beq.n	8006bf2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0201 	orr.w	r2, r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bde:	e008      	b.n	8006bf2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	e000      	b.n	8006bf4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	40012c00 	.word	0x40012c00
 8006c08:	40000400 	.word	0x40000400
 8006c0c:	40000800 	.word	0x40000800
 8006c10:	40013400 	.word	0x40013400
 8006c14:	40014000 	.word	0x40014000
 8006c18:	00010007 	.word	0x00010007

08006c1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e049      	b.n	8006cc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fb fe3a 	bl	80028bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	f000 fbc2 	bl	80073e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d109      	bne.n	8006cf0 <HAL_TIM_PWM_Start+0x24>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	bf14      	ite	ne
 8006ce8:	2301      	movne	r3, #1
 8006cea:	2300      	moveq	r3, #0
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	e03c      	b.n	8006d6a <HAL_TIM_PWM_Start+0x9e>
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	d109      	bne.n	8006d0a <HAL_TIM_PWM_Start+0x3e>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	bf14      	ite	ne
 8006d02:	2301      	movne	r3, #1
 8006d04:	2300      	moveq	r3, #0
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	e02f      	b.n	8006d6a <HAL_TIM_PWM_Start+0x9e>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d109      	bne.n	8006d24 <HAL_TIM_PWM_Start+0x58>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	bf14      	ite	ne
 8006d1c:	2301      	movne	r3, #1
 8006d1e:	2300      	moveq	r3, #0
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	e022      	b.n	8006d6a <HAL_TIM_PWM_Start+0x9e>
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	2b0c      	cmp	r3, #12
 8006d28:	d109      	bne.n	8006d3e <HAL_TIM_PWM_Start+0x72>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	bf14      	ite	ne
 8006d36:	2301      	movne	r3, #1
 8006d38:	2300      	moveq	r3, #0
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	e015      	b.n	8006d6a <HAL_TIM_PWM_Start+0x9e>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b10      	cmp	r3, #16
 8006d42:	d109      	bne.n	8006d58 <HAL_TIM_PWM_Start+0x8c>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	bf14      	ite	ne
 8006d50:	2301      	movne	r3, #1
 8006d52:	2300      	moveq	r3, #0
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	e008      	b.n	8006d6a <HAL_TIM_PWM_Start+0x9e>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	bf14      	ite	ne
 8006d64:	2301      	movne	r3, #1
 8006d66:	2300      	moveq	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e097      	b.n	8006ea2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d104      	bne.n	8006d82 <HAL_TIM_PWM_Start+0xb6>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d80:	e023      	b.n	8006dca <HAL_TIM_PWM_Start+0xfe>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d104      	bne.n	8006d92 <HAL_TIM_PWM_Start+0xc6>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d90:	e01b      	b.n	8006dca <HAL_TIM_PWM_Start+0xfe>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d104      	bne.n	8006da2 <HAL_TIM_PWM_Start+0xd6>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006da0:	e013      	b.n	8006dca <HAL_TIM_PWM_Start+0xfe>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b0c      	cmp	r3, #12
 8006da6:	d104      	bne.n	8006db2 <HAL_TIM_PWM_Start+0xe6>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006db0:	e00b      	b.n	8006dca <HAL_TIM_PWM_Start+0xfe>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b10      	cmp	r3, #16
 8006db6:	d104      	bne.n	8006dc2 <HAL_TIM_PWM_Start+0xf6>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006dc0:	e003      	b.n	8006dca <HAL_TIM_PWM_Start+0xfe>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fe98 	bl	8007b08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a33      	ldr	r2, [pc, #204]	@ (8006eac <HAL_TIM_PWM_Start+0x1e0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d013      	beq.n	8006e0a <HAL_TIM_PWM_Start+0x13e>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a32      	ldr	r2, [pc, #200]	@ (8006eb0 <HAL_TIM_PWM_Start+0x1e4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00e      	beq.n	8006e0a <HAL_TIM_PWM_Start+0x13e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a30      	ldr	r2, [pc, #192]	@ (8006eb4 <HAL_TIM_PWM_Start+0x1e8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d009      	beq.n	8006e0a <HAL_TIM_PWM_Start+0x13e>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a2f      	ldr	r2, [pc, #188]	@ (8006eb8 <HAL_TIM_PWM_Start+0x1ec>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d004      	beq.n	8006e0a <HAL_TIM_PWM_Start+0x13e>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a2d      	ldr	r2, [pc, #180]	@ (8006ebc <HAL_TIM_PWM_Start+0x1f0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d101      	bne.n	8006e0e <HAL_TIM_PWM_Start+0x142>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <HAL_TIM_PWM_Start+0x144>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d007      	beq.n	8006e24 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e22:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a20      	ldr	r2, [pc, #128]	@ (8006eac <HAL_TIM_PWM_Start+0x1e0>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d018      	beq.n	8006e60 <HAL_TIM_PWM_Start+0x194>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e36:	d013      	beq.n	8006e60 <HAL_TIM_PWM_Start+0x194>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a20      	ldr	r2, [pc, #128]	@ (8006ec0 <HAL_TIM_PWM_Start+0x1f4>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00e      	beq.n	8006e60 <HAL_TIM_PWM_Start+0x194>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a1f      	ldr	r2, [pc, #124]	@ (8006ec4 <HAL_TIM_PWM_Start+0x1f8>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d009      	beq.n	8006e60 <HAL_TIM_PWM_Start+0x194>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a17      	ldr	r2, [pc, #92]	@ (8006eb0 <HAL_TIM_PWM_Start+0x1e4>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <HAL_TIM_PWM_Start+0x194>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a16      	ldr	r2, [pc, #88]	@ (8006eb4 <HAL_TIM_PWM_Start+0x1e8>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d115      	bne.n	8006e8c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	4b18      	ldr	r3, [pc, #96]	@ (8006ec8 <HAL_TIM_PWM_Start+0x1fc>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b06      	cmp	r3, #6
 8006e70:	d015      	beq.n	8006e9e <HAL_TIM_PWM_Start+0x1d2>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e78:	d011      	beq.n	8006e9e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f042 0201 	orr.w	r2, r2, #1
 8006e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e8a:	e008      	b.n	8006e9e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0201 	orr.w	r2, r2, #1
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	e000      	b.n	8006ea0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	40012c00 	.word	0x40012c00
 8006eb0:	40013400 	.word	0x40013400
 8006eb4:	40014000 	.word	0x40014000
 8006eb8:	40014400 	.word	0x40014400
 8006ebc:	40014800 	.word	0x40014800
 8006ec0:	40000400 	.word	0x40000400
 8006ec4:	40000800 	.word	0x40000800
 8006ec8:	00010007 	.word	0x00010007

08006ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d020      	beq.n	8006f30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01b      	beq.n	8006f30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f06f 0202 	mvn.w	r2, #2
 8006f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f003 0303 	and.w	r3, r3, #3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fa46 	bl	80073a8 <HAL_TIM_IC_CaptureCallback>
 8006f1c:	e005      	b.n	8006f2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fa38 	bl	8007394 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fa49 	bl	80073bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f003 0304 	and.w	r3, r3, #4
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d020      	beq.n	8006f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d01b      	beq.n	8006f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f06f 0204 	mvn.w	r2, #4
 8006f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2202      	movs	r2, #2
 8006f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fa20 	bl	80073a8 <HAL_TIM_IC_CaptureCallback>
 8006f68:	e005      	b.n	8006f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fa12 	bl	8007394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fa23 	bl	80073bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f003 0308 	and.w	r3, r3, #8
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d020      	beq.n	8006fc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f003 0308 	and.w	r3, r3, #8
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01b      	beq.n	8006fc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f06f 0208 	mvn.w	r2, #8
 8006f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2204      	movs	r2, #4
 8006f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f9fa 	bl	80073a8 <HAL_TIM_IC_CaptureCallback>
 8006fb4:	e005      	b.n	8006fc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f9ec 	bl	8007394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f9fd 	bl	80073bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f003 0310 	and.w	r3, r3, #16
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d020      	beq.n	8007014 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f003 0310 	and.w	r3, r3, #16
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01b      	beq.n	8007014 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0210 	mvn.w	r2, #16
 8006fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2208      	movs	r2, #8
 8006fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f9d4 	bl	80073a8 <HAL_TIM_IC_CaptureCallback>
 8007000:	e005      	b.n	800700e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f9c6 	bl	8007394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f9d7 	bl	80073bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00c      	beq.n	8007038 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b00      	cmp	r3, #0
 8007026:	d007      	beq.n	8007038 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f06f 0201 	mvn.w	r2, #1
 8007030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fa ffbc 	bl	8001fb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800703e:	2b00      	cmp	r3, #0
 8007040:	d104      	bne.n	800704c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00c      	beq.n	8007066 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007052:	2b00      	cmp	r3, #0
 8007054:	d007      	beq.n	8007066 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800705e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fe8f 	bl	8007d84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00c      	beq.n	800708a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007076:	2b00      	cmp	r3, #0
 8007078:	d007      	beq.n	800708a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fe87 	bl	8007d98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00c      	beq.n	80070ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800709a:	2b00      	cmp	r3, #0
 800709c:	d007      	beq.n	80070ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80070a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f991 	bl	80073d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f003 0320 	and.w	r3, r3, #32
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00c      	beq.n	80070d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d007      	beq.n	80070d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f06f 0220 	mvn.w	r2, #32
 80070ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fe4f 	bl	8007d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00c      	beq.n	80070f6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d007      	beq.n	80070f6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80070ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fe5b 	bl	8007dac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00c      	beq.n	800711a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d007      	beq.n	800711a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fe53 	bl	8007dc0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00c      	beq.n	800713e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d007      	beq.n	800713e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fe4b 	bl	8007dd4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00c      	beq.n	8007162 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d007      	beq.n	8007162 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800715a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fe43 	bl	8007de8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007162:	bf00      	nop
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007182:	2b01      	cmp	r3, #1
 8007184:	d101      	bne.n	800718a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007186:	2302      	movs	r3, #2
 8007188:	e0ff      	b.n	800738a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b14      	cmp	r3, #20
 8007196:	f200 80f0 	bhi.w	800737a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800719a:	a201      	add	r2, pc, #4	@ (adr r2, 80071a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800719c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a0:	080071f5 	.word	0x080071f5
 80071a4:	0800737b 	.word	0x0800737b
 80071a8:	0800737b 	.word	0x0800737b
 80071ac:	0800737b 	.word	0x0800737b
 80071b0:	08007235 	.word	0x08007235
 80071b4:	0800737b 	.word	0x0800737b
 80071b8:	0800737b 	.word	0x0800737b
 80071bc:	0800737b 	.word	0x0800737b
 80071c0:	08007277 	.word	0x08007277
 80071c4:	0800737b 	.word	0x0800737b
 80071c8:	0800737b 	.word	0x0800737b
 80071cc:	0800737b 	.word	0x0800737b
 80071d0:	080072b7 	.word	0x080072b7
 80071d4:	0800737b 	.word	0x0800737b
 80071d8:	0800737b 	.word	0x0800737b
 80071dc:	0800737b 	.word	0x0800737b
 80071e0:	080072f9 	.word	0x080072f9
 80071e4:	0800737b 	.word	0x0800737b
 80071e8:	0800737b 	.word	0x0800737b
 80071ec:	0800737b 	.word	0x0800737b
 80071f0:	08007339 	.word	0x08007339
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68b9      	ldr	r1, [r7, #8]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 f98e 	bl	800751c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	699a      	ldr	r2, [r3, #24]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f042 0208 	orr.w	r2, r2, #8
 800720e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699a      	ldr	r2, [r3, #24]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 0204 	bic.w	r2, r2, #4
 800721e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6999      	ldr	r1, [r3, #24]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	691a      	ldr	r2, [r3, #16]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	619a      	str	r2, [r3, #24]
      break;
 8007232:	e0a5      	b.n	8007380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68b9      	ldr	r1, [r7, #8]
 800723a:	4618      	mov	r0, r3
 800723c:	f000 f9fe 	bl	800763c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699a      	ldr	r2, [r3, #24]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800724e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699a      	ldr	r2, [r3, #24]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800725e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6999      	ldr	r1, [r3, #24]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	021a      	lsls	r2, r3, #8
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	430a      	orrs	r2, r1
 8007272:	619a      	str	r2, [r3, #24]
      break;
 8007274:	e084      	b.n	8007380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68b9      	ldr	r1, [r7, #8]
 800727c:	4618      	mov	r0, r3
 800727e:	f000 fa67 	bl	8007750 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	69da      	ldr	r2, [r3, #28]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0208 	orr.w	r2, r2, #8
 8007290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	69da      	ldr	r2, [r3, #28]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0204 	bic.w	r2, r2, #4
 80072a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	69d9      	ldr	r1, [r3, #28]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	691a      	ldr	r2, [r3, #16]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	61da      	str	r2, [r3, #28]
      break;
 80072b4:	e064      	b.n	8007380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68b9      	ldr	r1, [r7, #8]
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 facf 	bl	8007860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	69da      	ldr	r2, [r3, #28]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69da      	ldr	r2, [r3, #28]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69d9      	ldr	r1, [r3, #28]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	021a      	lsls	r2, r3, #8
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	61da      	str	r2, [r3, #28]
      break;
 80072f6:	e043      	b.n	8007380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68b9      	ldr	r1, [r7, #8]
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 fb38 	bl	8007974 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f042 0208 	orr.w	r2, r2, #8
 8007312:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f022 0204 	bic.w	r2, r2, #4
 8007322:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	691a      	ldr	r2, [r3, #16]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007336:	e023      	b.n	8007380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68b9      	ldr	r1, [r7, #8]
 800733e:	4618      	mov	r0, r3
 8007340:	f000 fb7c 	bl	8007a3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007352:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007362:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	021a      	lsls	r2, r3, #8
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007378:	e002      	b.n	8007380 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	75fb      	strb	r3, [r7, #23]
      break;
 800737e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007388:	7dfb      	ldrb	r3, [r7, #23]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop

08007394 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a42      	ldr	r2, [pc, #264]	@ (8007500 <TIM_Base_SetConfig+0x11c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00f      	beq.n	800741c <TIM_Base_SetConfig+0x38>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007402:	d00b      	beq.n	800741c <TIM_Base_SetConfig+0x38>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a3f      	ldr	r2, [pc, #252]	@ (8007504 <TIM_Base_SetConfig+0x120>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d007      	beq.n	800741c <TIM_Base_SetConfig+0x38>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a3e      	ldr	r2, [pc, #248]	@ (8007508 <TIM_Base_SetConfig+0x124>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d003      	beq.n	800741c <TIM_Base_SetConfig+0x38>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a3d      	ldr	r2, [pc, #244]	@ (800750c <TIM_Base_SetConfig+0x128>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d108      	bne.n	800742e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a33      	ldr	r2, [pc, #204]	@ (8007500 <TIM_Base_SetConfig+0x11c>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d01b      	beq.n	800746e <TIM_Base_SetConfig+0x8a>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800743c:	d017      	beq.n	800746e <TIM_Base_SetConfig+0x8a>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a30      	ldr	r2, [pc, #192]	@ (8007504 <TIM_Base_SetConfig+0x120>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d013      	beq.n	800746e <TIM_Base_SetConfig+0x8a>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a2f      	ldr	r2, [pc, #188]	@ (8007508 <TIM_Base_SetConfig+0x124>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d00f      	beq.n	800746e <TIM_Base_SetConfig+0x8a>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a2e      	ldr	r2, [pc, #184]	@ (800750c <TIM_Base_SetConfig+0x128>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00b      	beq.n	800746e <TIM_Base_SetConfig+0x8a>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a2d      	ldr	r2, [pc, #180]	@ (8007510 <TIM_Base_SetConfig+0x12c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d007      	beq.n	800746e <TIM_Base_SetConfig+0x8a>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a2c      	ldr	r2, [pc, #176]	@ (8007514 <TIM_Base_SetConfig+0x130>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d003      	beq.n	800746e <TIM_Base_SetConfig+0x8a>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a2b      	ldr	r2, [pc, #172]	@ (8007518 <TIM_Base_SetConfig+0x134>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d108      	bne.n	8007480 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	4313      	orrs	r3, r2
 800747e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	689a      	ldr	r2, [r3, #8]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a16      	ldr	r2, [pc, #88]	@ (8007500 <TIM_Base_SetConfig+0x11c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d00f      	beq.n	80074cc <TIM_Base_SetConfig+0xe8>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a17      	ldr	r2, [pc, #92]	@ (800750c <TIM_Base_SetConfig+0x128>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00b      	beq.n	80074cc <TIM_Base_SetConfig+0xe8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a16      	ldr	r2, [pc, #88]	@ (8007510 <TIM_Base_SetConfig+0x12c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d007      	beq.n	80074cc <TIM_Base_SetConfig+0xe8>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a15      	ldr	r2, [pc, #84]	@ (8007514 <TIM_Base_SetConfig+0x130>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d003      	beq.n	80074cc <TIM_Base_SetConfig+0xe8>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a14      	ldr	r2, [pc, #80]	@ (8007518 <TIM_Base_SetConfig+0x134>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d103      	bne.n	80074d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	691a      	ldr	r2, [r3, #16]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d105      	bne.n	80074f2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	f023 0201 	bic.w	r2, r3, #1
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	611a      	str	r2, [r3, #16]
  }
}
 80074f2:	bf00      	nop
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	40012c00 	.word	0x40012c00
 8007504:	40000400 	.word	0x40000400
 8007508:	40000800 	.word	0x40000800
 800750c:	40013400 	.word	0x40013400
 8007510:	40014000 	.word	0x40014000
 8007514:	40014400 	.word	0x40014400
 8007518:	40014800 	.word	0x40014800

0800751c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	f023 0201 	bic.w	r2, r3, #1
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800754a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800754e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0303 	bic.w	r3, r3, #3
 8007556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	4313      	orrs	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f023 0302 	bic.w	r3, r3, #2
 8007568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a2c      	ldr	r2, [pc, #176]	@ (8007628 <TIM_OC1_SetConfig+0x10c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00f      	beq.n	800759c <TIM_OC1_SetConfig+0x80>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a2b      	ldr	r2, [pc, #172]	@ (800762c <TIM_OC1_SetConfig+0x110>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d00b      	beq.n	800759c <TIM_OC1_SetConfig+0x80>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a2a      	ldr	r2, [pc, #168]	@ (8007630 <TIM_OC1_SetConfig+0x114>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d007      	beq.n	800759c <TIM_OC1_SetConfig+0x80>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a29      	ldr	r2, [pc, #164]	@ (8007634 <TIM_OC1_SetConfig+0x118>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d003      	beq.n	800759c <TIM_OC1_SetConfig+0x80>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a28      	ldr	r2, [pc, #160]	@ (8007638 <TIM_OC1_SetConfig+0x11c>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d10c      	bne.n	80075b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f023 0308 	bic.w	r3, r3, #8
 80075a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f023 0304 	bic.w	r3, r3, #4
 80075b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a1b      	ldr	r2, [pc, #108]	@ (8007628 <TIM_OC1_SetConfig+0x10c>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d00f      	beq.n	80075de <TIM_OC1_SetConfig+0xc2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a1a      	ldr	r2, [pc, #104]	@ (800762c <TIM_OC1_SetConfig+0x110>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d00b      	beq.n	80075de <TIM_OC1_SetConfig+0xc2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a19      	ldr	r2, [pc, #100]	@ (8007630 <TIM_OC1_SetConfig+0x114>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d007      	beq.n	80075de <TIM_OC1_SetConfig+0xc2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a18      	ldr	r2, [pc, #96]	@ (8007634 <TIM_OC1_SetConfig+0x118>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d003      	beq.n	80075de <TIM_OC1_SetConfig+0xc2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a17      	ldr	r2, [pc, #92]	@ (8007638 <TIM_OC1_SetConfig+0x11c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d111      	bne.n	8007602 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	621a      	str	r2, [r3, #32]
}
 800761c:	bf00      	nop
 800761e:	371c      	adds	r7, #28
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	40012c00 	.word	0x40012c00
 800762c:	40013400 	.word	0x40013400
 8007630:	40014000 	.word	0x40014000
 8007634:	40014400 	.word	0x40014400
 8007638:	40014800 	.word	0x40014800

0800763c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	f023 0210 	bic.w	r2, r3, #16
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800766a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800766e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	021b      	lsls	r3, r3, #8
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	4313      	orrs	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f023 0320 	bic.w	r3, r3, #32
 800768a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	011b      	lsls	r3, r3, #4
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	4313      	orrs	r3, r2
 8007696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a28      	ldr	r2, [pc, #160]	@ (800773c <TIM_OC2_SetConfig+0x100>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d003      	beq.n	80076a8 <TIM_OC2_SetConfig+0x6c>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a27      	ldr	r2, [pc, #156]	@ (8007740 <TIM_OC2_SetConfig+0x104>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d10d      	bne.n	80076c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	011b      	lsls	r3, r3, #4
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a1d      	ldr	r2, [pc, #116]	@ (800773c <TIM_OC2_SetConfig+0x100>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d00f      	beq.n	80076ec <TIM_OC2_SetConfig+0xb0>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007740 <TIM_OC2_SetConfig+0x104>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d00b      	beq.n	80076ec <TIM_OC2_SetConfig+0xb0>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a1b      	ldr	r2, [pc, #108]	@ (8007744 <TIM_OC2_SetConfig+0x108>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d007      	beq.n	80076ec <TIM_OC2_SetConfig+0xb0>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a1a      	ldr	r2, [pc, #104]	@ (8007748 <TIM_OC2_SetConfig+0x10c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d003      	beq.n	80076ec <TIM_OC2_SetConfig+0xb0>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a19      	ldr	r2, [pc, #100]	@ (800774c <TIM_OC2_SetConfig+0x110>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d113      	bne.n	8007714 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	4313      	orrs	r3, r2
 8007706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	4313      	orrs	r3, r2
 8007712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	621a      	str	r2, [r3, #32]
}
 800772e:	bf00      	nop
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	40012c00 	.word	0x40012c00
 8007740:	40013400 	.word	0x40013400
 8007744:	40014000 	.word	0x40014000
 8007748:	40014400 	.word	0x40014400
 800774c:	40014800 	.word	0x40014800

08007750 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007750:	b480      	push	{r7}
 8007752:	b087      	sub	sp, #28
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800777e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 0303 	bic.w	r3, r3, #3
 800778a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	4313      	orrs	r3, r2
 8007794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800779c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	021b      	lsls	r3, r3, #8
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a27      	ldr	r2, [pc, #156]	@ (800784c <TIM_OC3_SetConfig+0xfc>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d003      	beq.n	80077ba <TIM_OC3_SetConfig+0x6a>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a26      	ldr	r2, [pc, #152]	@ (8007850 <TIM_OC3_SetConfig+0x100>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d10d      	bne.n	80077d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	021b      	lsls	r3, r3, #8
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a1c      	ldr	r2, [pc, #112]	@ (800784c <TIM_OC3_SetConfig+0xfc>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00f      	beq.n	80077fe <TIM_OC3_SetConfig+0xae>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007850 <TIM_OC3_SetConfig+0x100>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00b      	beq.n	80077fe <TIM_OC3_SetConfig+0xae>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a1a      	ldr	r2, [pc, #104]	@ (8007854 <TIM_OC3_SetConfig+0x104>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d007      	beq.n	80077fe <TIM_OC3_SetConfig+0xae>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a19      	ldr	r2, [pc, #100]	@ (8007858 <TIM_OC3_SetConfig+0x108>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <TIM_OC3_SetConfig+0xae>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a18      	ldr	r2, [pc, #96]	@ (800785c <TIM_OC3_SetConfig+0x10c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d113      	bne.n	8007826 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800780c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4313      	orrs	r3, r2
 8007818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	011b      	lsls	r3, r3, #4
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	4313      	orrs	r3, r2
 8007824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	621a      	str	r2, [r3, #32]
}
 8007840:	bf00      	nop
 8007842:	371c      	adds	r7, #28
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	40012c00 	.word	0x40012c00
 8007850:	40013400 	.word	0x40013400
 8007854:	40014000 	.word	0x40014000
 8007858:	40014400 	.word	0x40014400
 800785c:	40014800 	.word	0x40014800

08007860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800788e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800789a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	031b      	lsls	r3, r3, #12
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a28      	ldr	r2, [pc, #160]	@ (8007960 <TIM_OC4_SetConfig+0x100>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d003      	beq.n	80078cc <TIM_OC4_SetConfig+0x6c>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a27      	ldr	r2, [pc, #156]	@ (8007964 <TIM_OC4_SetConfig+0x104>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d10d      	bne.n	80078e8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80078d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	031b      	lsls	r3, r3, #12
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	4313      	orrs	r3, r2
 80078de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a1d      	ldr	r2, [pc, #116]	@ (8007960 <TIM_OC4_SetConfig+0x100>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00f      	beq.n	8007910 <TIM_OC4_SetConfig+0xb0>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a1c      	ldr	r2, [pc, #112]	@ (8007964 <TIM_OC4_SetConfig+0x104>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d00b      	beq.n	8007910 <TIM_OC4_SetConfig+0xb0>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007968 <TIM_OC4_SetConfig+0x108>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d007      	beq.n	8007910 <TIM_OC4_SetConfig+0xb0>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a1a      	ldr	r2, [pc, #104]	@ (800796c <TIM_OC4_SetConfig+0x10c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d003      	beq.n	8007910 <TIM_OC4_SetConfig+0xb0>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a19      	ldr	r2, [pc, #100]	@ (8007970 <TIM_OC4_SetConfig+0x110>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d113      	bne.n	8007938 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007916:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800791e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	019b      	lsls	r3, r3, #6
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	4313      	orrs	r3, r2
 800792a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	019b      	lsls	r3, r3, #6
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	4313      	orrs	r3, r2
 8007936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	621a      	str	r2, [r3, #32]
}
 8007952:	bf00      	nop
 8007954:	371c      	adds	r7, #28
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	40012c00 	.word	0x40012c00
 8007964:	40013400 	.word	0x40013400
 8007968:	40014000 	.word	0x40014000
 800796c:	40014400 	.word	0x40014400
 8007970:	40014800 	.word	0x40014800

08007974 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800799a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80079b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	041b      	lsls	r3, r3, #16
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a17      	ldr	r2, [pc, #92]	@ (8007a28 <TIM_OC5_SetConfig+0xb4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d00f      	beq.n	80079ee <TIM_OC5_SetConfig+0x7a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a16      	ldr	r2, [pc, #88]	@ (8007a2c <TIM_OC5_SetConfig+0xb8>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d00b      	beq.n	80079ee <TIM_OC5_SetConfig+0x7a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a15      	ldr	r2, [pc, #84]	@ (8007a30 <TIM_OC5_SetConfig+0xbc>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d007      	beq.n	80079ee <TIM_OC5_SetConfig+0x7a>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a14      	ldr	r2, [pc, #80]	@ (8007a34 <TIM_OC5_SetConfig+0xc0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d003      	beq.n	80079ee <TIM_OC5_SetConfig+0x7a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a13      	ldr	r2, [pc, #76]	@ (8007a38 <TIM_OC5_SetConfig+0xc4>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d109      	bne.n	8007a02 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	021b      	lsls	r3, r3, #8
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	697a      	ldr	r2, [r7, #20]
 8007a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	621a      	str	r2, [r3, #32]
}
 8007a1c:	bf00      	nop
 8007a1e:	371c      	adds	r7, #28
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	40012c00 	.word	0x40012c00
 8007a2c:	40013400 	.word	0x40013400
 8007a30:	40014000 	.word	0x40014000
 8007a34:	40014400 	.word	0x40014400
 8007a38:	40014800 	.word	0x40014800

08007a3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	021b      	lsls	r3, r3, #8
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	051b      	lsls	r3, r3, #20
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a18      	ldr	r2, [pc, #96]	@ (8007af4 <TIM_OC6_SetConfig+0xb8>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d00f      	beq.n	8007ab8 <TIM_OC6_SetConfig+0x7c>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a17      	ldr	r2, [pc, #92]	@ (8007af8 <TIM_OC6_SetConfig+0xbc>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d00b      	beq.n	8007ab8 <TIM_OC6_SetConfig+0x7c>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a16      	ldr	r2, [pc, #88]	@ (8007afc <TIM_OC6_SetConfig+0xc0>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d007      	beq.n	8007ab8 <TIM_OC6_SetConfig+0x7c>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a15      	ldr	r2, [pc, #84]	@ (8007b00 <TIM_OC6_SetConfig+0xc4>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d003      	beq.n	8007ab8 <TIM_OC6_SetConfig+0x7c>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a14      	ldr	r2, [pc, #80]	@ (8007b04 <TIM_OC6_SetConfig+0xc8>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d109      	bne.n	8007acc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007abe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	029b      	lsls	r3, r3, #10
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	621a      	str	r2, [r3, #32]
}
 8007ae6:	bf00      	nop
 8007ae8:	371c      	adds	r7, #28
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	40012c00 	.word	0x40012c00
 8007af8:	40013400 	.word	0x40013400
 8007afc:	40014000 	.word	0x40014000
 8007b00:	40014400 	.word	0x40014400
 8007b04:	40014800 	.word	0x40014800

08007b08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f003 031f 	and.w	r3, r3, #31
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6a1a      	ldr	r2, [r3, #32]
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	43db      	mvns	r3, r3
 8007b2a:	401a      	ands	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6a1a      	ldr	r2, [r3, #32]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f003 031f 	and.w	r3, r3, #31
 8007b3a:	6879      	ldr	r1, [r7, #4]
 8007b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b40:	431a      	orrs	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	621a      	str	r2, [r3, #32]
}
 8007b46:	bf00      	nop
 8007b48:	371c      	adds	r7, #28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
	...

08007b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d101      	bne.n	8007b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b68:	2302      	movs	r3, #2
 8007b6a:	e065      	b.n	8007c38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a2c      	ldr	r2, [pc, #176]	@ (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d004      	beq.n	8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a2b      	ldr	r2, [pc, #172]	@ (8007c48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d108      	bne.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007ba6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d018      	beq.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007be2:	d013      	beq.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a18      	ldr	r2, [pc, #96]	@ (8007c4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d00e      	beq.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a17      	ldr	r2, [pc, #92]	@ (8007c50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d009      	beq.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a12      	ldr	r2, [pc, #72]	@ (8007c48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d004      	beq.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a13      	ldr	r2, [pc, #76]	@ (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d10c      	bne.n	8007c26 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	40012c00 	.word	0x40012c00
 8007c48:	40013400 	.word	0x40013400
 8007c4c:	40000400 	.word	0x40000400
 8007c50:	40000800 	.word	0x40000800
 8007c54:	40014000 	.word	0x40014000

08007c58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d101      	bne.n	8007c74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c70:	2302      	movs	r3, #2
 8007c72:	e073      	b.n	8007d5c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	041b      	lsls	r3, r3, #16
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a19      	ldr	r2, [pc, #100]	@ (8007d68 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d004      	beq.n	8007d10 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a18      	ldr	r2, [pc, #96]	@ (8007d6c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d11c      	bne.n	8007d4a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1a:	051b      	lsls	r3, r3, #20
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	40012c00 	.word	0x40012c00
 8007d6c:	40013400 	.word	0x40013400

08007d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e042      	b.n	8007e94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d106      	bne.n	8007e26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7fa fe55 	bl	8002ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2224      	movs	r2, #36	@ 0x24
 8007e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0201 	bic.w	r2, r2, #1
 8007e3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 ffac 	bl	8008da4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fcdd 	bl	800880c <UART_SetConfig>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d101      	bne.n	8007e5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e01b      	b.n	8007e94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689a      	ldr	r2, [r3, #8]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0201 	orr.w	r2, r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 f82b 	bl	8008ee8 <UART_CheckIdleState>
 8007e92:	4603      	mov	r3, r0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08a      	sub	sp, #40	@ 0x28
 8007ea0:	af02      	add	r7, sp, #8
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	603b      	str	r3, [r7, #0]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eb2:	2b20      	cmp	r3, #32
 8007eb4:	d17b      	bne.n	8007fae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <HAL_UART_Transmit+0x26>
 8007ebc:	88fb      	ldrh	r3, [r7, #6]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e074      	b.n	8007fb0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2221      	movs	r2, #33	@ 0x21
 8007ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ed6:	f7fb f883 	bl	8002fe0 <HAL_GetTick>
 8007eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	88fa      	ldrh	r2, [r7, #6]
 8007ee0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	88fa      	ldrh	r2, [r7, #6]
 8007ee8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ef4:	d108      	bne.n	8007f08 <HAL_UART_Transmit+0x6c>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d104      	bne.n	8007f08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007efe:	2300      	movs	r3, #0
 8007f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	61bb      	str	r3, [r7, #24]
 8007f06:	e003      	b.n	8007f10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f10:	e030      	b.n	8007f74 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2180      	movs	r1, #128	@ 0x80
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f001 f88d 	bl	800903c <UART_WaitOnFlagUntilTimeout>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e03d      	b.n	8007fb0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10b      	bne.n	8007f52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	881b      	ldrh	r3, [r3, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	3302      	adds	r3, #2
 8007f4e:	61bb      	str	r3, [r7, #24]
 8007f50:	e007      	b.n	8007f62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	781a      	ldrb	r2, [r3, #0]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1c8      	bne.n	8007f12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	2200      	movs	r2, #0
 8007f88:	2140      	movs	r1, #64	@ 0x40
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f001 f856 	bl	800903c <UART_WaitOnFlagUntilTimeout>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d005      	beq.n	8007fa2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2220      	movs	r2, #32
 8007f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e006      	b.n	8007fb0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2220      	movs	r2, #32
 8007fa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	e000      	b.n	8007fb0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007fae:	2302      	movs	r3, #2
  }
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3720      	adds	r7, #32
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b08a      	sub	sp, #40	@ 0x28
 8007fbc:	af02      	add	r7, sp, #8
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	603b      	str	r3, [r7, #0]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fce:	2b20      	cmp	r3, #32
 8007fd0:	f040 80b5 	bne.w	800813e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d002      	beq.n	8007fe0 <HAL_UART_Receive+0x28>
 8007fda:	88fb      	ldrh	r3, [r7, #6]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e0ad      	b.n	8008140 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2222      	movs	r2, #34	@ 0x22
 8007ff0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ffa:	f7fa fff1 	bl	8002fe0 <HAL_GetTick>
 8007ffe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	88fa      	ldrh	r2, [r7, #6]
 8008004:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	88fa      	ldrh	r2, [r7, #6]
 800800c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008018:	d10e      	bne.n	8008038 <HAL_UART_Receive+0x80>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d105      	bne.n	800802e <HAL_UART_Receive+0x76>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008028:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800802c:	e02d      	b.n	800808a <HAL_UART_Receive+0xd2>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	22ff      	movs	r2, #255	@ 0xff
 8008032:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008036:	e028      	b.n	800808a <HAL_UART_Receive+0xd2>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10d      	bne.n	800805c <HAL_UART_Receive+0xa4>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d104      	bne.n	8008052 <HAL_UART_Receive+0x9a>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	22ff      	movs	r2, #255	@ 0xff
 800804c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008050:	e01b      	b.n	800808a <HAL_UART_Receive+0xd2>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	227f      	movs	r2, #127	@ 0x7f
 8008056:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800805a:	e016      	b.n	800808a <HAL_UART_Receive+0xd2>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008064:	d10d      	bne.n	8008082 <HAL_UART_Receive+0xca>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d104      	bne.n	8008078 <HAL_UART_Receive+0xc0>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	227f      	movs	r2, #127	@ 0x7f
 8008072:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008076:	e008      	b.n	800808a <HAL_UART_Receive+0xd2>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	223f      	movs	r2, #63	@ 0x3f
 800807c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008080:	e003      	b.n	800808a <HAL_UART_Receive+0xd2>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008090:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800809a:	d108      	bne.n	80080ae <HAL_UART_Receive+0xf6>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d104      	bne.n	80080ae <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80080a4:	2300      	movs	r3, #0
 80080a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	61bb      	str	r3, [r7, #24]
 80080ac:	e003      	b.n	80080b6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080b2:	2300      	movs	r3, #0
 80080b4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80080b6:	e036      	b.n	8008126 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	2200      	movs	r2, #0
 80080c0:	2120      	movs	r1, #32
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 ffba 	bl	800903c <UART_WaitOnFlagUntilTimeout>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d005      	beq.n	80080da <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2220      	movs	r2, #32
 80080d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e032      	b.n	8008140 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10c      	bne.n	80080fa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	8a7b      	ldrh	r3, [r7, #18]
 80080ea:	4013      	ands	r3, r2
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	3302      	adds	r3, #2
 80080f6:	61bb      	str	r3, [r7, #24]
 80080f8:	e00c      	b.n	8008114 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008100:	b2da      	uxtb	r2, r3
 8008102:	8a7b      	ldrh	r3, [r7, #18]
 8008104:	b2db      	uxtb	r3, r3
 8008106:	4013      	ands	r3, r2
 8008108:	b2da      	uxtb	r2, r3
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	3301      	adds	r3, #1
 8008112:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800811a:	b29b      	uxth	r3, r3
 800811c:	3b01      	subs	r3, #1
 800811e:	b29a      	uxth	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800812c:	b29b      	uxth	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1c2      	bne.n	80080b8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2220      	movs	r2, #32
 8008136:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	e000      	b.n	8008140 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800813e:	2302      	movs	r3, #2
  }
}
 8008140:	4618      	mov	r0, r3
 8008142:	3720      	adds	r7, #32
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b0ba      	sub	sp, #232	@ 0xe8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800816e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008172:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008176:	4013      	ands	r3, r2
 8008178:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800817c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008180:	2b00      	cmp	r3, #0
 8008182:	d11b      	bne.n	80081bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	2b00      	cmp	r3, #0
 800818e:	d015      	beq.n	80081bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008194:	f003 0320 	and.w	r3, r3, #32
 8008198:	2b00      	cmp	r3, #0
 800819a:	d105      	bne.n	80081a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800819c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d009      	beq.n	80081bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 8300 	beq.w	80087b2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4798      	blx	r3
      }
      return;
 80081ba:	e2fa      	b.n	80087b2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80081bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 8123 	beq.w	800840c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80081c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80081ca:	4b8d      	ldr	r3, [pc, #564]	@ (8008400 <HAL_UART_IRQHandler+0x2b8>)
 80081cc:	4013      	ands	r3, r2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d106      	bne.n	80081e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80081d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80081d6:	4b8b      	ldr	r3, [pc, #556]	@ (8008404 <HAL_UART_IRQHandler+0x2bc>)
 80081d8:	4013      	ands	r3, r2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 8116 	beq.w	800840c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d011      	beq.n	8008210 <HAL_UART_IRQHandler+0xc8>
 80081ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00b      	beq.n	8008210 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2201      	movs	r2, #1
 80081fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008206:	f043 0201 	orr.w	r2, r3, #1
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008214:	f003 0302 	and.w	r3, r3, #2
 8008218:	2b00      	cmp	r3, #0
 800821a:	d011      	beq.n	8008240 <HAL_UART_IRQHandler+0xf8>
 800821c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00b      	beq.n	8008240 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2202      	movs	r2, #2
 800822e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008236:	f043 0204 	orr.w	r2, r3, #4
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008244:	f003 0304 	and.w	r3, r3, #4
 8008248:	2b00      	cmp	r3, #0
 800824a:	d011      	beq.n	8008270 <HAL_UART_IRQHandler+0x128>
 800824c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00b      	beq.n	8008270 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2204      	movs	r2, #4
 800825e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008266:	f043 0202 	orr.w	r2, r3, #2
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008274:	f003 0308 	and.w	r3, r3, #8
 8008278:	2b00      	cmp	r3, #0
 800827a:	d017      	beq.n	80082ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800827c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008280:	f003 0320 	and.w	r3, r3, #32
 8008284:	2b00      	cmp	r3, #0
 8008286:	d105      	bne.n	8008294 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008288:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800828c:	4b5c      	ldr	r3, [pc, #368]	@ (8008400 <HAL_UART_IRQHandler+0x2b8>)
 800828e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00b      	beq.n	80082ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2208      	movs	r2, #8
 800829a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082a2:	f043 0208 	orr.w	r2, r3, #8
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d012      	beq.n	80082de <HAL_UART_IRQHandler+0x196>
 80082b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00c      	beq.n	80082de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80082cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082d4:	f043 0220 	orr.w	r2, r3, #32
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 8266 	beq.w	80087b6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082ee:	f003 0320 	and.w	r3, r3, #32
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d013      	beq.n	800831e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082fa:	f003 0320 	and.w	r3, r3, #32
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d105      	bne.n	800830e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d007      	beq.n	800831e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008324:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008332:	2b40      	cmp	r3, #64	@ 0x40
 8008334:	d005      	beq.n	8008342 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800833a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800833e:	2b00      	cmp	r3, #0
 8008340:	d054      	beq.n	80083ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fee7 	bl	8009116 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008352:	2b40      	cmp	r3, #64	@ 0x40
 8008354:	d146      	bne.n	80083e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3308      	adds	r3, #8
 800835c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008360:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008364:	e853 3f00 	ldrex	r3, [r3]
 8008368:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800836c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008374:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3308      	adds	r3, #8
 800837e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008382:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008386:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800838e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008392:	e841 2300 	strex	r3, r2, [r1]
 8008396:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800839a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1d9      	bne.n	8008356 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d017      	beq.n	80083dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083b2:	4a15      	ldr	r2, [pc, #84]	@ (8008408 <HAL_UART_IRQHandler+0x2c0>)
 80083b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fd f849 	bl	8005454 <HAL_DMA_Abort_IT>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d019      	beq.n	80083fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80083d6:	4610      	mov	r0, r2
 80083d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083da:	e00f      	b.n	80083fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f9ff 	bl	80087e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e2:	e00b      	b.n	80083fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f9fb 	bl	80087e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ea:	e007      	b.n	80083fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f9f7 	bl	80087e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80083fa:	e1dc      	b.n	80087b6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083fc:	bf00      	nop
    return;
 80083fe:	e1da      	b.n	80087b6 <HAL_UART_IRQHandler+0x66e>
 8008400:	10000001 	.word	0x10000001
 8008404:	04000120 	.word	0x04000120
 8008408:	080091e3 	.word	0x080091e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008410:	2b01      	cmp	r3, #1
 8008412:	f040 8170 	bne.w	80086f6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800841a:	f003 0310 	and.w	r3, r3, #16
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 8169 	beq.w	80086f6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008428:	f003 0310 	and.w	r3, r3, #16
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 8162 	beq.w	80086f6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2210      	movs	r2, #16
 8008438:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008444:	2b40      	cmp	r3, #64	@ 0x40
 8008446:	f040 80d8 	bne.w	80085fa <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008458:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 80af 	beq.w	80085c0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008468:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800846c:	429a      	cmp	r2, r3
 800846e:	f080 80a7 	bcs.w	80085c0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008478:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0320 	and.w	r3, r3, #32
 800848a:	2b00      	cmp	r3, #0
 800848c:	f040 8087 	bne.w	800859e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008498:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800849c:	e853 3f00 	ldrex	r3, [r3]
 80084a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80084a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80084a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	461a      	mov	r2, r3
 80084b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80084ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80084be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80084c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80084ca:	e841 2300 	strex	r3, r2, [r1]
 80084ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80084d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1da      	bne.n	8008490 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3308      	adds	r3, #8
 80084e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80084ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084ec:	f023 0301 	bic.w	r3, r3, #1
 80084f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3308      	adds	r3, #8
 80084fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80084fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008502:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008504:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008506:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800850a:	e841 2300 	strex	r3, r2, [r1]
 800850e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008510:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1e1      	bne.n	80084da <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3308      	adds	r3, #8
 800851c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008520:	e853 3f00 	ldrex	r3, [r3]
 8008524:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008526:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008528:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800852c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3308      	adds	r3, #8
 8008536:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800853a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800853c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008540:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008542:	e841 2300 	strex	r3, r2, [r1]
 8008546:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008548:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1e3      	bne.n	8008516 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2220      	movs	r2, #32
 8008552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800856a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800856c:	f023 0310 	bic.w	r3, r3, #16
 8008570:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	461a      	mov	r2, r3
 800857a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800857e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008580:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008584:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800858c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e4      	bne.n	800855c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008598:	4618      	mov	r0, r3
 800859a:	f7fc ff02 	bl	80053a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2202      	movs	r2, #2
 80085a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f91b 	bl	80087f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80085be:	e0fc      	b.n	80087ba <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085ca:	429a      	cmp	r2, r3
 80085cc:	f040 80f5 	bne.w	80087ba <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0320 	and.w	r3, r3, #32
 80085de:	2b20      	cmp	r3, #32
 80085e0:	f040 80eb 	bne.w	80087ba <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f8fe 	bl	80087f4 <HAL_UARTEx_RxEventCallback>
      return;
 80085f8:	e0df      	b.n	80087ba <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008606:	b29b      	uxth	r3, r3
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008614:	b29b      	uxth	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 80d1 	beq.w	80087be <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800861c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 80cc 	beq.w	80087be <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862e:	e853 3f00 	ldrex	r3, [r3]
 8008632:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008636:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800863a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	461a      	mov	r2, r3
 8008644:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008648:	647b      	str	r3, [r7, #68]	@ 0x44
 800864a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800864e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008650:	e841 2300 	strex	r3, r2, [r1]
 8008654:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1e4      	bne.n	8008626 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3308      	adds	r3, #8
 8008662:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	623b      	str	r3, [r7, #32]
   return(result);
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008672:	f023 0301 	bic.w	r3, r3, #1
 8008676:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3308      	adds	r3, #8
 8008680:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008684:	633a      	str	r2, [r7, #48]	@ 0x30
 8008686:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008688:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800868a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800868c:	e841 2300 	strex	r3, r2, [r1]
 8008690:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1e1      	bne.n	800865c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2220      	movs	r2, #32
 800869c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f023 0310 	bic.w	r3, r3, #16
 80086c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	461a      	mov	r2, r3
 80086ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80086ce:	61fb      	str	r3, [r7, #28]
 80086d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	69b9      	ldr	r1, [r7, #24]
 80086d4:	69fa      	ldr	r2, [r7, #28]
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	617b      	str	r3, [r7, #20]
   return(result);
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e4      	bne.n	80086ac <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2202      	movs	r2, #2
 80086e6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80086ec:	4619      	mov	r1, r3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f880 	bl	80087f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086f4:	e063      	b.n	80087be <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80086f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00e      	beq.n	8008720 <HAL_UART_IRQHandler+0x5d8>
 8008702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d008      	beq.n	8008720 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008716:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fda3 	bl	8009264 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800871e:	e051      	b.n	80087c4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008728:	2b00      	cmp	r3, #0
 800872a:	d014      	beq.n	8008756 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800872c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008734:	2b00      	cmp	r3, #0
 8008736:	d105      	bne.n	8008744 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800873c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d008      	beq.n	8008756 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008748:	2b00      	cmp	r3, #0
 800874a:	d03a      	beq.n	80087c2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	4798      	blx	r3
    }
    return;
 8008754:	e035      	b.n	80087c2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800875a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800875e:	2b00      	cmp	r3, #0
 8008760:	d009      	beq.n	8008776 <HAL_UART_IRQHandler+0x62e>
 8008762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800876a:	2b00      	cmp	r3, #0
 800876c:	d003      	beq.n	8008776 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fd4d 	bl	800920e <UART_EndTransmit_IT>
    return;
 8008774:	e026      	b.n	80087c4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800877a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d009      	beq.n	8008796 <HAL_UART_IRQHandler+0x64e>
 8008782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008786:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d003      	beq.n	8008796 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fd7c 	bl	800928c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008794:	e016      	b.n	80087c4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800879a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d010      	beq.n	80087c4 <HAL_UART_IRQHandler+0x67c>
 80087a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	da0c      	bge.n	80087c4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fd64 	bl	8009278 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087b0:	e008      	b.n	80087c4 <HAL_UART_IRQHandler+0x67c>
      return;
 80087b2:	bf00      	nop
 80087b4:	e006      	b.n	80087c4 <HAL_UART_IRQHandler+0x67c>
    return;
 80087b6:	bf00      	nop
 80087b8:	e004      	b.n	80087c4 <HAL_UART_IRQHandler+0x67c>
      return;
 80087ba:	bf00      	nop
 80087bc:	e002      	b.n	80087c4 <HAL_UART_IRQHandler+0x67c>
      return;
 80087be:	bf00      	nop
 80087c0:	e000      	b.n	80087c4 <HAL_UART_IRQHandler+0x67c>
    return;
 80087c2:	bf00      	nop
  }
}
 80087c4:	37e8      	adds	r7, #232	@ 0xe8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop

080087cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800880c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008810:	b08c      	sub	sp, #48	@ 0x30
 8008812:	af00      	add	r7, sp, #0
 8008814:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008816:	2300      	movs	r3, #0
 8008818:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	689a      	ldr	r2, [r3, #8]
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	431a      	orrs	r2, r3
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	431a      	orrs	r2, r3
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	69db      	ldr	r3, [r3, #28]
 8008830:	4313      	orrs	r3, r2
 8008832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	4bab      	ldr	r3, [pc, #684]	@ (8008ae8 <UART_SetConfig+0x2dc>)
 800883c:	4013      	ands	r3, r2
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	6812      	ldr	r2, [r2, #0]
 8008842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008844:	430b      	orrs	r3, r1
 8008846:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	68da      	ldr	r2, [r3, #12]
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	430a      	orrs	r2, r1
 800885c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4aa0      	ldr	r2, [pc, #640]	@ (8008aec <UART_SetConfig+0x2e0>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d004      	beq.n	8008878 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008874:	4313      	orrs	r3, r2
 8008876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008882:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	6812      	ldr	r2, [r2, #0]
 800888a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800888c:	430b      	orrs	r3, r1
 800888e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008896:	f023 010f 	bic.w	r1, r3, #15
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a91      	ldr	r2, [pc, #580]	@ (8008af0 <UART_SetConfig+0x2e4>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d125      	bne.n	80088fc <UART_SetConfig+0xf0>
 80088b0:	4b90      	ldr	r3, [pc, #576]	@ (8008af4 <UART_SetConfig+0x2e8>)
 80088b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d81a      	bhi.n	80088f4 <UART_SetConfig+0xe8>
 80088be:	a201      	add	r2, pc, #4	@ (adr r2, 80088c4 <UART_SetConfig+0xb8>)
 80088c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c4:	080088d5 	.word	0x080088d5
 80088c8:	080088e5 	.word	0x080088e5
 80088cc:	080088dd 	.word	0x080088dd
 80088d0:	080088ed 	.word	0x080088ed
 80088d4:	2301      	movs	r3, #1
 80088d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088da:	e0d6      	b.n	8008a8a <UART_SetConfig+0x27e>
 80088dc:	2302      	movs	r3, #2
 80088de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088e2:	e0d2      	b.n	8008a8a <UART_SetConfig+0x27e>
 80088e4:	2304      	movs	r3, #4
 80088e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ea:	e0ce      	b.n	8008a8a <UART_SetConfig+0x27e>
 80088ec:	2308      	movs	r3, #8
 80088ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088f2:	e0ca      	b.n	8008a8a <UART_SetConfig+0x27e>
 80088f4:	2310      	movs	r3, #16
 80088f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088fa:	e0c6      	b.n	8008a8a <UART_SetConfig+0x27e>
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a7d      	ldr	r2, [pc, #500]	@ (8008af8 <UART_SetConfig+0x2ec>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d138      	bne.n	8008978 <UART_SetConfig+0x16c>
 8008906:	4b7b      	ldr	r3, [pc, #492]	@ (8008af4 <UART_SetConfig+0x2e8>)
 8008908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800890c:	f003 030c 	and.w	r3, r3, #12
 8008910:	2b0c      	cmp	r3, #12
 8008912:	d82d      	bhi.n	8008970 <UART_SetConfig+0x164>
 8008914:	a201      	add	r2, pc, #4	@ (adr r2, 800891c <UART_SetConfig+0x110>)
 8008916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891a:	bf00      	nop
 800891c:	08008951 	.word	0x08008951
 8008920:	08008971 	.word	0x08008971
 8008924:	08008971 	.word	0x08008971
 8008928:	08008971 	.word	0x08008971
 800892c:	08008961 	.word	0x08008961
 8008930:	08008971 	.word	0x08008971
 8008934:	08008971 	.word	0x08008971
 8008938:	08008971 	.word	0x08008971
 800893c:	08008959 	.word	0x08008959
 8008940:	08008971 	.word	0x08008971
 8008944:	08008971 	.word	0x08008971
 8008948:	08008971 	.word	0x08008971
 800894c:	08008969 	.word	0x08008969
 8008950:	2300      	movs	r3, #0
 8008952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008956:	e098      	b.n	8008a8a <UART_SetConfig+0x27e>
 8008958:	2302      	movs	r3, #2
 800895a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800895e:	e094      	b.n	8008a8a <UART_SetConfig+0x27e>
 8008960:	2304      	movs	r3, #4
 8008962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008966:	e090      	b.n	8008a8a <UART_SetConfig+0x27e>
 8008968:	2308      	movs	r3, #8
 800896a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800896e:	e08c      	b.n	8008a8a <UART_SetConfig+0x27e>
 8008970:	2310      	movs	r3, #16
 8008972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008976:	e088      	b.n	8008a8a <UART_SetConfig+0x27e>
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a5f      	ldr	r2, [pc, #380]	@ (8008afc <UART_SetConfig+0x2f0>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d125      	bne.n	80089ce <UART_SetConfig+0x1c2>
 8008982:	4b5c      	ldr	r3, [pc, #368]	@ (8008af4 <UART_SetConfig+0x2e8>)
 8008984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008988:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800898c:	2b30      	cmp	r3, #48	@ 0x30
 800898e:	d016      	beq.n	80089be <UART_SetConfig+0x1b2>
 8008990:	2b30      	cmp	r3, #48	@ 0x30
 8008992:	d818      	bhi.n	80089c6 <UART_SetConfig+0x1ba>
 8008994:	2b20      	cmp	r3, #32
 8008996:	d00a      	beq.n	80089ae <UART_SetConfig+0x1a2>
 8008998:	2b20      	cmp	r3, #32
 800899a:	d814      	bhi.n	80089c6 <UART_SetConfig+0x1ba>
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <UART_SetConfig+0x19a>
 80089a0:	2b10      	cmp	r3, #16
 80089a2:	d008      	beq.n	80089b6 <UART_SetConfig+0x1aa>
 80089a4:	e00f      	b.n	80089c6 <UART_SetConfig+0x1ba>
 80089a6:	2300      	movs	r3, #0
 80089a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ac:	e06d      	b.n	8008a8a <UART_SetConfig+0x27e>
 80089ae:	2302      	movs	r3, #2
 80089b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089b4:	e069      	b.n	8008a8a <UART_SetConfig+0x27e>
 80089b6:	2304      	movs	r3, #4
 80089b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089bc:	e065      	b.n	8008a8a <UART_SetConfig+0x27e>
 80089be:	2308      	movs	r3, #8
 80089c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089c4:	e061      	b.n	8008a8a <UART_SetConfig+0x27e>
 80089c6:	2310      	movs	r3, #16
 80089c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089cc:	e05d      	b.n	8008a8a <UART_SetConfig+0x27e>
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a4b      	ldr	r2, [pc, #300]	@ (8008b00 <UART_SetConfig+0x2f4>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d125      	bne.n	8008a24 <UART_SetConfig+0x218>
 80089d8:	4b46      	ldr	r3, [pc, #280]	@ (8008af4 <UART_SetConfig+0x2e8>)
 80089da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80089e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80089e4:	d016      	beq.n	8008a14 <UART_SetConfig+0x208>
 80089e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80089e8:	d818      	bhi.n	8008a1c <UART_SetConfig+0x210>
 80089ea:	2b80      	cmp	r3, #128	@ 0x80
 80089ec:	d00a      	beq.n	8008a04 <UART_SetConfig+0x1f8>
 80089ee:	2b80      	cmp	r3, #128	@ 0x80
 80089f0:	d814      	bhi.n	8008a1c <UART_SetConfig+0x210>
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d002      	beq.n	80089fc <UART_SetConfig+0x1f0>
 80089f6:	2b40      	cmp	r3, #64	@ 0x40
 80089f8:	d008      	beq.n	8008a0c <UART_SetConfig+0x200>
 80089fa:	e00f      	b.n	8008a1c <UART_SetConfig+0x210>
 80089fc:	2300      	movs	r3, #0
 80089fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a02:	e042      	b.n	8008a8a <UART_SetConfig+0x27e>
 8008a04:	2302      	movs	r3, #2
 8008a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a0a:	e03e      	b.n	8008a8a <UART_SetConfig+0x27e>
 8008a0c:	2304      	movs	r3, #4
 8008a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a12:	e03a      	b.n	8008a8a <UART_SetConfig+0x27e>
 8008a14:	2308      	movs	r3, #8
 8008a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a1a:	e036      	b.n	8008a8a <UART_SetConfig+0x27e>
 8008a1c:	2310      	movs	r3, #16
 8008a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a22:	e032      	b.n	8008a8a <UART_SetConfig+0x27e>
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a30      	ldr	r2, [pc, #192]	@ (8008aec <UART_SetConfig+0x2e0>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d12a      	bne.n	8008a84 <UART_SetConfig+0x278>
 8008a2e:	4b31      	ldr	r3, [pc, #196]	@ (8008af4 <UART_SetConfig+0x2e8>)
 8008a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008a38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a3c:	d01a      	beq.n	8008a74 <UART_SetConfig+0x268>
 8008a3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a42:	d81b      	bhi.n	8008a7c <UART_SetConfig+0x270>
 8008a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a48:	d00c      	beq.n	8008a64 <UART_SetConfig+0x258>
 8008a4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a4e:	d815      	bhi.n	8008a7c <UART_SetConfig+0x270>
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d003      	beq.n	8008a5c <UART_SetConfig+0x250>
 8008a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a58:	d008      	beq.n	8008a6c <UART_SetConfig+0x260>
 8008a5a:	e00f      	b.n	8008a7c <UART_SetConfig+0x270>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a62:	e012      	b.n	8008a8a <UART_SetConfig+0x27e>
 8008a64:	2302      	movs	r3, #2
 8008a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a6a:	e00e      	b.n	8008a8a <UART_SetConfig+0x27e>
 8008a6c:	2304      	movs	r3, #4
 8008a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a72:	e00a      	b.n	8008a8a <UART_SetConfig+0x27e>
 8008a74:	2308      	movs	r3, #8
 8008a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a7a:	e006      	b.n	8008a8a <UART_SetConfig+0x27e>
 8008a7c:	2310      	movs	r3, #16
 8008a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a82:	e002      	b.n	8008a8a <UART_SetConfig+0x27e>
 8008a84:	2310      	movs	r3, #16
 8008a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a17      	ldr	r2, [pc, #92]	@ (8008aec <UART_SetConfig+0x2e0>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	f040 80a8 	bne.w	8008be6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a9a:	2b08      	cmp	r3, #8
 8008a9c:	d834      	bhi.n	8008b08 <UART_SetConfig+0x2fc>
 8008a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa4 <UART_SetConfig+0x298>)
 8008aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa4:	08008ac9 	.word	0x08008ac9
 8008aa8:	08008b09 	.word	0x08008b09
 8008aac:	08008ad1 	.word	0x08008ad1
 8008ab0:	08008b09 	.word	0x08008b09
 8008ab4:	08008ad7 	.word	0x08008ad7
 8008ab8:	08008b09 	.word	0x08008b09
 8008abc:	08008b09 	.word	0x08008b09
 8008ac0:	08008b09 	.word	0x08008b09
 8008ac4:	08008adf 	.word	0x08008adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ac8:	f7fd fd84 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
 8008acc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ace:	e021      	b.n	8008b14 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8008b04 <UART_SetConfig+0x2f8>)
 8008ad2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ad4:	e01e      	b.n	8008b14 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ad6:	f7fd fd0f 	bl	80064f8 <HAL_RCC_GetSysClockFreq>
 8008ada:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008adc:	e01a      	b.n	8008b14 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ae2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ae4:	e016      	b.n	8008b14 <UART_SetConfig+0x308>
 8008ae6:	bf00      	nop
 8008ae8:	cfff69f3 	.word	0xcfff69f3
 8008aec:	40008000 	.word	0x40008000
 8008af0:	40013800 	.word	0x40013800
 8008af4:	40021000 	.word	0x40021000
 8008af8:	40004400 	.word	0x40004400
 8008afc:	40004800 	.word	0x40004800
 8008b00:	40004c00 	.word	0x40004c00
 8008b04:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b12:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 812a 	beq.w	8008d70 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b20:	4a9e      	ldr	r2, [pc, #632]	@ (8008d9c <UART_SetConfig+0x590>)
 8008b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b26:	461a      	mov	r2, r3
 8008b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b2e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	4613      	mov	r3, r2
 8008b36:	005b      	lsls	r3, r3, #1
 8008b38:	4413      	add	r3, r2
 8008b3a:	69ba      	ldr	r2, [r7, #24]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d305      	bcc.n	8008b4c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b46:	69ba      	ldr	r2, [r7, #24]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d903      	bls.n	8008b54 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b52:	e10d      	b.n	8008d70 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b56:	2200      	movs	r2, #0
 8008b58:	60bb      	str	r3, [r7, #8]
 8008b5a:	60fa      	str	r2, [r7, #12]
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b60:	4a8e      	ldr	r2, [pc, #568]	@ (8008d9c <UART_SetConfig+0x590>)
 8008b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	2200      	movs	r2, #0
 8008b6a:	603b      	str	r3, [r7, #0]
 8008b6c:	607a      	str	r2, [r7, #4]
 8008b6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b76:	f7f8 f8af 	bl	8000cd8 <__aeabi_uldivmod>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	4610      	mov	r0, r2
 8008b80:	4619      	mov	r1, r3
 8008b82:	f04f 0200 	mov.w	r2, #0
 8008b86:	f04f 0300 	mov.w	r3, #0
 8008b8a:	020b      	lsls	r3, r1, #8
 8008b8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b90:	0202      	lsls	r2, r0, #8
 8008b92:	6979      	ldr	r1, [r7, #20]
 8008b94:	6849      	ldr	r1, [r1, #4]
 8008b96:	0849      	lsrs	r1, r1, #1
 8008b98:	2000      	movs	r0, #0
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	eb12 0804 	adds.w	r8, r2, r4
 8008ba2:	eb43 0905 	adc.w	r9, r3, r5
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	469a      	mov	sl, r3
 8008bae:	4693      	mov	fp, r2
 8008bb0:	4652      	mov	r2, sl
 8008bb2:	465b      	mov	r3, fp
 8008bb4:	4640      	mov	r0, r8
 8008bb6:	4649      	mov	r1, r9
 8008bb8:	f7f8 f88e 	bl	8000cd8 <__aeabi_uldivmod>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bca:	d308      	bcc.n	8008bde <UART_SetConfig+0x3d2>
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bd2:	d204      	bcs.n	8008bde <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6a3a      	ldr	r2, [r7, #32]
 8008bda:	60da      	str	r2, [r3, #12]
 8008bdc:	e0c8      	b.n	8008d70 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008be4:	e0c4      	b.n	8008d70 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bee:	d167      	bne.n	8008cc0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008bf0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008bf4:	2b08      	cmp	r3, #8
 8008bf6:	d828      	bhi.n	8008c4a <UART_SetConfig+0x43e>
 8008bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8008c00 <UART_SetConfig+0x3f4>)
 8008bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfe:	bf00      	nop
 8008c00:	08008c25 	.word	0x08008c25
 8008c04:	08008c2d 	.word	0x08008c2d
 8008c08:	08008c35 	.word	0x08008c35
 8008c0c:	08008c4b 	.word	0x08008c4b
 8008c10:	08008c3b 	.word	0x08008c3b
 8008c14:	08008c4b 	.word	0x08008c4b
 8008c18:	08008c4b 	.word	0x08008c4b
 8008c1c:	08008c4b 	.word	0x08008c4b
 8008c20:	08008c43 	.word	0x08008c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c24:	f7fd fcd6 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
 8008c28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c2a:	e014      	b.n	8008c56 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c2c:	f7fd fce8 	bl	8006600 <HAL_RCC_GetPCLK2Freq>
 8008c30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c32:	e010      	b.n	8008c56 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c34:	4b5a      	ldr	r3, [pc, #360]	@ (8008da0 <UART_SetConfig+0x594>)
 8008c36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c38:	e00d      	b.n	8008c56 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c3a:	f7fd fc5d 	bl	80064f8 <HAL_RCC_GetSysClockFreq>
 8008c3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c40:	e009      	b.n	8008c56 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c48:	e005      	b.n	8008c56 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008c54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 8089 	beq.w	8008d70 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c62:	4a4e      	ldr	r2, [pc, #312]	@ (8008d9c <UART_SetConfig+0x590>)
 8008c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c70:	005a      	lsls	r2, r3, #1
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	085b      	lsrs	r3, r3, #1
 8008c78:	441a      	add	r2, r3
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c84:	6a3b      	ldr	r3, [r7, #32]
 8008c86:	2b0f      	cmp	r3, #15
 8008c88:	d916      	bls.n	8008cb8 <UART_SetConfig+0x4ac>
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c90:	d212      	bcs.n	8008cb8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c92:	6a3b      	ldr	r3, [r7, #32]
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	f023 030f 	bic.w	r3, r3, #15
 8008c9a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	085b      	lsrs	r3, r3, #1
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	f003 0307 	and.w	r3, r3, #7
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	8bfb      	ldrh	r3, [r7, #30]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	8bfa      	ldrh	r2, [r7, #30]
 8008cb4:	60da      	str	r2, [r3, #12]
 8008cb6:	e05b      	b.n	8008d70 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008cbe:	e057      	b.n	8008d70 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cc0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008cc4:	2b08      	cmp	r3, #8
 8008cc6:	d828      	bhi.n	8008d1a <UART_SetConfig+0x50e>
 8008cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd0 <UART_SetConfig+0x4c4>)
 8008cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cce:	bf00      	nop
 8008cd0:	08008cf5 	.word	0x08008cf5
 8008cd4:	08008cfd 	.word	0x08008cfd
 8008cd8:	08008d05 	.word	0x08008d05
 8008cdc:	08008d1b 	.word	0x08008d1b
 8008ce0:	08008d0b 	.word	0x08008d0b
 8008ce4:	08008d1b 	.word	0x08008d1b
 8008ce8:	08008d1b 	.word	0x08008d1b
 8008cec:	08008d1b 	.word	0x08008d1b
 8008cf0:	08008d13 	.word	0x08008d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cf4:	f7fd fc6e 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
 8008cf8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008cfa:	e014      	b.n	8008d26 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cfc:	f7fd fc80 	bl	8006600 <HAL_RCC_GetPCLK2Freq>
 8008d00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d02:	e010      	b.n	8008d26 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d04:	4b26      	ldr	r3, [pc, #152]	@ (8008da0 <UART_SetConfig+0x594>)
 8008d06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d08:	e00d      	b.n	8008d26 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d0a:	f7fd fbf5 	bl	80064f8 <HAL_RCC_GetSysClockFreq>
 8008d0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d10:	e009      	b.n	8008d26 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d18:	e005      	b.n	8008d26 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008d24:	bf00      	nop
    }

    if (pclk != 0U)
 8008d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d021      	beq.n	8008d70 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d30:	4a1a      	ldr	r2, [pc, #104]	@ (8008d9c <UART_SetConfig+0x590>)
 8008d32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d36:	461a      	mov	r2, r3
 8008d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	085b      	lsrs	r3, r3, #1
 8008d44:	441a      	add	r2, r3
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	2b0f      	cmp	r3, #15
 8008d54:	d909      	bls.n	8008d6a <UART_SetConfig+0x55e>
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d5c:	d205      	bcs.n	8008d6a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	60da      	str	r2, [r3, #12]
 8008d68:	e002      	b.n	8008d70 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2200      	movs	r2, #0
 8008d84:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008d8c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3730      	adds	r7, #48	@ 0x30
 8008d94:	46bd      	mov	sp, r7
 8008d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d9a:	bf00      	nop
 8008d9c:	0800de10 	.word	0x0800de10
 8008da0:	00f42400 	.word	0x00f42400

08008da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db0:	f003 0308 	and.w	r3, r3, #8
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00a      	beq.n	8008dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00a      	beq.n	8008df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	430a      	orrs	r2, r1
 8008dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df4:	f003 0302 	and.w	r3, r3, #2
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00a      	beq.n	8008e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e16:	f003 0304 	and.w	r3, r3, #4
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00a      	beq.n	8008e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	430a      	orrs	r2, r1
 8008e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e38:	f003 0310 	and.w	r3, r3, #16
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00a      	beq.n	8008e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e5a:	f003 0320 	and.w	r3, r3, #32
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00a      	beq.n	8008e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	430a      	orrs	r2, r1
 8008e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d01a      	beq.n	8008eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	430a      	orrs	r2, r1
 8008e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ea2:	d10a      	bne.n	8008eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	430a      	orrs	r2, r1
 8008eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00a      	beq.n	8008edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	430a      	orrs	r2, r1
 8008eda:	605a      	str	r2, [r3, #4]
  }
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b098      	sub	sp, #96	@ 0x60
 8008eec:	af02      	add	r7, sp, #8
 8008eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ef8:	f7fa f872 	bl	8002fe0 <HAL_GetTick>
 8008efc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0308 	and.w	r3, r3, #8
 8008f08:	2b08      	cmp	r3, #8
 8008f0a:	d12f      	bne.n	8008f6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f14:	2200      	movs	r2, #0
 8008f16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f88e 	bl	800903c <UART_WaitOnFlagUntilTimeout>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d022      	beq.n	8008f6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2e:	e853 3f00 	ldrex	r3, [r3]
 8008f32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	461a      	mov	r2, r3
 8008f42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f4c:	e841 2300 	strex	r3, r2, [r1]
 8008f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e6      	bne.n	8008f26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e063      	b.n	8009034 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 0304 	and.w	r3, r3, #4
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d149      	bne.n	800900e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f82:	2200      	movs	r2, #0
 8008f84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f857 	bl	800903c <UART_WaitOnFlagUntilTimeout>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d03c      	beq.n	800900e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9c:	e853 3f00 	ldrex	r3, [r3]
 8008fa0:	623b      	str	r3, [r7, #32]
   return(result);
 8008fa2:	6a3b      	ldr	r3, [r7, #32]
 8008fa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fba:	e841 2300 	strex	r3, r2, [r1]
 8008fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1e6      	bne.n	8008f94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3308      	adds	r3, #8
 8008fcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	e853 3f00 	ldrex	r3, [r3]
 8008fd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f023 0301 	bic.w	r3, r3, #1
 8008fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3308      	adds	r3, #8
 8008fe4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fe6:	61fa      	str	r2, [r7, #28]
 8008fe8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fea:	69b9      	ldr	r1, [r7, #24]
 8008fec:	69fa      	ldr	r2, [r7, #28]
 8008fee:	e841 2300 	strex	r3, r2, [r1]
 8008ff2:	617b      	str	r3, [r7, #20]
   return(result);
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e5      	bne.n	8008fc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2220      	movs	r2, #32
 8008ffe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e012      	b.n	8009034 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2220      	movs	r2, #32
 8009012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2220      	movs	r2, #32
 800901a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3758      	adds	r7, #88	@ 0x58
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	603b      	str	r3, [r7, #0]
 8009048:	4613      	mov	r3, r2
 800904a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800904c:	e04f      	b.n	80090ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009054:	d04b      	beq.n	80090ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009056:	f7f9 ffc3 	bl	8002fe0 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	69ba      	ldr	r2, [r7, #24]
 8009062:	429a      	cmp	r2, r3
 8009064:	d302      	bcc.n	800906c <UART_WaitOnFlagUntilTimeout+0x30>
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800906c:	2303      	movs	r3, #3
 800906e:	e04e      	b.n	800910e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0304 	and.w	r3, r3, #4
 800907a:	2b00      	cmp	r3, #0
 800907c:	d037      	beq.n	80090ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	2b80      	cmp	r3, #128	@ 0x80
 8009082:	d034      	beq.n	80090ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	2b40      	cmp	r3, #64	@ 0x40
 8009088:	d031      	beq.n	80090ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	69db      	ldr	r3, [r3, #28]
 8009090:	f003 0308 	and.w	r3, r3, #8
 8009094:	2b08      	cmp	r3, #8
 8009096:	d110      	bne.n	80090ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2208      	movs	r2, #8
 800909e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f000 f838 	bl	8009116 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2208      	movs	r2, #8
 80090aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e029      	b.n	800910e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090c8:	d111      	bne.n	80090ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80090d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f000 f81e 	bl	8009116 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2220      	movs	r2, #32
 80090de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e00f      	b.n	800910e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	69da      	ldr	r2, [r3, #28]
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	4013      	ands	r3, r2
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	bf0c      	ite	eq
 80090fe:	2301      	moveq	r3, #1
 8009100:	2300      	movne	r3, #0
 8009102:	b2db      	uxtb	r3, r3
 8009104:	461a      	mov	r2, r3
 8009106:	79fb      	ldrb	r3, [r7, #7]
 8009108:	429a      	cmp	r2, r3
 800910a:	d0a0      	beq.n	800904e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009116:	b480      	push	{r7}
 8009118:	b095      	sub	sp, #84	@ 0x54
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009126:	e853 3f00 	ldrex	r3, [r3]
 800912a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800912c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	461a      	mov	r2, r3
 800913a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800913c:	643b      	str	r3, [r7, #64]	@ 0x40
 800913e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009140:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009142:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009144:	e841 2300 	strex	r3, r2, [r1]
 8009148:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800914a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1e6      	bne.n	800911e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	3308      	adds	r3, #8
 8009156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	e853 3f00 	ldrex	r3, [r3]
 800915e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009166:	f023 0301 	bic.w	r3, r3, #1
 800916a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3308      	adds	r3, #8
 8009172:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009174:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009176:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009178:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800917a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800917c:	e841 2300 	strex	r3, r2, [r1]
 8009180:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1e3      	bne.n	8009150 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800918c:	2b01      	cmp	r3, #1
 800918e:	d118      	bne.n	80091c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	e853 3f00 	ldrex	r3, [r3]
 800919c:	60bb      	str	r3, [r7, #8]
   return(result);
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	f023 0310 	bic.w	r3, r3, #16
 80091a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091ae:	61bb      	str	r3, [r7, #24]
 80091b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	6979      	ldr	r1, [r7, #20]
 80091b4:	69ba      	ldr	r2, [r7, #24]
 80091b6:	e841 2300 	strex	r3, r2, [r1]
 80091ba:	613b      	str	r3, [r7, #16]
   return(result);
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1e6      	bne.n	8009190 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2220      	movs	r2, #32
 80091c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80091d6:	bf00      	nop
 80091d8:	3754      	adds	r7, #84	@ 0x54
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f7ff faed 	bl	80087e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009206:	bf00      	nop
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b088      	sub	sp, #32
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	e853 3f00 	ldrex	r3, [r3]
 8009222:	60bb      	str	r3, [r7, #8]
   return(result);
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800922a:	61fb      	str	r3, [r7, #28]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	461a      	mov	r2, r3
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	61bb      	str	r3, [r7, #24]
 8009236:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009238:	6979      	ldr	r1, [r7, #20]
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	e841 2300 	strex	r3, r2, [r1]
 8009240:	613b      	str	r3, [r7, #16]
   return(result);
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1e6      	bne.n	8009216 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2220      	movs	r2, #32
 800924c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f7ff fab8 	bl	80087cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800925c:	bf00      	nop
 800925e:	3720      	adds	r7, #32
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d101      	bne.n	80092b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80092b2:	2302      	movs	r3, #2
 80092b4:	e027      	b.n	8009306 <HAL_UARTEx_DisableFifoMode+0x66>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2201      	movs	r2, #1
 80092ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2224      	movs	r2, #36	@ 0x24
 80092c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f022 0201 	bic.w	r2, r2, #1
 80092dc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80092e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2220      	movs	r2, #32
 80092f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009322:	2b01      	cmp	r3, #1
 8009324:	d101      	bne.n	800932a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009326:	2302      	movs	r3, #2
 8009328:	e02d      	b.n	8009386 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2224      	movs	r2, #36	@ 0x24
 8009336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f022 0201 	bic.w	r2, r2, #1
 8009350:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	430a      	orrs	r2, r1
 8009364:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f850 	bl	800940c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2220      	movs	r2, #32
 8009378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d101      	bne.n	80093a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093a2:	2302      	movs	r3, #2
 80093a4:	e02d      	b.n	8009402 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2201      	movs	r2, #1
 80093aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2224      	movs	r2, #36	@ 0x24
 80093b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f022 0201 	bic.w	r2, r2, #1
 80093cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	430a      	orrs	r2, r1
 80093e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f812 	bl	800940c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2220      	movs	r2, #32
 80093f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
	...

0800940c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009418:	2b00      	cmp	r3, #0
 800941a:	d108      	bne.n	800942e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800942c:	e031      	b.n	8009492 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800942e:	2308      	movs	r3, #8
 8009430:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009432:	2308      	movs	r3, #8
 8009434:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	0e5b      	lsrs	r3, r3, #25
 800943e:	b2db      	uxtb	r3, r3
 8009440:	f003 0307 	and.w	r3, r3, #7
 8009444:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	0f5b      	lsrs	r3, r3, #29
 800944e:	b2db      	uxtb	r3, r3
 8009450:	f003 0307 	and.w	r3, r3, #7
 8009454:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009456:	7bbb      	ldrb	r3, [r7, #14]
 8009458:	7b3a      	ldrb	r2, [r7, #12]
 800945a:	4911      	ldr	r1, [pc, #68]	@ (80094a0 <UARTEx_SetNbDataToProcess+0x94>)
 800945c:	5c8a      	ldrb	r2, [r1, r2]
 800945e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009462:	7b3a      	ldrb	r2, [r7, #12]
 8009464:	490f      	ldr	r1, [pc, #60]	@ (80094a4 <UARTEx_SetNbDataToProcess+0x98>)
 8009466:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009468:	fb93 f3f2 	sdiv	r3, r3, r2
 800946c:	b29a      	uxth	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009474:	7bfb      	ldrb	r3, [r7, #15]
 8009476:	7b7a      	ldrb	r2, [r7, #13]
 8009478:	4909      	ldr	r1, [pc, #36]	@ (80094a0 <UARTEx_SetNbDataToProcess+0x94>)
 800947a:	5c8a      	ldrb	r2, [r1, r2]
 800947c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009480:	7b7a      	ldrb	r2, [r7, #13]
 8009482:	4908      	ldr	r1, [pc, #32]	@ (80094a4 <UARTEx_SetNbDataToProcess+0x98>)
 8009484:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009486:	fb93 f3f2 	sdiv	r3, r3, r2
 800948a:	b29a      	uxth	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009492:	bf00      	nop
 8009494:	3714      	adds	r7, #20
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	0800de28 	.word	0x0800de28
 80094a4:	0800de30 	.word	0x0800de30

080094a8 <__cvt>:
 80094a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094ac:	ec57 6b10 	vmov	r6, r7, d0
 80094b0:	2f00      	cmp	r7, #0
 80094b2:	460c      	mov	r4, r1
 80094b4:	4619      	mov	r1, r3
 80094b6:	463b      	mov	r3, r7
 80094b8:	bfbb      	ittet	lt
 80094ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80094be:	461f      	movlt	r7, r3
 80094c0:	2300      	movge	r3, #0
 80094c2:	232d      	movlt	r3, #45	@ 0x2d
 80094c4:	700b      	strb	r3, [r1, #0]
 80094c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80094cc:	4691      	mov	r9, r2
 80094ce:	f023 0820 	bic.w	r8, r3, #32
 80094d2:	bfbc      	itt	lt
 80094d4:	4632      	movlt	r2, r6
 80094d6:	4616      	movlt	r6, r2
 80094d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80094dc:	d005      	beq.n	80094ea <__cvt+0x42>
 80094de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80094e2:	d100      	bne.n	80094e6 <__cvt+0x3e>
 80094e4:	3401      	adds	r4, #1
 80094e6:	2102      	movs	r1, #2
 80094e8:	e000      	b.n	80094ec <__cvt+0x44>
 80094ea:	2103      	movs	r1, #3
 80094ec:	ab03      	add	r3, sp, #12
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	ab02      	add	r3, sp, #8
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	ec47 6b10 	vmov	d0, r6, r7
 80094f8:	4653      	mov	r3, sl
 80094fa:	4622      	mov	r2, r4
 80094fc:	f001 f874 	bl	800a5e8 <_dtoa_r>
 8009500:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009504:	4605      	mov	r5, r0
 8009506:	d119      	bne.n	800953c <__cvt+0x94>
 8009508:	f019 0f01 	tst.w	r9, #1
 800950c:	d00e      	beq.n	800952c <__cvt+0x84>
 800950e:	eb00 0904 	add.w	r9, r0, r4
 8009512:	2200      	movs	r2, #0
 8009514:	2300      	movs	r3, #0
 8009516:	4630      	mov	r0, r6
 8009518:	4639      	mov	r1, r7
 800951a:	f7f7 fafd 	bl	8000b18 <__aeabi_dcmpeq>
 800951e:	b108      	cbz	r0, 8009524 <__cvt+0x7c>
 8009520:	f8cd 900c 	str.w	r9, [sp, #12]
 8009524:	2230      	movs	r2, #48	@ 0x30
 8009526:	9b03      	ldr	r3, [sp, #12]
 8009528:	454b      	cmp	r3, r9
 800952a:	d31e      	bcc.n	800956a <__cvt+0xc2>
 800952c:	9b03      	ldr	r3, [sp, #12]
 800952e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009530:	1b5b      	subs	r3, r3, r5
 8009532:	4628      	mov	r0, r5
 8009534:	6013      	str	r3, [r2, #0]
 8009536:	b004      	add	sp, #16
 8009538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800953c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009540:	eb00 0904 	add.w	r9, r0, r4
 8009544:	d1e5      	bne.n	8009512 <__cvt+0x6a>
 8009546:	7803      	ldrb	r3, [r0, #0]
 8009548:	2b30      	cmp	r3, #48	@ 0x30
 800954a:	d10a      	bne.n	8009562 <__cvt+0xba>
 800954c:	2200      	movs	r2, #0
 800954e:	2300      	movs	r3, #0
 8009550:	4630      	mov	r0, r6
 8009552:	4639      	mov	r1, r7
 8009554:	f7f7 fae0 	bl	8000b18 <__aeabi_dcmpeq>
 8009558:	b918      	cbnz	r0, 8009562 <__cvt+0xba>
 800955a:	f1c4 0401 	rsb	r4, r4, #1
 800955e:	f8ca 4000 	str.w	r4, [sl]
 8009562:	f8da 3000 	ldr.w	r3, [sl]
 8009566:	4499      	add	r9, r3
 8009568:	e7d3      	b.n	8009512 <__cvt+0x6a>
 800956a:	1c59      	adds	r1, r3, #1
 800956c:	9103      	str	r1, [sp, #12]
 800956e:	701a      	strb	r2, [r3, #0]
 8009570:	e7d9      	b.n	8009526 <__cvt+0x7e>

08009572 <__exponent>:
 8009572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009574:	2900      	cmp	r1, #0
 8009576:	bfba      	itte	lt
 8009578:	4249      	neglt	r1, r1
 800957a:	232d      	movlt	r3, #45	@ 0x2d
 800957c:	232b      	movge	r3, #43	@ 0x2b
 800957e:	2909      	cmp	r1, #9
 8009580:	7002      	strb	r2, [r0, #0]
 8009582:	7043      	strb	r3, [r0, #1]
 8009584:	dd29      	ble.n	80095da <__exponent+0x68>
 8009586:	f10d 0307 	add.w	r3, sp, #7
 800958a:	461d      	mov	r5, r3
 800958c:	270a      	movs	r7, #10
 800958e:	461a      	mov	r2, r3
 8009590:	fbb1 f6f7 	udiv	r6, r1, r7
 8009594:	fb07 1416 	mls	r4, r7, r6, r1
 8009598:	3430      	adds	r4, #48	@ 0x30
 800959a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800959e:	460c      	mov	r4, r1
 80095a0:	2c63      	cmp	r4, #99	@ 0x63
 80095a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80095a6:	4631      	mov	r1, r6
 80095a8:	dcf1      	bgt.n	800958e <__exponent+0x1c>
 80095aa:	3130      	adds	r1, #48	@ 0x30
 80095ac:	1e94      	subs	r4, r2, #2
 80095ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80095b2:	1c41      	adds	r1, r0, #1
 80095b4:	4623      	mov	r3, r4
 80095b6:	42ab      	cmp	r3, r5
 80095b8:	d30a      	bcc.n	80095d0 <__exponent+0x5e>
 80095ba:	f10d 0309 	add.w	r3, sp, #9
 80095be:	1a9b      	subs	r3, r3, r2
 80095c0:	42ac      	cmp	r4, r5
 80095c2:	bf88      	it	hi
 80095c4:	2300      	movhi	r3, #0
 80095c6:	3302      	adds	r3, #2
 80095c8:	4403      	add	r3, r0
 80095ca:	1a18      	subs	r0, r3, r0
 80095cc:	b003      	add	sp, #12
 80095ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80095d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80095d8:	e7ed      	b.n	80095b6 <__exponent+0x44>
 80095da:	2330      	movs	r3, #48	@ 0x30
 80095dc:	3130      	adds	r1, #48	@ 0x30
 80095de:	7083      	strb	r3, [r0, #2]
 80095e0:	70c1      	strb	r1, [r0, #3]
 80095e2:	1d03      	adds	r3, r0, #4
 80095e4:	e7f1      	b.n	80095ca <__exponent+0x58>
	...

080095e8 <_printf_float>:
 80095e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ec:	b08d      	sub	sp, #52	@ 0x34
 80095ee:	460c      	mov	r4, r1
 80095f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80095f4:	4616      	mov	r6, r2
 80095f6:	461f      	mov	r7, r3
 80095f8:	4605      	mov	r5, r0
 80095fa:	f000 feef 	bl	800a3dc <_localeconv_r>
 80095fe:	6803      	ldr	r3, [r0, #0]
 8009600:	9304      	str	r3, [sp, #16]
 8009602:	4618      	mov	r0, r3
 8009604:	f7f6 fe5c 	bl	80002c0 <strlen>
 8009608:	2300      	movs	r3, #0
 800960a:	930a      	str	r3, [sp, #40]	@ 0x28
 800960c:	f8d8 3000 	ldr.w	r3, [r8]
 8009610:	9005      	str	r0, [sp, #20]
 8009612:	3307      	adds	r3, #7
 8009614:	f023 0307 	bic.w	r3, r3, #7
 8009618:	f103 0208 	add.w	r2, r3, #8
 800961c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009620:	f8d4 b000 	ldr.w	fp, [r4]
 8009624:	f8c8 2000 	str.w	r2, [r8]
 8009628:	e9d3 8900 	ldrd	r8, r9, [r3]
 800962c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009630:	9307      	str	r3, [sp, #28]
 8009632:	f8cd 8018 	str.w	r8, [sp, #24]
 8009636:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800963a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800963e:	4b9c      	ldr	r3, [pc, #624]	@ (80098b0 <_printf_float+0x2c8>)
 8009640:	f04f 32ff 	mov.w	r2, #4294967295
 8009644:	f7f7 fa9a 	bl	8000b7c <__aeabi_dcmpun>
 8009648:	bb70      	cbnz	r0, 80096a8 <_printf_float+0xc0>
 800964a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800964e:	4b98      	ldr	r3, [pc, #608]	@ (80098b0 <_printf_float+0x2c8>)
 8009650:	f04f 32ff 	mov.w	r2, #4294967295
 8009654:	f7f7 fa74 	bl	8000b40 <__aeabi_dcmple>
 8009658:	bb30      	cbnz	r0, 80096a8 <_printf_float+0xc0>
 800965a:	2200      	movs	r2, #0
 800965c:	2300      	movs	r3, #0
 800965e:	4640      	mov	r0, r8
 8009660:	4649      	mov	r1, r9
 8009662:	f7f7 fa63 	bl	8000b2c <__aeabi_dcmplt>
 8009666:	b110      	cbz	r0, 800966e <_printf_float+0x86>
 8009668:	232d      	movs	r3, #45	@ 0x2d
 800966a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800966e:	4a91      	ldr	r2, [pc, #580]	@ (80098b4 <_printf_float+0x2cc>)
 8009670:	4b91      	ldr	r3, [pc, #580]	@ (80098b8 <_printf_float+0x2d0>)
 8009672:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009676:	bf94      	ite	ls
 8009678:	4690      	movls	r8, r2
 800967a:	4698      	movhi	r8, r3
 800967c:	2303      	movs	r3, #3
 800967e:	6123      	str	r3, [r4, #16]
 8009680:	f02b 0304 	bic.w	r3, fp, #4
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	f04f 0900 	mov.w	r9, #0
 800968a:	9700      	str	r7, [sp, #0]
 800968c:	4633      	mov	r3, r6
 800968e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009690:	4621      	mov	r1, r4
 8009692:	4628      	mov	r0, r5
 8009694:	f000 f9d2 	bl	8009a3c <_printf_common>
 8009698:	3001      	adds	r0, #1
 800969a:	f040 808d 	bne.w	80097b8 <_printf_float+0x1d0>
 800969e:	f04f 30ff 	mov.w	r0, #4294967295
 80096a2:	b00d      	add	sp, #52	@ 0x34
 80096a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a8:	4642      	mov	r2, r8
 80096aa:	464b      	mov	r3, r9
 80096ac:	4640      	mov	r0, r8
 80096ae:	4649      	mov	r1, r9
 80096b0:	f7f7 fa64 	bl	8000b7c <__aeabi_dcmpun>
 80096b4:	b140      	cbz	r0, 80096c8 <_printf_float+0xe0>
 80096b6:	464b      	mov	r3, r9
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	bfbc      	itt	lt
 80096bc:	232d      	movlt	r3, #45	@ 0x2d
 80096be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80096c2:	4a7e      	ldr	r2, [pc, #504]	@ (80098bc <_printf_float+0x2d4>)
 80096c4:	4b7e      	ldr	r3, [pc, #504]	@ (80098c0 <_printf_float+0x2d8>)
 80096c6:	e7d4      	b.n	8009672 <_printf_float+0x8a>
 80096c8:	6863      	ldr	r3, [r4, #4]
 80096ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80096ce:	9206      	str	r2, [sp, #24]
 80096d0:	1c5a      	adds	r2, r3, #1
 80096d2:	d13b      	bne.n	800974c <_printf_float+0x164>
 80096d4:	2306      	movs	r3, #6
 80096d6:	6063      	str	r3, [r4, #4]
 80096d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80096dc:	2300      	movs	r3, #0
 80096de:	6022      	str	r2, [r4, #0]
 80096e0:	9303      	str	r3, [sp, #12]
 80096e2:	ab0a      	add	r3, sp, #40	@ 0x28
 80096e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80096e8:	ab09      	add	r3, sp, #36	@ 0x24
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	6861      	ldr	r1, [r4, #4]
 80096ee:	ec49 8b10 	vmov	d0, r8, r9
 80096f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80096f6:	4628      	mov	r0, r5
 80096f8:	f7ff fed6 	bl	80094a8 <__cvt>
 80096fc:	9b06      	ldr	r3, [sp, #24]
 80096fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009700:	2b47      	cmp	r3, #71	@ 0x47
 8009702:	4680      	mov	r8, r0
 8009704:	d129      	bne.n	800975a <_printf_float+0x172>
 8009706:	1cc8      	adds	r0, r1, #3
 8009708:	db02      	blt.n	8009710 <_printf_float+0x128>
 800970a:	6863      	ldr	r3, [r4, #4]
 800970c:	4299      	cmp	r1, r3
 800970e:	dd41      	ble.n	8009794 <_printf_float+0x1ac>
 8009710:	f1aa 0a02 	sub.w	sl, sl, #2
 8009714:	fa5f fa8a 	uxtb.w	sl, sl
 8009718:	3901      	subs	r1, #1
 800971a:	4652      	mov	r2, sl
 800971c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009720:	9109      	str	r1, [sp, #36]	@ 0x24
 8009722:	f7ff ff26 	bl	8009572 <__exponent>
 8009726:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009728:	1813      	adds	r3, r2, r0
 800972a:	2a01      	cmp	r2, #1
 800972c:	4681      	mov	r9, r0
 800972e:	6123      	str	r3, [r4, #16]
 8009730:	dc02      	bgt.n	8009738 <_printf_float+0x150>
 8009732:	6822      	ldr	r2, [r4, #0]
 8009734:	07d2      	lsls	r2, r2, #31
 8009736:	d501      	bpl.n	800973c <_printf_float+0x154>
 8009738:	3301      	adds	r3, #1
 800973a:	6123      	str	r3, [r4, #16]
 800973c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009740:	2b00      	cmp	r3, #0
 8009742:	d0a2      	beq.n	800968a <_printf_float+0xa2>
 8009744:	232d      	movs	r3, #45	@ 0x2d
 8009746:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800974a:	e79e      	b.n	800968a <_printf_float+0xa2>
 800974c:	9a06      	ldr	r2, [sp, #24]
 800974e:	2a47      	cmp	r2, #71	@ 0x47
 8009750:	d1c2      	bne.n	80096d8 <_printf_float+0xf0>
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1c0      	bne.n	80096d8 <_printf_float+0xf0>
 8009756:	2301      	movs	r3, #1
 8009758:	e7bd      	b.n	80096d6 <_printf_float+0xee>
 800975a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800975e:	d9db      	bls.n	8009718 <_printf_float+0x130>
 8009760:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009764:	d118      	bne.n	8009798 <_printf_float+0x1b0>
 8009766:	2900      	cmp	r1, #0
 8009768:	6863      	ldr	r3, [r4, #4]
 800976a:	dd0b      	ble.n	8009784 <_printf_float+0x19c>
 800976c:	6121      	str	r1, [r4, #16]
 800976e:	b913      	cbnz	r3, 8009776 <_printf_float+0x18e>
 8009770:	6822      	ldr	r2, [r4, #0]
 8009772:	07d0      	lsls	r0, r2, #31
 8009774:	d502      	bpl.n	800977c <_printf_float+0x194>
 8009776:	3301      	adds	r3, #1
 8009778:	440b      	add	r3, r1
 800977a:	6123      	str	r3, [r4, #16]
 800977c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800977e:	f04f 0900 	mov.w	r9, #0
 8009782:	e7db      	b.n	800973c <_printf_float+0x154>
 8009784:	b913      	cbnz	r3, 800978c <_printf_float+0x1a4>
 8009786:	6822      	ldr	r2, [r4, #0]
 8009788:	07d2      	lsls	r2, r2, #31
 800978a:	d501      	bpl.n	8009790 <_printf_float+0x1a8>
 800978c:	3302      	adds	r3, #2
 800978e:	e7f4      	b.n	800977a <_printf_float+0x192>
 8009790:	2301      	movs	r3, #1
 8009792:	e7f2      	b.n	800977a <_printf_float+0x192>
 8009794:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800979a:	4299      	cmp	r1, r3
 800979c:	db05      	blt.n	80097aa <_printf_float+0x1c2>
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	6121      	str	r1, [r4, #16]
 80097a2:	07d8      	lsls	r0, r3, #31
 80097a4:	d5ea      	bpl.n	800977c <_printf_float+0x194>
 80097a6:	1c4b      	adds	r3, r1, #1
 80097a8:	e7e7      	b.n	800977a <_printf_float+0x192>
 80097aa:	2900      	cmp	r1, #0
 80097ac:	bfd4      	ite	le
 80097ae:	f1c1 0202 	rsble	r2, r1, #2
 80097b2:	2201      	movgt	r2, #1
 80097b4:	4413      	add	r3, r2
 80097b6:	e7e0      	b.n	800977a <_printf_float+0x192>
 80097b8:	6823      	ldr	r3, [r4, #0]
 80097ba:	055a      	lsls	r2, r3, #21
 80097bc:	d407      	bmi.n	80097ce <_printf_float+0x1e6>
 80097be:	6923      	ldr	r3, [r4, #16]
 80097c0:	4642      	mov	r2, r8
 80097c2:	4631      	mov	r1, r6
 80097c4:	4628      	mov	r0, r5
 80097c6:	47b8      	blx	r7
 80097c8:	3001      	adds	r0, #1
 80097ca:	d12b      	bne.n	8009824 <_printf_float+0x23c>
 80097cc:	e767      	b.n	800969e <_printf_float+0xb6>
 80097ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80097d2:	f240 80dd 	bls.w	8009990 <_printf_float+0x3a8>
 80097d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80097da:	2200      	movs	r2, #0
 80097dc:	2300      	movs	r3, #0
 80097de:	f7f7 f99b 	bl	8000b18 <__aeabi_dcmpeq>
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d033      	beq.n	800984e <_printf_float+0x266>
 80097e6:	4a37      	ldr	r2, [pc, #220]	@ (80098c4 <_printf_float+0x2dc>)
 80097e8:	2301      	movs	r3, #1
 80097ea:	4631      	mov	r1, r6
 80097ec:	4628      	mov	r0, r5
 80097ee:	47b8      	blx	r7
 80097f0:	3001      	adds	r0, #1
 80097f2:	f43f af54 	beq.w	800969e <_printf_float+0xb6>
 80097f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80097fa:	4543      	cmp	r3, r8
 80097fc:	db02      	blt.n	8009804 <_printf_float+0x21c>
 80097fe:	6823      	ldr	r3, [r4, #0]
 8009800:	07d8      	lsls	r0, r3, #31
 8009802:	d50f      	bpl.n	8009824 <_printf_float+0x23c>
 8009804:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009808:	4631      	mov	r1, r6
 800980a:	4628      	mov	r0, r5
 800980c:	47b8      	blx	r7
 800980e:	3001      	adds	r0, #1
 8009810:	f43f af45 	beq.w	800969e <_printf_float+0xb6>
 8009814:	f04f 0900 	mov.w	r9, #0
 8009818:	f108 38ff 	add.w	r8, r8, #4294967295
 800981c:	f104 0a1a 	add.w	sl, r4, #26
 8009820:	45c8      	cmp	r8, r9
 8009822:	dc09      	bgt.n	8009838 <_printf_float+0x250>
 8009824:	6823      	ldr	r3, [r4, #0]
 8009826:	079b      	lsls	r3, r3, #30
 8009828:	f100 8103 	bmi.w	8009a32 <_printf_float+0x44a>
 800982c:	68e0      	ldr	r0, [r4, #12]
 800982e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009830:	4298      	cmp	r0, r3
 8009832:	bfb8      	it	lt
 8009834:	4618      	movlt	r0, r3
 8009836:	e734      	b.n	80096a2 <_printf_float+0xba>
 8009838:	2301      	movs	r3, #1
 800983a:	4652      	mov	r2, sl
 800983c:	4631      	mov	r1, r6
 800983e:	4628      	mov	r0, r5
 8009840:	47b8      	blx	r7
 8009842:	3001      	adds	r0, #1
 8009844:	f43f af2b 	beq.w	800969e <_printf_float+0xb6>
 8009848:	f109 0901 	add.w	r9, r9, #1
 800984c:	e7e8      	b.n	8009820 <_printf_float+0x238>
 800984e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009850:	2b00      	cmp	r3, #0
 8009852:	dc39      	bgt.n	80098c8 <_printf_float+0x2e0>
 8009854:	4a1b      	ldr	r2, [pc, #108]	@ (80098c4 <_printf_float+0x2dc>)
 8009856:	2301      	movs	r3, #1
 8009858:	4631      	mov	r1, r6
 800985a:	4628      	mov	r0, r5
 800985c:	47b8      	blx	r7
 800985e:	3001      	adds	r0, #1
 8009860:	f43f af1d 	beq.w	800969e <_printf_float+0xb6>
 8009864:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009868:	ea59 0303 	orrs.w	r3, r9, r3
 800986c:	d102      	bne.n	8009874 <_printf_float+0x28c>
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	07d9      	lsls	r1, r3, #31
 8009872:	d5d7      	bpl.n	8009824 <_printf_float+0x23c>
 8009874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009878:	4631      	mov	r1, r6
 800987a:	4628      	mov	r0, r5
 800987c:	47b8      	blx	r7
 800987e:	3001      	adds	r0, #1
 8009880:	f43f af0d 	beq.w	800969e <_printf_float+0xb6>
 8009884:	f04f 0a00 	mov.w	sl, #0
 8009888:	f104 0b1a 	add.w	fp, r4, #26
 800988c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800988e:	425b      	negs	r3, r3
 8009890:	4553      	cmp	r3, sl
 8009892:	dc01      	bgt.n	8009898 <_printf_float+0x2b0>
 8009894:	464b      	mov	r3, r9
 8009896:	e793      	b.n	80097c0 <_printf_float+0x1d8>
 8009898:	2301      	movs	r3, #1
 800989a:	465a      	mov	r2, fp
 800989c:	4631      	mov	r1, r6
 800989e:	4628      	mov	r0, r5
 80098a0:	47b8      	blx	r7
 80098a2:	3001      	adds	r0, #1
 80098a4:	f43f aefb 	beq.w	800969e <_printf_float+0xb6>
 80098a8:	f10a 0a01 	add.w	sl, sl, #1
 80098ac:	e7ee      	b.n	800988c <_printf_float+0x2a4>
 80098ae:	bf00      	nop
 80098b0:	7fefffff 	.word	0x7fefffff
 80098b4:	0800de38 	.word	0x0800de38
 80098b8:	0800de3c 	.word	0x0800de3c
 80098bc:	0800de40 	.word	0x0800de40
 80098c0:	0800de44 	.word	0x0800de44
 80098c4:	0800de48 	.word	0x0800de48
 80098c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80098ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80098ce:	4553      	cmp	r3, sl
 80098d0:	bfa8      	it	ge
 80098d2:	4653      	movge	r3, sl
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	4699      	mov	r9, r3
 80098d8:	dc36      	bgt.n	8009948 <_printf_float+0x360>
 80098da:	f04f 0b00 	mov.w	fp, #0
 80098de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098e2:	f104 021a 	add.w	r2, r4, #26
 80098e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80098e8:	9306      	str	r3, [sp, #24]
 80098ea:	eba3 0309 	sub.w	r3, r3, r9
 80098ee:	455b      	cmp	r3, fp
 80098f0:	dc31      	bgt.n	8009956 <_printf_float+0x36e>
 80098f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098f4:	459a      	cmp	sl, r3
 80098f6:	dc3a      	bgt.n	800996e <_printf_float+0x386>
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	07da      	lsls	r2, r3, #31
 80098fc:	d437      	bmi.n	800996e <_printf_float+0x386>
 80098fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009900:	ebaa 0903 	sub.w	r9, sl, r3
 8009904:	9b06      	ldr	r3, [sp, #24]
 8009906:	ebaa 0303 	sub.w	r3, sl, r3
 800990a:	4599      	cmp	r9, r3
 800990c:	bfa8      	it	ge
 800990e:	4699      	movge	r9, r3
 8009910:	f1b9 0f00 	cmp.w	r9, #0
 8009914:	dc33      	bgt.n	800997e <_printf_float+0x396>
 8009916:	f04f 0800 	mov.w	r8, #0
 800991a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800991e:	f104 0b1a 	add.w	fp, r4, #26
 8009922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009924:	ebaa 0303 	sub.w	r3, sl, r3
 8009928:	eba3 0309 	sub.w	r3, r3, r9
 800992c:	4543      	cmp	r3, r8
 800992e:	f77f af79 	ble.w	8009824 <_printf_float+0x23c>
 8009932:	2301      	movs	r3, #1
 8009934:	465a      	mov	r2, fp
 8009936:	4631      	mov	r1, r6
 8009938:	4628      	mov	r0, r5
 800993a:	47b8      	blx	r7
 800993c:	3001      	adds	r0, #1
 800993e:	f43f aeae 	beq.w	800969e <_printf_float+0xb6>
 8009942:	f108 0801 	add.w	r8, r8, #1
 8009946:	e7ec      	b.n	8009922 <_printf_float+0x33a>
 8009948:	4642      	mov	r2, r8
 800994a:	4631      	mov	r1, r6
 800994c:	4628      	mov	r0, r5
 800994e:	47b8      	blx	r7
 8009950:	3001      	adds	r0, #1
 8009952:	d1c2      	bne.n	80098da <_printf_float+0x2f2>
 8009954:	e6a3      	b.n	800969e <_printf_float+0xb6>
 8009956:	2301      	movs	r3, #1
 8009958:	4631      	mov	r1, r6
 800995a:	4628      	mov	r0, r5
 800995c:	9206      	str	r2, [sp, #24]
 800995e:	47b8      	blx	r7
 8009960:	3001      	adds	r0, #1
 8009962:	f43f ae9c 	beq.w	800969e <_printf_float+0xb6>
 8009966:	9a06      	ldr	r2, [sp, #24]
 8009968:	f10b 0b01 	add.w	fp, fp, #1
 800996c:	e7bb      	b.n	80098e6 <_printf_float+0x2fe>
 800996e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009972:	4631      	mov	r1, r6
 8009974:	4628      	mov	r0, r5
 8009976:	47b8      	blx	r7
 8009978:	3001      	adds	r0, #1
 800997a:	d1c0      	bne.n	80098fe <_printf_float+0x316>
 800997c:	e68f      	b.n	800969e <_printf_float+0xb6>
 800997e:	9a06      	ldr	r2, [sp, #24]
 8009980:	464b      	mov	r3, r9
 8009982:	4442      	add	r2, r8
 8009984:	4631      	mov	r1, r6
 8009986:	4628      	mov	r0, r5
 8009988:	47b8      	blx	r7
 800998a:	3001      	adds	r0, #1
 800998c:	d1c3      	bne.n	8009916 <_printf_float+0x32e>
 800998e:	e686      	b.n	800969e <_printf_float+0xb6>
 8009990:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009994:	f1ba 0f01 	cmp.w	sl, #1
 8009998:	dc01      	bgt.n	800999e <_printf_float+0x3b6>
 800999a:	07db      	lsls	r3, r3, #31
 800999c:	d536      	bpl.n	8009a0c <_printf_float+0x424>
 800999e:	2301      	movs	r3, #1
 80099a0:	4642      	mov	r2, r8
 80099a2:	4631      	mov	r1, r6
 80099a4:	4628      	mov	r0, r5
 80099a6:	47b8      	blx	r7
 80099a8:	3001      	adds	r0, #1
 80099aa:	f43f ae78 	beq.w	800969e <_printf_float+0xb6>
 80099ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099b2:	4631      	mov	r1, r6
 80099b4:	4628      	mov	r0, r5
 80099b6:	47b8      	blx	r7
 80099b8:	3001      	adds	r0, #1
 80099ba:	f43f ae70 	beq.w	800969e <_printf_float+0xb6>
 80099be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80099c2:	2200      	movs	r2, #0
 80099c4:	2300      	movs	r3, #0
 80099c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099ca:	f7f7 f8a5 	bl	8000b18 <__aeabi_dcmpeq>
 80099ce:	b9c0      	cbnz	r0, 8009a02 <_printf_float+0x41a>
 80099d0:	4653      	mov	r3, sl
 80099d2:	f108 0201 	add.w	r2, r8, #1
 80099d6:	4631      	mov	r1, r6
 80099d8:	4628      	mov	r0, r5
 80099da:	47b8      	blx	r7
 80099dc:	3001      	adds	r0, #1
 80099de:	d10c      	bne.n	80099fa <_printf_float+0x412>
 80099e0:	e65d      	b.n	800969e <_printf_float+0xb6>
 80099e2:	2301      	movs	r3, #1
 80099e4:	465a      	mov	r2, fp
 80099e6:	4631      	mov	r1, r6
 80099e8:	4628      	mov	r0, r5
 80099ea:	47b8      	blx	r7
 80099ec:	3001      	adds	r0, #1
 80099ee:	f43f ae56 	beq.w	800969e <_printf_float+0xb6>
 80099f2:	f108 0801 	add.w	r8, r8, #1
 80099f6:	45d0      	cmp	r8, sl
 80099f8:	dbf3      	blt.n	80099e2 <_printf_float+0x3fa>
 80099fa:	464b      	mov	r3, r9
 80099fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009a00:	e6df      	b.n	80097c2 <_printf_float+0x1da>
 8009a02:	f04f 0800 	mov.w	r8, #0
 8009a06:	f104 0b1a 	add.w	fp, r4, #26
 8009a0a:	e7f4      	b.n	80099f6 <_printf_float+0x40e>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	4642      	mov	r2, r8
 8009a10:	e7e1      	b.n	80099d6 <_printf_float+0x3ee>
 8009a12:	2301      	movs	r3, #1
 8009a14:	464a      	mov	r2, r9
 8009a16:	4631      	mov	r1, r6
 8009a18:	4628      	mov	r0, r5
 8009a1a:	47b8      	blx	r7
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	f43f ae3e 	beq.w	800969e <_printf_float+0xb6>
 8009a22:	f108 0801 	add.w	r8, r8, #1
 8009a26:	68e3      	ldr	r3, [r4, #12]
 8009a28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009a2a:	1a5b      	subs	r3, r3, r1
 8009a2c:	4543      	cmp	r3, r8
 8009a2e:	dcf0      	bgt.n	8009a12 <_printf_float+0x42a>
 8009a30:	e6fc      	b.n	800982c <_printf_float+0x244>
 8009a32:	f04f 0800 	mov.w	r8, #0
 8009a36:	f104 0919 	add.w	r9, r4, #25
 8009a3a:	e7f4      	b.n	8009a26 <_printf_float+0x43e>

08009a3c <_printf_common>:
 8009a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a40:	4616      	mov	r6, r2
 8009a42:	4698      	mov	r8, r3
 8009a44:	688a      	ldr	r2, [r1, #8]
 8009a46:	690b      	ldr	r3, [r1, #16]
 8009a48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	bfb8      	it	lt
 8009a50:	4613      	movlt	r3, r2
 8009a52:	6033      	str	r3, [r6, #0]
 8009a54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a58:	4607      	mov	r7, r0
 8009a5a:	460c      	mov	r4, r1
 8009a5c:	b10a      	cbz	r2, 8009a62 <_printf_common+0x26>
 8009a5e:	3301      	adds	r3, #1
 8009a60:	6033      	str	r3, [r6, #0]
 8009a62:	6823      	ldr	r3, [r4, #0]
 8009a64:	0699      	lsls	r1, r3, #26
 8009a66:	bf42      	ittt	mi
 8009a68:	6833      	ldrmi	r3, [r6, #0]
 8009a6a:	3302      	addmi	r3, #2
 8009a6c:	6033      	strmi	r3, [r6, #0]
 8009a6e:	6825      	ldr	r5, [r4, #0]
 8009a70:	f015 0506 	ands.w	r5, r5, #6
 8009a74:	d106      	bne.n	8009a84 <_printf_common+0x48>
 8009a76:	f104 0a19 	add.w	sl, r4, #25
 8009a7a:	68e3      	ldr	r3, [r4, #12]
 8009a7c:	6832      	ldr	r2, [r6, #0]
 8009a7e:	1a9b      	subs	r3, r3, r2
 8009a80:	42ab      	cmp	r3, r5
 8009a82:	dc26      	bgt.n	8009ad2 <_printf_common+0x96>
 8009a84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a88:	6822      	ldr	r2, [r4, #0]
 8009a8a:	3b00      	subs	r3, #0
 8009a8c:	bf18      	it	ne
 8009a8e:	2301      	movne	r3, #1
 8009a90:	0692      	lsls	r2, r2, #26
 8009a92:	d42b      	bmi.n	8009aec <_printf_common+0xb0>
 8009a94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a98:	4641      	mov	r1, r8
 8009a9a:	4638      	mov	r0, r7
 8009a9c:	47c8      	blx	r9
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	d01e      	beq.n	8009ae0 <_printf_common+0xa4>
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	6922      	ldr	r2, [r4, #16]
 8009aa6:	f003 0306 	and.w	r3, r3, #6
 8009aaa:	2b04      	cmp	r3, #4
 8009aac:	bf02      	ittt	eq
 8009aae:	68e5      	ldreq	r5, [r4, #12]
 8009ab0:	6833      	ldreq	r3, [r6, #0]
 8009ab2:	1aed      	subeq	r5, r5, r3
 8009ab4:	68a3      	ldr	r3, [r4, #8]
 8009ab6:	bf0c      	ite	eq
 8009ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009abc:	2500      	movne	r5, #0
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	bfc4      	itt	gt
 8009ac2:	1a9b      	subgt	r3, r3, r2
 8009ac4:	18ed      	addgt	r5, r5, r3
 8009ac6:	2600      	movs	r6, #0
 8009ac8:	341a      	adds	r4, #26
 8009aca:	42b5      	cmp	r5, r6
 8009acc:	d11a      	bne.n	8009b04 <_printf_common+0xc8>
 8009ace:	2000      	movs	r0, #0
 8009ad0:	e008      	b.n	8009ae4 <_printf_common+0xa8>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	4652      	mov	r2, sl
 8009ad6:	4641      	mov	r1, r8
 8009ad8:	4638      	mov	r0, r7
 8009ada:	47c8      	blx	r9
 8009adc:	3001      	adds	r0, #1
 8009ade:	d103      	bne.n	8009ae8 <_printf_common+0xac>
 8009ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae8:	3501      	adds	r5, #1
 8009aea:	e7c6      	b.n	8009a7a <_printf_common+0x3e>
 8009aec:	18e1      	adds	r1, r4, r3
 8009aee:	1c5a      	adds	r2, r3, #1
 8009af0:	2030      	movs	r0, #48	@ 0x30
 8009af2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009af6:	4422      	add	r2, r4
 8009af8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009afc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009b00:	3302      	adds	r3, #2
 8009b02:	e7c7      	b.n	8009a94 <_printf_common+0x58>
 8009b04:	2301      	movs	r3, #1
 8009b06:	4622      	mov	r2, r4
 8009b08:	4641      	mov	r1, r8
 8009b0a:	4638      	mov	r0, r7
 8009b0c:	47c8      	blx	r9
 8009b0e:	3001      	adds	r0, #1
 8009b10:	d0e6      	beq.n	8009ae0 <_printf_common+0xa4>
 8009b12:	3601      	adds	r6, #1
 8009b14:	e7d9      	b.n	8009aca <_printf_common+0x8e>
	...

08009b18 <_printf_i>:
 8009b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b1c:	7e0f      	ldrb	r7, [r1, #24]
 8009b1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009b20:	2f78      	cmp	r7, #120	@ 0x78
 8009b22:	4691      	mov	r9, r2
 8009b24:	4680      	mov	r8, r0
 8009b26:	460c      	mov	r4, r1
 8009b28:	469a      	mov	sl, r3
 8009b2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009b2e:	d807      	bhi.n	8009b40 <_printf_i+0x28>
 8009b30:	2f62      	cmp	r7, #98	@ 0x62
 8009b32:	d80a      	bhi.n	8009b4a <_printf_i+0x32>
 8009b34:	2f00      	cmp	r7, #0
 8009b36:	f000 80d2 	beq.w	8009cde <_printf_i+0x1c6>
 8009b3a:	2f58      	cmp	r7, #88	@ 0x58
 8009b3c:	f000 80b9 	beq.w	8009cb2 <_printf_i+0x19a>
 8009b40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b48:	e03a      	b.n	8009bc0 <_printf_i+0xa8>
 8009b4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b4e:	2b15      	cmp	r3, #21
 8009b50:	d8f6      	bhi.n	8009b40 <_printf_i+0x28>
 8009b52:	a101      	add	r1, pc, #4	@ (adr r1, 8009b58 <_printf_i+0x40>)
 8009b54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b58:	08009bb1 	.word	0x08009bb1
 8009b5c:	08009bc5 	.word	0x08009bc5
 8009b60:	08009b41 	.word	0x08009b41
 8009b64:	08009b41 	.word	0x08009b41
 8009b68:	08009b41 	.word	0x08009b41
 8009b6c:	08009b41 	.word	0x08009b41
 8009b70:	08009bc5 	.word	0x08009bc5
 8009b74:	08009b41 	.word	0x08009b41
 8009b78:	08009b41 	.word	0x08009b41
 8009b7c:	08009b41 	.word	0x08009b41
 8009b80:	08009b41 	.word	0x08009b41
 8009b84:	08009cc5 	.word	0x08009cc5
 8009b88:	08009bef 	.word	0x08009bef
 8009b8c:	08009c7f 	.word	0x08009c7f
 8009b90:	08009b41 	.word	0x08009b41
 8009b94:	08009b41 	.word	0x08009b41
 8009b98:	08009ce7 	.word	0x08009ce7
 8009b9c:	08009b41 	.word	0x08009b41
 8009ba0:	08009bef 	.word	0x08009bef
 8009ba4:	08009b41 	.word	0x08009b41
 8009ba8:	08009b41 	.word	0x08009b41
 8009bac:	08009c87 	.word	0x08009c87
 8009bb0:	6833      	ldr	r3, [r6, #0]
 8009bb2:	1d1a      	adds	r2, r3, #4
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6032      	str	r2, [r6, #0]
 8009bb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009bbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e09d      	b.n	8009d00 <_printf_i+0x1e8>
 8009bc4:	6833      	ldr	r3, [r6, #0]
 8009bc6:	6820      	ldr	r0, [r4, #0]
 8009bc8:	1d19      	adds	r1, r3, #4
 8009bca:	6031      	str	r1, [r6, #0]
 8009bcc:	0606      	lsls	r6, r0, #24
 8009bce:	d501      	bpl.n	8009bd4 <_printf_i+0xbc>
 8009bd0:	681d      	ldr	r5, [r3, #0]
 8009bd2:	e003      	b.n	8009bdc <_printf_i+0xc4>
 8009bd4:	0645      	lsls	r5, r0, #25
 8009bd6:	d5fb      	bpl.n	8009bd0 <_printf_i+0xb8>
 8009bd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009bdc:	2d00      	cmp	r5, #0
 8009bde:	da03      	bge.n	8009be8 <_printf_i+0xd0>
 8009be0:	232d      	movs	r3, #45	@ 0x2d
 8009be2:	426d      	negs	r5, r5
 8009be4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009be8:	4859      	ldr	r0, [pc, #356]	@ (8009d50 <_printf_i+0x238>)
 8009bea:	230a      	movs	r3, #10
 8009bec:	e011      	b.n	8009c12 <_printf_i+0xfa>
 8009bee:	6821      	ldr	r1, [r4, #0]
 8009bf0:	6833      	ldr	r3, [r6, #0]
 8009bf2:	0608      	lsls	r0, r1, #24
 8009bf4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009bf8:	d402      	bmi.n	8009c00 <_printf_i+0xe8>
 8009bfa:	0649      	lsls	r1, r1, #25
 8009bfc:	bf48      	it	mi
 8009bfe:	b2ad      	uxthmi	r5, r5
 8009c00:	2f6f      	cmp	r7, #111	@ 0x6f
 8009c02:	4853      	ldr	r0, [pc, #332]	@ (8009d50 <_printf_i+0x238>)
 8009c04:	6033      	str	r3, [r6, #0]
 8009c06:	bf14      	ite	ne
 8009c08:	230a      	movne	r3, #10
 8009c0a:	2308      	moveq	r3, #8
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009c12:	6866      	ldr	r6, [r4, #4]
 8009c14:	60a6      	str	r6, [r4, #8]
 8009c16:	2e00      	cmp	r6, #0
 8009c18:	bfa2      	ittt	ge
 8009c1a:	6821      	ldrge	r1, [r4, #0]
 8009c1c:	f021 0104 	bicge.w	r1, r1, #4
 8009c20:	6021      	strge	r1, [r4, #0]
 8009c22:	b90d      	cbnz	r5, 8009c28 <_printf_i+0x110>
 8009c24:	2e00      	cmp	r6, #0
 8009c26:	d04b      	beq.n	8009cc0 <_printf_i+0x1a8>
 8009c28:	4616      	mov	r6, r2
 8009c2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c2e:	fb03 5711 	mls	r7, r3, r1, r5
 8009c32:	5dc7      	ldrb	r7, [r0, r7]
 8009c34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c38:	462f      	mov	r7, r5
 8009c3a:	42bb      	cmp	r3, r7
 8009c3c:	460d      	mov	r5, r1
 8009c3e:	d9f4      	bls.n	8009c2a <_printf_i+0x112>
 8009c40:	2b08      	cmp	r3, #8
 8009c42:	d10b      	bne.n	8009c5c <_printf_i+0x144>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	07df      	lsls	r7, r3, #31
 8009c48:	d508      	bpl.n	8009c5c <_printf_i+0x144>
 8009c4a:	6923      	ldr	r3, [r4, #16]
 8009c4c:	6861      	ldr	r1, [r4, #4]
 8009c4e:	4299      	cmp	r1, r3
 8009c50:	bfde      	ittt	le
 8009c52:	2330      	movle	r3, #48	@ 0x30
 8009c54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c5c:	1b92      	subs	r2, r2, r6
 8009c5e:	6122      	str	r2, [r4, #16]
 8009c60:	f8cd a000 	str.w	sl, [sp]
 8009c64:	464b      	mov	r3, r9
 8009c66:	aa03      	add	r2, sp, #12
 8009c68:	4621      	mov	r1, r4
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	f7ff fee6 	bl	8009a3c <_printf_common>
 8009c70:	3001      	adds	r0, #1
 8009c72:	d14a      	bne.n	8009d0a <_printf_i+0x1f2>
 8009c74:	f04f 30ff 	mov.w	r0, #4294967295
 8009c78:	b004      	add	sp, #16
 8009c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c7e:	6823      	ldr	r3, [r4, #0]
 8009c80:	f043 0320 	orr.w	r3, r3, #32
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	4833      	ldr	r0, [pc, #204]	@ (8009d54 <_printf_i+0x23c>)
 8009c88:	2778      	movs	r7, #120	@ 0x78
 8009c8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	6831      	ldr	r1, [r6, #0]
 8009c92:	061f      	lsls	r7, r3, #24
 8009c94:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c98:	d402      	bmi.n	8009ca0 <_printf_i+0x188>
 8009c9a:	065f      	lsls	r7, r3, #25
 8009c9c:	bf48      	it	mi
 8009c9e:	b2ad      	uxthmi	r5, r5
 8009ca0:	6031      	str	r1, [r6, #0]
 8009ca2:	07d9      	lsls	r1, r3, #31
 8009ca4:	bf44      	itt	mi
 8009ca6:	f043 0320 	orrmi.w	r3, r3, #32
 8009caa:	6023      	strmi	r3, [r4, #0]
 8009cac:	b11d      	cbz	r5, 8009cb6 <_printf_i+0x19e>
 8009cae:	2310      	movs	r3, #16
 8009cb0:	e7ac      	b.n	8009c0c <_printf_i+0xf4>
 8009cb2:	4827      	ldr	r0, [pc, #156]	@ (8009d50 <_printf_i+0x238>)
 8009cb4:	e7e9      	b.n	8009c8a <_printf_i+0x172>
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	f023 0320 	bic.w	r3, r3, #32
 8009cbc:	6023      	str	r3, [r4, #0]
 8009cbe:	e7f6      	b.n	8009cae <_printf_i+0x196>
 8009cc0:	4616      	mov	r6, r2
 8009cc2:	e7bd      	b.n	8009c40 <_printf_i+0x128>
 8009cc4:	6833      	ldr	r3, [r6, #0]
 8009cc6:	6825      	ldr	r5, [r4, #0]
 8009cc8:	6961      	ldr	r1, [r4, #20]
 8009cca:	1d18      	adds	r0, r3, #4
 8009ccc:	6030      	str	r0, [r6, #0]
 8009cce:	062e      	lsls	r6, r5, #24
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	d501      	bpl.n	8009cd8 <_printf_i+0x1c0>
 8009cd4:	6019      	str	r1, [r3, #0]
 8009cd6:	e002      	b.n	8009cde <_printf_i+0x1c6>
 8009cd8:	0668      	lsls	r0, r5, #25
 8009cda:	d5fb      	bpl.n	8009cd4 <_printf_i+0x1bc>
 8009cdc:	8019      	strh	r1, [r3, #0]
 8009cde:	2300      	movs	r3, #0
 8009ce0:	6123      	str	r3, [r4, #16]
 8009ce2:	4616      	mov	r6, r2
 8009ce4:	e7bc      	b.n	8009c60 <_printf_i+0x148>
 8009ce6:	6833      	ldr	r3, [r6, #0]
 8009ce8:	1d1a      	adds	r2, r3, #4
 8009cea:	6032      	str	r2, [r6, #0]
 8009cec:	681e      	ldr	r6, [r3, #0]
 8009cee:	6862      	ldr	r2, [r4, #4]
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f7f6 fa94 	bl	8000220 <memchr>
 8009cf8:	b108      	cbz	r0, 8009cfe <_printf_i+0x1e6>
 8009cfa:	1b80      	subs	r0, r0, r6
 8009cfc:	6060      	str	r0, [r4, #4]
 8009cfe:	6863      	ldr	r3, [r4, #4]
 8009d00:	6123      	str	r3, [r4, #16]
 8009d02:	2300      	movs	r3, #0
 8009d04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d08:	e7aa      	b.n	8009c60 <_printf_i+0x148>
 8009d0a:	6923      	ldr	r3, [r4, #16]
 8009d0c:	4632      	mov	r2, r6
 8009d0e:	4649      	mov	r1, r9
 8009d10:	4640      	mov	r0, r8
 8009d12:	47d0      	blx	sl
 8009d14:	3001      	adds	r0, #1
 8009d16:	d0ad      	beq.n	8009c74 <_printf_i+0x15c>
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	079b      	lsls	r3, r3, #30
 8009d1c:	d413      	bmi.n	8009d46 <_printf_i+0x22e>
 8009d1e:	68e0      	ldr	r0, [r4, #12]
 8009d20:	9b03      	ldr	r3, [sp, #12]
 8009d22:	4298      	cmp	r0, r3
 8009d24:	bfb8      	it	lt
 8009d26:	4618      	movlt	r0, r3
 8009d28:	e7a6      	b.n	8009c78 <_printf_i+0x160>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4632      	mov	r2, r6
 8009d2e:	4649      	mov	r1, r9
 8009d30:	4640      	mov	r0, r8
 8009d32:	47d0      	blx	sl
 8009d34:	3001      	adds	r0, #1
 8009d36:	d09d      	beq.n	8009c74 <_printf_i+0x15c>
 8009d38:	3501      	adds	r5, #1
 8009d3a:	68e3      	ldr	r3, [r4, #12]
 8009d3c:	9903      	ldr	r1, [sp, #12]
 8009d3e:	1a5b      	subs	r3, r3, r1
 8009d40:	42ab      	cmp	r3, r5
 8009d42:	dcf2      	bgt.n	8009d2a <_printf_i+0x212>
 8009d44:	e7eb      	b.n	8009d1e <_printf_i+0x206>
 8009d46:	2500      	movs	r5, #0
 8009d48:	f104 0619 	add.w	r6, r4, #25
 8009d4c:	e7f5      	b.n	8009d3a <_printf_i+0x222>
 8009d4e:	bf00      	nop
 8009d50:	0800de4a 	.word	0x0800de4a
 8009d54:	0800de5b 	.word	0x0800de5b

08009d58 <_scanf_float>:
 8009d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5c:	b087      	sub	sp, #28
 8009d5e:	4617      	mov	r7, r2
 8009d60:	9303      	str	r3, [sp, #12]
 8009d62:	688b      	ldr	r3, [r1, #8]
 8009d64:	1e5a      	subs	r2, r3, #1
 8009d66:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009d6a:	bf81      	itttt	hi
 8009d6c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009d70:	eb03 0b05 	addhi.w	fp, r3, r5
 8009d74:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009d78:	608b      	strhi	r3, [r1, #8]
 8009d7a:	680b      	ldr	r3, [r1, #0]
 8009d7c:	460a      	mov	r2, r1
 8009d7e:	f04f 0500 	mov.w	r5, #0
 8009d82:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009d86:	f842 3b1c 	str.w	r3, [r2], #28
 8009d8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009d8e:	4680      	mov	r8, r0
 8009d90:	460c      	mov	r4, r1
 8009d92:	bf98      	it	ls
 8009d94:	f04f 0b00 	movls.w	fp, #0
 8009d98:	9201      	str	r2, [sp, #4]
 8009d9a:	4616      	mov	r6, r2
 8009d9c:	46aa      	mov	sl, r5
 8009d9e:	46a9      	mov	r9, r5
 8009da0:	9502      	str	r5, [sp, #8]
 8009da2:	68a2      	ldr	r2, [r4, #8]
 8009da4:	b152      	cbz	r2, 8009dbc <_scanf_float+0x64>
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	2b4e      	cmp	r3, #78	@ 0x4e
 8009dac:	d864      	bhi.n	8009e78 <_scanf_float+0x120>
 8009dae:	2b40      	cmp	r3, #64	@ 0x40
 8009db0:	d83c      	bhi.n	8009e2c <_scanf_float+0xd4>
 8009db2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009db6:	b2c8      	uxtb	r0, r1
 8009db8:	280e      	cmp	r0, #14
 8009dba:	d93a      	bls.n	8009e32 <_scanf_float+0xda>
 8009dbc:	f1b9 0f00 	cmp.w	r9, #0
 8009dc0:	d003      	beq.n	8009dca <_scanf_float+0x72>
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dce:	f1ba 0f01 	cmp.w	sl, #1
 8009dd2:	f200 8117 	bhi.w	800a004 <_scanf_float+0x2ac>
 8009dd6:	9b01      	ldr	r3, [sp, #4]
 8009dd8:	429e      	cmp	r6, r3
 8009dda:	f200 8108 	bhi.w	8009fee <_scanf_float+0x296>
 8009dde:	2001      	movs	r0, #1
 8009de0:	b007      	add	sp, #28
 8009de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009dea:	2a0d      	cmp	r2, #13
 8009dec:	d8e6      	bhi.n	8009dbc <_scanf_float+0x64>
 8009dee:	a101      	add	r1, pc, #4	@ (adr r1, 8009df4 <_scanf_float+0x9c>)
 8009df0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009df4:	08009f3b 	.word	0x08009f3b
 8009df8:	08009dbd 	.word	0x08009dbd
 8009dfc:	08009dbd 	.word	0x08009dbd
 8009e00:	08009dbd 	.word	0x08009dbd
 8009e04:	08009f9b 	.word	0x08009f9b
 8009e08:	08009f73 	.word	0x08009f73
 8009e0c:	08009dbd 	.word	0x08009dbd
 8009e10:	08009dbd 	.word	0x08009dbd
 8009e14:	08009f49 	.word	0x08009f49
 8009e18:	08009dbd 	.word	0x08009dbd
 8009e1c:	08009dbd 	.word	0x08009dbd
 8009e20:	08009dbd 	.word	0x08009dbd
 8009e24:	08009dbd 	.word	0x08009dbd
 8009e28:	08009f01 	.word	0x08009f01
 8009e2c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009e30:	e7db      	b.n	8009dea <_scanf_float+0x92>
 8009e32:	290e      	cmp	r1, #14
 8009e34:	d8c2      	bhi.n	8009dbc <_scanf_float+0x64>
 8009e36:	a001      	add	r0, pc, #4	@ (adr r0, 8009e3c <_scanf_float+0xe4>)
 8009e38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009e3c:	08009ef1 	.word	0x08009ef1
 8009e40:	08009dbd 	.word	0x08009dbd
 8009e44:	08009ef1 	.word	0x08009ef1
 8009e48:	08009f87 	.word	0x08009f87
 8009e4c:	08009dbd 	.word	0x08009dbd
 8009e50:	08009e99 	.word	0x08009e99
 8009e54:	08009ed7 	.word	0x08009ed7
 8009e58:	08009ed7 	.word	0x08009ed7
 8009e5c:	08009ed7 	.word	0x08009ed7
 8009e60:	08009ed7 	.word	0x08009ed7
 8009e64:	08009ed7 	.word	0x08009ed7
 8009e68:	08009ed7 	.word	0x08009ed7
 8009e6c:	08009ed7 	.word	0x08009ed7
 8009e70:	08009ed7 	.word	0x08009ed7
 8009e74:	08009ed7 	.word	0x08009ed7
 8009e78:	2b6e      	cmp	r3, #110	@ 0x6e
 8009e7a:	d809      	bhi.n	8009e90 <_scanf_float+0x138>
 8009e7c:	2b60      	cmp	r3, #96	@ 0x60
 8009e7e:	d8b2      	bhi.n	8009de6 <_scanf_float+0x8e>
 8009e80:	2b54      	cmp	r3, #84	@ 0x54
 8009e82:	d07b      	beq.n	8009f7c <_scanf_float+0x224>
 8009e84:	2b59      	cmp	r3, #89	@ 0x59
 8009e86:	d199      	bne.n	8009dbc <_scanf_float+0x64>
 8009e88:	2d07      	cmp	r5, #7
 8009e8a:	d197      	bne.n	8009dbc <_scanf_float+0x64>
 8009e8c:	2508      	movs	r5, #8
 8009e8e:	e02c      	b.n	8009eea <_scanf_float+0x192>
 8009e90:	2b74      	cmp	r3, #116	@ 0x74
 8009e92:	d073      	beq.n	8009f7c <_scanf_float+0x224>
 8009e94:	2b79      	cmp	r3, #121	@ 0x79
 8009e96:	e7f6      	b.n	8009e86 <_scanf_float+0x12e>
 8009e98:	6821      	ldr	r1, [r4, #0]
 8009e9a:	05c8      	lsls	r0, r1, #23
 8009e9c:	d51b      	bpl.n	8009ed6 <_scanf_float+0x17e>
 8009e9e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009ea2:	6021      	str	r1, [r4, #0]
 8009ea4:	f109 0901 	add.w	r9, r9, #1
 8009ea8:	f1bb 0f00 	cmp.w	fp, #0
 8009eac:	d003      	beq.n	8009eb6 <_scanf_float+0x15e>
 8009eae:	3201      	adds	r2, #1
 8009eb0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009eb4:	60a2      	str	r2, [r4, #8]
 8009eb6:	68a3      	ldr	r3, [r4, #8]
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	60a3      	str	r3, [r4, #8]
 8009ebc:	6923      	ldr	r3, [r4, #16]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	6123      	str	r3, [r4, #16]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	607b      	str	r3, [r7, #4]
 8009eca:	f340 8087 	ble.w	8009fdc <_scanf_float+0x284>
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	603b      	str	r3, [r7, #0]
 8009ed4:	e765      	b.n	8009da2 <_scanf_float+0x4a>
 8009ed6:	eb1a 0105 	adds.w	r1, sl, r5
 8009eda:	f47f af6f 	bne.w	8009dbc <_scanf_float+0x64>
 8009ede:	6822      	ldr	r2, [r4, #0]
 8009ee0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009ee4:	6022      	str	r2, [r4, #0]
 8009ee6:	460d      	mov	r5, r1
 8009ee8:	468a      	mov	sl, r1
 8009eea:	f806 3b01 	strb.w	r3, [r6], #1
 8009eee:	e7e2      	b.n	8009eb6 <_scanf_float+0x15e>
 8009ef0:	6822      	ldr	r2, [r4, #0]
 8009ef2:	0610      	lsls	r0, r2, #24
 8009ef4:	f57f af62 	bpl.w	8009dbc <_scanf_float+0x64>
 8009ef8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009efc:	6022      	str	r2, [r4, #0]
 8009efe:	e7f4      	b.n	8009eea <_scanf_float+0x192>
 8009f00:	f1ba 0f00 	cmp.w	sl, #0
 8009f04:	d10e      	bne.n	8009f24 <_scanf_float+0x1cc>
 8009f06:	f1b9 0f00 	cmp.w	r9, #0
 8009f0a:	d10e      	bne.n	8009f2a <_scanf_float+0x1d2>
 8009f0c:	6822      	ldr	r2, [r4, #0]
 8009f0e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009f12:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009f16:	d108      	bne.n	8009f2a <_scanf_float+0x1d2>
 8009f18:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009f1c:	6022      	str	r2, [r4, #0]
 8009f1e:	f04f 0a01 	mov.w	sl, #1
 8009f22:	e7e2      	b.n	8009eea <_scanf_float+0x192>
 8009f24:	f1ba 0f02 	cmp.w	sl, #2
 8009f28:	d055      	beq.n	8009fd6 <_scanf_float+0x27e>
 8009f2a:	2d01      	cmp	r5, #1
 8009f2c:	d002      	beq.n	8009f34 <_scanf_float+0x1dc>
 8009f2e:	2d04      	cmp	r5, #4
 8009f30:	f47f af44 	bne.w	8009dbc <_scanf_float+0x64>
 8009f34:	3501      	adds	r5, #1
 8009f36:	b2ed      	uxtb	r5, r5
 8009f38:	e7d7      	b.n	8009eea <_scanf_float+0x192>
 8009f3a:	f1ba 0f01 	cmp.w	sl, #1
 8009f3e:	f47f af3d 	bne.w	8009dbc <_scanf_float+0x64>
 8009f42:	f04f 0a02 	mov.w	sl, #2
 8009f46:	e7d0      	b.n	8009eea <_scanf_float+0x192>
 8009f48:	b97d      	cbnz	r5, 8009f6a <_scanf_float+0x212>
 8009f4a:	f1b9 0f00 	cmp.w	r9, #0
 8009f4e:	f47f af38 	bne.w	8009dc2 <_scanf_float+0x6a>
 8009f52:	6822      	ldr	r2, [r4, #0]
 8009f54:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009f58:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009f5c:	f040 8108 	bne.w	800a170 <_scanf_float+0x418>
 8009f60:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009f64:	6022      	str	r2, [r4, #0]
 8009f66:	2501      	movs	r5, #1
 8009f68:	e7bf      	b.n	8009eea <_scanf_float+0x192>
 8009f6a:	2d03      	cmp	r5, #3
 8009f6c:	d0e2      	beq.n	8009f34 <_scanf_float+0x1dc>
 8009f6e:	2d05      	cmp	r5, #5
 8009f70:	e7de      	b.n	8009f30 <_scanf_float+0x1d8>
 8009f72:	2d02      	cmp	r5, #2
 8009f74:	f47f af22 	bne.w	8009dbc <_scanf_float+0x64>
 8009f78:	2503      	movs	r5, #3
 8009f7a:	e7b6      	b.n	8009eea <_scanf_float+0x192>
 8009f7c:	2d06      	cmp	r5, #6
 8009f7e:	f47f af1d 	bne.w	8009dbc <_scanf_float+0x64>
 8009f82:	2507      	movs	r5, #7
 8009f84:	e7b1      	b.n	8009eea <_scanf_float+0x192>
 8009f86:	6822      	ldr	r2, [r4, #0]
 8009f88:	0591      	lsls	r1, r2, #22
 8009f8a:	f57f af17 	bpl.w	8009dbc <_scanf_float+0x64>
 8009f8e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009f92:	6022      	str	r2, [r4, #0]
 8009f94:	f8cd 9008 	str.w	r9, [sp, #8]
 8009f98:	e7a7      	b.n	8009eea <_scanf_float+0x192>
 8009f9a:	6822      	ldr	r2, [r4, #0]
 8009f9c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009fa0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009fa4:	d006      	beq.n	8009fb4 <_scanf_float+0x25c>
 8009fa6:	0550      	lsls	r0, r2, #21
 8009fa8:	f57f af08 	bpl.w	8009dbc <_scanf_float+0x64>
 8009fac:	f1b9 0f00 	cmp.w	r9, #0
 8009fb0:	f000 80de 	beq.w	800a170 <_scanf_float+0x418>
 8009fb4:	0591      	lsls	r1, r2, #22
 8009fb6:	bf58      	it	pl
 8009fb8:	9902      	ldrpl	r1, [sp, #8]
 8009fba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009fbe:	bf58      	it	pl
 8009fc0:	eba9 0101 	subpl.w	r1, r9, r1
 8009fc4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009fc8:	bf58      	it	pl
 8009fca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009fce:	6022      	str	r2, [r4, #0]
 8009fd0:	f04f 0900 	mov.w	r9, #0
 8009fd4:	e789      	b.n	8009eea <_scanf_float+0x192>
 8009fd6:	f04f 0a03 	mov.w	sl, #3
 8009fda:	e786      	b.n	8009eea <_scanf_float+0x192>
 8009fdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009fe0:	4639      	mov	r1, r7
 8009fe2:	4640      	mov	r0, r8
 8009fe4:	4798      	blx	r3
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	f43f aedb 	beq.w	8009da2 <_scanf_float+0x4a>
 8009fec:	e6e6      	b.n	8009dbc <_scanf_float+0x64>
 8009fee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ff2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ff6:	463a      	mov	r2, r7
 8009ff8:	4640      	mov	r0, r8
 8009ffa:	4798      	blx	r3
 8009ffc:	6923      	ldr	r3, [r4, #16]
 8009ffe:	3b01      	subs	r3, #1
 800a000:	6123      	str	r3, [r4, #16]
 800a002:	e6e8      	b.n	8009dd6 <_scanf_float+0x7e>
 800a004:	1e6b      	subs	r3, r5, #1
 800a006:	2b06      	cmp	r3, #6
 800a008:	d824      	bhi.n	800a054 <_scanf_float+0x2fc>
 800a00a:	2d02      	cmp	r5, #2
 800a00c:	d836      	bhi.n	800a07c <_scanf_float+0x324>
 800a00e:	9b01      	ldr	r3, [sp, #4]
 800a010:	429e      	cmp	r6, r3
 800a012:	f67f aee4 	bls.w	8009dde <_scanf_float+0x86>
 800a016:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a01a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a01e:	463a      	mov	r2, r7
 800a020:	4640      	mov	r0, r8
 800a022:	4798      	blx	r3
 800a024:	6923      	ldr	r3, [r4, #16]
 800a026:	3b01      	subs	r3, #1
 800a028:	6123      	str	r3, [r4, #16]
 800a02a:	e7f0      	b.n	800a00e <_scanf_float+0x2b6>
 800a02c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a030:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a034:	463a      	mov	r2, r7
 800a036:	4640      	mov	r0, r8
 800a038:	4798      	blx	r3
 800a03a:	6923      	ldr	r3, [r4, #16]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	6123      	str	r3, [r4, #16]
 800a040:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a044:	fa5f fa8a 	uxtb.w	sl, sl
 800a048:	f1ba 0f02 	cmp.w	sl, #2
 800a04c:	d1ee      	bne.n	800a02c <_scanf_float+0x2d4>
 800a04e:	3d03      	subs	r5, #3
 800a050:	b2ed      	uxtb	r5, r5
 800a052:	1b76      	subs	r6, r6, r5
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	05da      	lsls	r2, r3, #23
 800a058:	d530      	bpl.n	800a0bc <_scanf_float+0x364>
 800a05a:	055b      	lsls	r3, r3, #21
 800a05c:	d511      	bpl.n	800a082 <_scanf_float+0x32a>
 800a05e:	9b01      	ldr	r3, [sp, #4]
 800a060:	429e      	cmp	r6, r3
 800a062:	f67f aebc 	bls.w	8009dde <_scanf_float+0x86>
 800a066:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a06a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a06e:	463a      	mov	r2, r7
 800a070:	4640      	mov	r0, r8
 800a072:	4798      	blx	r3
 800a074:	6923      	ldr	r3, [r4, #16]
 800a076:	3b01      	subs	r3, #1
 800a078:	6123      	str	r3, [r4, #16]
 800a07a:	e7f0      	b.n	800a05e <_scanf_float+0x306>
 800a07c:	46aa      	mov	sl, r5
 800a07e:	46b3      	mov	fp, r6
 800a080:	e7de      	b.n	800a040 <_scanf_float+0x2e8>
 800a082:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a086:	6923      	ldr	r3, [r4, #16]
 800a088:	2965      	cmp	r1, #101	@ 0x65
 800a08a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a08e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a092:	6123      	str	r3, [r4, #16]
 800a094:	d00c      	beq.n	800a0b0 <_scanf_float+0x358>
 800a096:	2945      	cmp	r1, #69	@ 0x45
 800a098:	d00a      	beq.n	800a0b0 <_scanf_float+0x358>
 800a09a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a09e:	463a      	mov	r2, r7
 800a0a0:	4640      	mov	r0, r8
 800a0a2:	4798      	blx	r3
 800a0a4:	6923      	ldr	r3, [r4, #16]
 800a0a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	1eb5      	subs	r5, r6, #2
 800a0ae:	6123      	str	r3, [r4, #16]
 800a0b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0b4:	463a      	mov	r2, r7
 800a0b6:	4640      	mov	r0, r8
 800a0b8:	4798      	blx	r3
 800a0ba:	462e      	mov	r6, r5
 800a0bc:	6822      	ldr	r2, [r4, #0]
 800a0be:	f012 0210 	ands.w	r2, r2, #16
 800a0c2:	d001      	beq.n	800a0c8 <_scanf_float+0x370>
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	e68b      	b.n	8009de0 <_scanf_float+0x88>
 800a0c8:	7032      	strb	r2, [r6, #0]
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a0d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0d4:	d11c      	bne.n	800a110 <_scanf_float+0x3b8>
 800a0d6:	9b02      	ldr	r3, [sp, #8]
 800a0d8:	454b      	cmp	r3, r9
 800a0da:	eba3 0209 	sub.w	r2, r3, r9
 800a0de:	d123      	bne.n	800a128 <_scanf_float+0x3d0>
 800a0e0:	9901      	ldr	r1, [sp, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	4640      	mov	r0, r8
 800a0e6:	f002 fbf7 	bl	800c8d8 <_strtod_r>
 800a0ea:	9b03      	ldr	r3, [sp, #12]
 800a0ec:	6821      	ldr	r1, [r4, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f011 0f02 	tst.w	r1, #2
 800a0f4:	ec57 6b10 	vmov	r6, r7, d0
 800a0f8:	f103 0204 	add.w	r2, r3, #4
 800a0fc:	d01f      	beq.n	800a13e <_scanf_float+0x3e6>
 800a0fe:	9903      	ldr	r1, [sp, #12]
 800a100:	600a      	str	r2, [r1, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	e9c3 6700 	strd	r6, r7, [r3]
 800a108:	68e3      	ldr	r3, [r4, #12]
 800a10a:	3301      	adds	r3, #1
 800a10c:	60e3      	str	r3, [r4, #12]
 800a10e:	e7d9      	b.n	800a0c4 <_scanf_float+0x36c>
 800a110:	9b04      	ldr	r3, [sp, #16]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d0e4      	beq.n	800a0e0 <_scanf_float+0x388>
 800a116:	9905      	ldr	r1, [sp, #20]
 800a118:	230a      	movs	r3, #10
 800a11a:	3101      	adds	r1, #1
 800a11c:	4640      	mov	r0, r8
 800a11e:	f002 fc5b 	bl	800c9d8 <_strtol_r>
 800a122:	9b04      	ldr	r3, [sp, #16]
 800a124:	9e05      	ldr	r6, [sp, #20]
 800a126:	1ac2      	subs	r2, r0, r3
 800a128:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a12c:	429e      	cmp	r6, r3
 800a12e:	bf28      	it	cs
 800a130:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a134:	4910      	ldr	r1, [pc, #64]	@ (800a178 <_scanf_float+0x420>)
 800a136:	4630      	mov	r0, r6
 800a138:	f000 f8e4 	bl	800a304 <siprintf>
 800a13c:	e7d0      	b.n	800a0e0 <_scanf_float+0x388>
 800a13e:	f011 0f04 	tst.w	r1, #4
 800a142:	9903      	ldr	r1, [sp, #12]
 800a144:	600a      	str	r2, [r1, #0]
 800a146:	d1dc      	bne.n	800a102 <_scanf_float+0x3aa>
 800a148:	681d      	ldr	r5, [r3, #0]
 800a14a:	4632      	mov	r2, r6
 800a14c:	463b      	mov	r3, r7
 800a14e:	4630      	mov	r0, r6
 800a150:	4639      	mov	r1, r7
 800a152:	f7f6 fd13 	bl	8000b7c <__aeabi_dcmpun>
 800a156:	b128      	cbz	r0, 800a164 <_scanf_float+0x40c>
 800a158:	4808      	ldr	r0, [pc, #32]	@ (800a17c <_scanf_float+0x424>)
 800a15a:	f000 f9b7 	bl	800a4cc <nanf>
 800a15e:	ed85 0a00 	vstr	s0, [r5]
 800a162:	e7d1      	b.n	800a108 <_scanf_float+0x3b0>
 800a164:	4630      	mov	r0, r6
 800a166:	4639      	mov	r1, r7
 800a168:	f7f6 fd66 	bl	8000c38 <__aeabi_d2f>
 800a16c:	6028      	str	r0, [r5, #0]
 800a16e:	e7cb      	b.n	800a108 <_scanf_float+0x3b0>
 800a170:	f04f 0900 	mov.w	r9, #0
 800a174:	e629      	b.n	8009dca <_scanf_float+0x72>
 800a176:	bf00      	nop
 800a178:	0800de6c 	.word	0x0800de6c
 800a17c:	0800e205 	.word	0x0800e205

0800a180 <std>:
 800a180:	2300      	movs	r3, #0
 800a182:	b510      	push	{r4, lr}
 800a184:	4604      	mov	r4, r0
 800a186:	e9c0 3300 	strd	r3, r3, [r0]
 800a18a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a18e:	6083      	str	r3, [r0, #8]
 800a190:	8181      	strh	r1, [r0, #12]
 800a192:	6643      	str	r3, [r0, #100]	@ 0x64
 800a194:	81c2      	strh	r2, [r0, #14]
 800a196:	6183      	str	r3, [r0, #24]
 800a198:	4619      	mov	r1, r3
 800a19a:	2208      	movs	r2, #8
 800a19c:	305c      	adds	r0, #92	@ 0x5c
 800a19e:	f000 f914 	bl	800a3ca <memset>
 800a1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a1d8 <std+0x58>)
 800a1a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a1a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a1dc <std+0x5c>)
 800a1a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a1e0 <std+0x60>)
 800a1ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a1ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a1e4 <std+0x64>)
 800a1b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a1b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a1e8 <std+0x68>)
 800a1b4:	6224      	str	r4, [r4, #32]
 800a1b6:	429c      	cmp	r4, r3
 800a1b8:	d006      	beq.n	800a1c8 <std+0x48>
 800a1ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a1be:	4294      	cmp	r4, r2
 800a1c0:	d002      	beq.n	800a1c8 <std+0x48>
 800a1c2:	33d0      	adds	r3, #208	@ 0xd0
 800a1c4:	429c      	cmp	r4, r3
 800a1c6:	d105      	bne.n	800a1d4 <std+0x54>
 800a1c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1d0:	f000 b978 	b.w	800a4c4 <__retarget_lock_init_recursive>
 800a1d4:	bd10      	pop	{r4, pc}
 800a1d6:	bf00      	nop
 800a1d8:	0800a345 	.word	0x0800a345
 800a1dc:	0800a367 	.word	0x0800a367
 800a1e0:	0800a39f 	.word	0x0800a39f
 800a1e4:	0800a3c3 	.word	0x0800a3c3
 800a1e8:	200026f8 	.word	0x200026f8

0800a1ec <stdio_exit_handler>:
 800a1ec:	4a02      	ldr	r2, [pc, #8]	@ (800a1f8 <stdio_exit_handler+0xc>)
 800a1ee:	4903      	ldr	r1, [pc, #12]	@ (800a1fc <stdio_exit_handler+0x10>)
 800a1f0:	4803      	ldr	r0, [pc, #12]	@ (800a200 <stdio_exit_handler+0x14>)
 800a1f2:	f000 b869 	b.w	800a2c8 <_fwalk_sglue>
 800a1f6:	bf00      	nop
 800a1f8:	2000000c 	.word	0x2000000c
 800a1fc:	0800cd95 	.word	0x0800cd95
 800a200:	2000001c 	.word	0x2000001c

0800a204 <cleanup_stdio>:
 800a204:	6841      	ldr	r1, [r0, #4]
 800a206:	4b0c      	ldr	r3, [pc, #48]	@ (800a238 <cleanup_stdio+0x34>)
 800a208:	4299      	cmp	r1, r3
 800a20a:	b510      	push	{r4, lr}
 800a20c:	4604      	mov	r4, r0
 800a20e:	d001      	beq.n	800a214 <cleanup_stdio+0x10>
 800a210:	f002 fdc0 	bl	800cd94 <_fflush_r>
 800a214:	68a1      	ldr	r1, [r4, #8]
 800a216:	4b09      	ldr	r3, [pc, #36]	@ (800a23c <cleanup_stdio+0x38>)
 800a218:	4299      	cmp	r1, r3
 800a21a:	d002      	beq.n	800a222 <cleanup_stdio+0x1e>
 800a21c:	4620      	mov	r0, r4
 800a21e:	f002 fdb9 	bl	800cd94 <_fflush_r>
 800a222:	68e1      	ldr	r1, [r4, #12]
 800a224:	4b06      	ldr	r3, [pc, #24]	@ (800a240 <cleanup_stdio+0x3c>)
 800a226:	4299      	cmp	r1, r3
 800a228:	d004      	beq.n	800a234 <cleanup_stdio+0x30>
 800a22a:	4620      	mov	r0, r4
 800a22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a230:	f002 bdb0 	b.w	800cd94 <_fflush_r>
 800a234:	bd10      	pop	{r4, pc}
 800a236:	bf00      	nop
 800a238:	200026f8 	.word	0x200026f8
 800a23c:	20002760 	.word	0x20002760
 800a240:	200027c8 	.word	0x200027c8

0800a244 <global_stdio_init.part.0>:
 800a244:	b510      	push	{r4, lr}
 800a246:	4b0b      	ldr	r3, [pc, #44]	@ (800a274 <global_stdio_init.part.0+0x30>)
 800a248:	4c0b      	ldr	r4, [pc, #44]	@ (800a278 <global_stdio_init.part.0+0x34>)
 800a24a:	4a0c      	ldr	r2, [pc, #48]	@ (800a27c <global_stdio_init.part.0+0x38>)
 800a24c:	601a      	str	r2, [r3, #0]
 800a24e:	4620      	mov	r0, r4
 800a250:	2200      	movs	r2, #0
 800a252:	2104      	movs	r1, #4
 800a254:	f7ff ff94 	bl	800a180 <std>
 800a258:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a25c:	2201      	movs	r2, #1
 800a25e:	2109      	movs	r1, #9
 800a260:	f7ff ff8e 	bl	800a180 <std>
 800a264:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a268:	2202      	movs	r2, #2
 800a26a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a26e:	2112      	movs	r1, #18
 800a270:	f7ff bf86 	b.w	800a180 <std>
 800a274:	20002830 	.word	0x20002830
 800a278:	200026f8 	.word	0x200026f8
 800a27c:	0800a1ed 	.word	0x0800a1ed

0800a280 <__sfp_lock_acquire>:
 800a280:	4801      	ldr	r0, [pc, #4]	@ (800a288 <__sfp_lock_acquire+0x8>)
 800a282:	f000 b920 	b.w	800a4c6 <__retarget_lock_acquire_recursive>
 800a286:	bf00      	nop
 800a288:	20002839 	.word	0x20002839

0800a28c <__sfp_lock_release>:
 800a28c:	4801      	ldr	r0, [pc, #4]	@ (800a294 <__sfp_lock_release+0x8>)
 800a28e:	f000 b91b 	b.w	800a4c8 <__retarget_lock_release_recursive>
 800a292:	bf00      	nop
 800a294:	20002839 	.word	0x20002839

0800a298 <__sinit>:
 800a298:	b510      	push	{r4, lr}
 800a29a:	4604      	mov	r4, r0
 800a29c:	f7ff fff0 	bl	800a280 <__sfp_lock_acquire>
 800a2a0:	6a23      	ldr	r3, [r4, #32]
 800a2a2:	b11b      	cbz	r3, 800a2ac <__sinit+0x14>
 800a2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2a8:	f7ff bff0 	b.w	800a28c <__sfp_lock_release>
 800a2ac:	4b04      	ldr	r3, [pc, #16]	@ (800a2c0 <__sinit+0x28>)
 800a2ae:	6223      	str	r3, [r4, #32]
 800a2b0:	4b04      	ldr	r3, [pc, #16]	@ (800a2c4 <__sinit+0x2c>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1f5      	bne.n	800a2a4 <__sinit+0xc>
 800a2b8:	f7ff ffc4 	bl	800a244 <global_stdio_init.part.0>
 800a2bc:	e7f2      	b.n	800a2a4 <__sinit+0xc>
 800a2be:	bf00      	nop
 800a2c0:	0800a205 	.word	0x0800a205
 800a2c4:	20002830 	.word	0x20002830

0800a2c8 <_fwalk_sglue>:
 800a2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2cc:	4607      	mov	r7, r0
 800a2ce:	4688      	mov	r8, r1
 800a2d0:	4614      	mov	r4, r2
 800a2d2:	2600      	movs	r6, #0
 800a2d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2d8:	f1b9 0901 	subs.w	r9, r9, #1
 800a2dc:	d505      	bpl.n	800a2ea <_fwalk_sglue+0x22>
 800a2de:	6824      	ldr	r4, [r4, #0]
 800a2e0:	2c00      	cmp	r4, #0
 800a2e2:	d1f7      	bne.n	800a2d4 <_fwalk_sglue+0xc>
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ea:	89ab      	ldrh	r3, [r5, #12]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d907      	bls.n	800a300 <_fwalk_sglue+0x38>
 800a2f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	d003      	beq.n	800a300 <_fwalk_sglue+0x38>
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	47c0      	blx	r8
 800a2fe:	4306      	orrs	r6, r0
 800a300:	3568      	adds	r5, #104	@ 0x68
 800a302:	e7e9      	b.n	800a2d8 <_fwalk_sglue+0x10>

0800a304 <siprintf>:
 800a304:	b40e      	push	{r1, r2, r3}
 800a306:	b500      	push	{lr}
 800a308:	b09c      	sub	sp, #112	@ 0x70
 800a30a:	ab1d      	add	r3, sp, #116	@ 0x74
 800a30c:	9002      	str	r0, [sp, #8]
 800a30e:	9006      	str	r0, [sp, #24]
 800a310:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a314:	4809      	ldr	r0, [pc, #36]	@ (800a33c <siprintf+0x38>)
 800a316:	9107      	str	r1, [sp, #28]
 800a318:	9104      	str	r1, [sp, #16]
 800a31a:	4909      	ldr	r1, [pc, #36]	@ (800a340 <siprintf+0x3c>)
 800a31c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a320:	9105      	str	r1, [sp, #20]
 800a322:	6800      	ldr	r0, [r0, #0]
 800a324:	9301      	str	r3, [sp, #4]
 800a326:	a902      	add	r1, sp, #8
 800a328:	f002 fbb4 	bl	800ca94 <_svfiprintf_r>
 800a32c:	9b02      	ldr	r3, [sp, #8]
 800a32e:	2200      	movs	r2, #0
 800a330:	701a      	strb	r2, [r3, #0]
 800a332:	b01c      	add	sp, #112	@ 0x70
 800a334:	f85d eb04 	ldr.w	lr, [sp], #4
 800a338:	b003      	add	sp, #12
 800a33a:	4770      	bx	lr
 800a33c:	20000018 	.word	0x20000018
 800a340:	ffff0208 	.word	0xffff0208

0800a344 <__sread>:
 800a344:	b510      	push	{r4, lr}
 800a346:	460c      	mov	r4, r1
 800a348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a34c:	f000 f86c 	bl	800a428 <_read_r>
 800a350:	2800      	cmp	r0, #0
 800a352:	bfab      	itete	ge
 800a354:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a356:	89a3      	ldrhlt	r3, [r4, #12]
 800a358:	181b      	addge	r3, r3, r0
 800a35a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a35e:	bfac      	ite	ge
 800a360:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a362:	81a3      	strhlt	r3, [r4, #12]
 800a364:	bd10      	pop	{r4, pc}

0800a366 <__swrite>:
 800a366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a36a:	461f      	mov	r7, r3
 800a36c:	898b      	ldrh	r3, [r1, #12]
 800a36e:	05db      	lsls	r3, r3, #23
 800a370:	4605      	mov	r5, r0
 800a372:	460c      	mov	r4, r1
 800a374:	4616      	mov	r6, r2
 800a376:	d505      	bpl.n	800a384 <__swrite+0x1e>
 800a378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a37c:	2302      	movs	r3, #2
 800a37e:	2200      	movs	r2, #0
 800a380:	f000 f840 	bl	800a404 <_lseek_r>
 800a384:	89a3      	ldrh	r3, [r4, #12]
 800a386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a38a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a38e:	81a3      	strh	r3, [r4, #12]
 800a390:	4632      	mov	r2, r6
 800a392:	463b      	mov	r3, r7
 800a394:	4628      	mov	r0, r5
 800a396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a39a:	f000 b857 	b.w	800a44c <_write_r>

0800a39e <__sseek>:
 800a39e:	b510      	push	{r4, lr}
 800a3a0:	460c      	mov	r4, r1
 800a3a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a6:	f000 f82d 	bl	800a404 <_lseek_r>
 800a3aa:	1c43      	adds	r3, r0, #1
 800a3ac:	89a3      	ldrh	r3, [r4, #12]
 800a3ae:	bf15      	itete	ne
 800a3b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a3b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a3b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a3ba:	81a3      	strheq	r3, [r4, #12]
 800a3bc:	bf18      	it	ne
 800a3be:	81a3      	strhne	r3, [r4, #12]
 800a3c0:	bd10      	pop	{r4, pc}

0800a3c2 <__sclose>:
 800a3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c6:	f000 b80d 	b.w	800a3e4 <_close_r>

0800a3ca <memset>:
 800a3ca:	4402      	add	r2, r0
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d100      	bne.n	800a3d4 <memset+0xa>
 800a3d2:	4770      	bx	lr
 800a3d4:	f803 1b01 	strb.w	r1, [r3], #1
 800a3d8:	e7f9      	b.n	800a3ce <memset+0x4>
	...

0800a3dc <_localeconv_r>:
 800a3dc:	4800      	ldr	r0, [pc, #0]	@ (800a3e0 <_localeconv_r+0x4>)
 800a3de:	4770      	bx	lr
 800a3e0:	20000158 	.word	0x20000158

0800a3e4 <_close_r>:
 800a3e4:	b538      	push	{r3, r4, r5, lr}
 800a3e6:	4d06      	ldr	r5, [pc, #24]	@ (800a400 <_close_r+0x1c>)
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	4608      	mov	r0, r1
 800a3ee:	602b      	str	r3, [r5, #0]
 800a3f0:	f7f8 fc74 	bl	8002cdc <_close>
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	d102      	bne.n	800a3fe <_close_r+0x1a>
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	b103      	cbz	r3, 800a3fe <_close_r+0x1a>
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	bd38      	pop	{r3, r4, r5, pc}
 800a400:	20002834 	.word	0x20002834

0800a404 <_lseek_r>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4d07      	ldr	r5, [pc, #28]	@ (800a424 <_lseek_r+0x20>)
 800a408:	4604      	mov	r4, r0
 800a40a:	4608      	mov	r0, r1
 800a40c:	4611      	mov	r1, r2
 800a40e:	2200      	movs	r2, #0
 800a410:	602a      	str	r2, [r5, #0]
 800a412:	461a      	mov	r2, r3
 800a414:	f7f8 fc89 	bl	8002d2a <_lseek>
 800a418:	1c43      	adds	r3, r0, #1
 800a41a:	d102      	bne.n	800a422 <_lseek_r+0x1e>
 800a41c:	682b      	ldr	r3, [r5, #0]
 800a41e:	b103      	cbz	r3, 800a422 <_lseek_r+0x1e>
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	bd38      	pop	{r3, r4, r5, pc}
 800a424:	20002834 	.word	0x20002834

0800a428 <_read_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	4d07      	ldr	r5, [pc, #28]	@ (800a448 <_read_r+0x20>)
 800a42c:	4604      	mov	r4, r0
 800a42e:	4608      	mov	r0, r1
 800a430:	4611      	mov	r1, r2
 800a432:	2200      	movs	r2, #0
 800a434:	602a      	str	r2, [r5, #0]
 800a436:	461a      	mov	r2, r3
 800a438:	f7f8 fc33 	bl	8002ca2 <_read>
 800a43c:	1c43      	adds	r3, r0, #1
 800a43e:	d102      	bne.n	800a446 <_read_r+0x1e>
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	b103      	cbz	r3, 800a446 <_read_r+0x1e>
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	bd38      	pop	{r3, r4, r5, pc}
 800a448:	20002834 	.word	0x20002834

0800a44c <_write_r>:
 800a44c:	b538      	push	{r3, r4, r5, lr}
 800a44e:	4d07      	ldr	r5, [pc, #28]	@ (800a46c <_write_r+0x20>)
 800a450:	4604      	mov	r4, r0
 800a452:	4608      	mov	r0, r1
 800a454:	4611      	mov	r1, r2
 800a456:	2200      	movs	r2, #0
 800a458:	602a      	str	r2, [r5, #0]
 800a45a:	461a      	mov	r2, r3
 800a45c:	f7f7 fdd8 	bl	8002010 <_write>
 800a460:	1c43      	adds	r3, r0, #1
 800a462:	d102      	bne.n	800a46a <_write_r+0x1e>
 800a464:	682b      	ldr	r3, [r5, #0]
 800a466:	b103      	cbz	r3, 800a46a <_write_r+0x1e>
 800a468:	6023      	str	r3, [r4, #0]
 800a46a:	bd38      	pop	{r3, r4, r5, pc}
 800a46c:	20002834 	.word	0x20002834

0800a470 <__errno>:
 800a470:	4b01      	ldr	r3, [pc, #4]	@ (800a478 <__errno+0x8>)
 800a472:	6818      	ldr	r0, [r3, #0]
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	20000018 	.word	0x20000018

0800a47c <__libc_init_array>:
 800a47c:	b570      	push	{r4, r5, r6, lr}
 800a47e:	4d0d      	ldr	r5, [pc, #52]	@ (800a4b4 <__libc_init_array+0x38>)
 800a480:	4c0d      	ldr	r4, [pc, #52]	@ (800a4b8 <__libc_init_array+0x3c>)
 800a482:	1b64      	subs	r4, r4, r5
 800a484:	10a4      	asrs	r4, r4, #2
 800a486:	2600      	movs	r6, #0
 800a488:	42a6      	cmp	r6, r4
 800a48a:	d109      	bne.n	800a4a0 <__libc_init_array+0x24>
 800a48c:	4d0b      	ldr	r5, [pc, #44]	@ (800a4bc <__libc_init_array+0x40>)
 800a48e:	4c0c      	ldr	r4, [pc, #48]	@ (800a4c0 <__libc_init_array+0x44>)
 800a490:	f003 fca4 	bl	800dddc <_init>
 800a494:	1b64      	subs	r4, r4, r5
 800a496:	10a4      	asrs	r4, r4, #2
 800a498:	2600      	movs	r6, #0
 800a49a:	42a6      	cmp	r6, r4
 800a49c:	d105      	bne.n	800a4aa <__libc_init_array+0x2e>
 800a49e:	bd70      	pop	{r4, r5, r6, pc}
 800a4a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4a4:	4798      	blx	r3
 800a4a6:	3601      	adds	r6, #1
 800a4a8:	e7ee      	b.n	800a488 <__libc_init_array+0xc>
 800a4aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ae:	4798      	blx	r3
 800a4b0:	3601      	adds	r6, #1
 800a4b2:	e7f2      	b.n	800a49a <__libc_init_array+0x1e>
 800a4b4:	0800e288 	.word	0x0800e288
 800a4b8:	0800e288 	.word	0x0800e288
 800a4bc:	0800e288 	.word	0x0800e288
 800a4c0:	0800e28c 	.word	0x0800e28c

0800a4c4 <__retarget_lock_init_recursive>:
 800a4c4:	4770      	bx	lr

0800a4c6 <__retarget_lock_acquire_recursive>:
 800a4c6:	4770      	bx	lr

0800a4c8 <__retarget_lock_release_recursive>:
 800a4c8:	4770      	bx	lr
	...

0800a4cc <nanf>:
 800a4cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a4d4 <nanf+0x8>
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	7fc00000 	.word	0x7fc00000

0800a4d8 <quorem>:
 800a4d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4dc:	6903      	ldr	r3, [r0, #16]
 800a4de:	690c      	ldr	r4, [r1, #16]
 800a4e0:	42a3      	cmp	r3, r4
 800a4e2:	4607      	mov	r7, r0
 800a4e4:	db7e      	blt.n	800a5e4 <quorem+0x10c>
 800a4e6:	3c01      	subs	r4, #1
 800a4e8:	f101 0814 	add.w	r8, r1, #20
 800a4ec:	00a3      	lsls	r3, r4, #2
 800a4ee:	f100 0514 	add.w	r5, r0, #20
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a502:	3301      	adds	r3, #1
 800a504:	429a      	cmp	r2, r3
 800a506:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a50a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a50e:	d32e      	bcc.n	800a56e <quorem+0x96>
 800a510:	f04f 0a00 	mov.w	sl, #0
 800a514:	46c4      	mov	ip, r8
 800a516:	46ae      	mov	lr, r5
 800a518:	46d3      	mov	fp, sl
 800a51a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a51e:	b298      	uxth	r0, r3
 800a520:	fb06 a000 	mla	r0, r6, r0, sl
 800a524:	0c02      	lsrs	r2, r0, #16
 800a526:	0c1b      	lsrs	r3, r3, #16
 800a528:	fb06 2303 	mla	r3, r6, r3, r2
 800a52c:	f8de 2000 	ldr.w	r2, [lr]
 800a530:	b280      	uxth	r0, r0
 800a532:	b292      	uxth	r2, r2
 800a534:	1a12      	subs	r2, r2, r0
 800a536:	445a      	add	r2, fp
 800a538:	f8de 0000 	ldr.w	r0, [lr]
 800a53c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a540:	b29b      	uxth	r3, r3
 800a542:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a546:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a54a:	b292      	uxth	r2, r2
 800a54c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a550:	45e1      	cmp	r9, ip
 800a552:	f84e 2b04 	str.w	r2, [lr], #4
 800a556:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a55a:	d2de      	bcs.n	800a51a <quorem+0x42>
 800a55c:	9b00      	ldr	r3, [sp, #0]
 800a55e:	58eb      	ldr	r3, [r5, r3]
 800a560:	b92b      	cbnz	r3, 800a56e <quorem+0x96>
 800a562:	9b01      	ldr	r3, [sp, #4]
 800a564:	3b04      	subs	r3, #4
 800a566:	429d      	cmp	r5, r3
 800a568:	461a      	mov	r2, r3
 800a56a:	d32f      	bcc.n	800a5cc <quorem+0xf4>
 800a56c:	613c      	str	r4, [r7, #16]
 800a56e:	4638      	mov	r0, r7
 800a570:	f001 f9c2 	bl	800b8f8 <__mcmp>
 800a574:	2800      	cmp	r0, #0
 800a576:	db25      	blt.n	800a5c4 <quorem+0xec>
 800a578:	4629      	mov	r1, r5
 800a57a:	2000      	movs	r0, #0
 800a57c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a580:	f8d1 c000 	ldr.w	ip, [r1]
 800a584:	fa1f fe82 	uxth.w	lr, r2
 800a588:	fa1f f38c 	uxth.w	r3, ip
 800a58c:	eba3 030e 	sub.w	r3, r3, lr
 800a590:	4403      	add	r3, r0
 800a592:	0c12      	lsrs	r2, r2, #16
 800a594:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a598:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5a2:	45c1      	cmp	r9, r8
 800a5a4:	f841 3b04 	str.w	r3, [r1], #4
 800a5a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a5ac:	d2e6      	bcs.n	800a57c <quorem+0xa4>
 800a5ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5b6:	b922      	cbnz	r2, 800a5c2 <quorem+0xea>
 800a5b8:	3b04      	subs	r3, #4
 800a5ba:	429d      	cmp	r5, r3
 800a5bc:	461a      	mov	r2, r3
 800a5be:	d30b      	bcc.n	800a5d8 <quorem+0x100>
 800a5c0:	613c      	str	r4, [r7, #16]
 800a5c2:	3601      	adds	r6, #1
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	b003      	add	sp, #12
 800a5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5cc:	6812      	ldr	r2, [r2, #0]
 800a5ce:	3b04      	subs	r3, #4
 800a5d0:	2a00      	cmp	r2, #0
 800a5d2:	d1cb      	bne.n	800a56c <quorem+0x94>
 800a5d4:	3c01      	subs	r4, #1
 800a5d6:	e7c6      	b.n	800a566 <quorem+0x8e>
 800a5d8:	6812      	ldr	r2, [r2, #0]
 800a5da:	3b04      	subs	r3, #4
 800a5dc:	2a00      	cmp	r2, #0
 800a5de:	d1ef      	bne.n	800a5c0 <quorem+0xe8>
 800a5e0:	3c01      	subs	r4, #1
 800a5e2:	e7ea      	b.n	800a5ba <quorem+0xe2>
 800a5e4:	2000      	movs	r0, #0
 800a5e6:	e7ee      	b.n	800a5c6 <quorem+0xee>

0800a5e8 <_dtoa_r>:
 800a5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ec:	69c7      	ldr	r7, [r0, #28]
 800a5ee:	b099      	sub	sp, #100	@ 0x64
 800a5f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a5f4:	ec55 4b10 	vmov	r4, r5, d0
 800a5f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a5fa:	9109      	str	r1, [sp, #36]	@ 0x24
 800a5fc:	4683      	mov	fp, r0
 800a5fe:	920e      	str	r2, [sp, #56]	@ 0x38
 800a600:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a602:	b97f      	cbnz	r7, 800a624 <_dtoa_r+0x3c>
 800a604:	2010      	movs	r0, #16
 800a606:	f000 fdfd 	bl	800b204 <malloc>
 800a60a:	4602      	mov	r2, r0
 800a60c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a610:	b920      	cbnz	r0, 800a61c <_dtoa_r+0x34>
 800a612:	4ba7      	ldr	r3, [pc, #668]	@ (800a8b0 <_dtoa_r+0x2c8>)
 800a614:	21ef      	movs	r1, #239	@ 0xef
 800a616:	48a7      	ldr	r0, [pc, #668]	@ (800a8b4 <_dtoa_r+0x2cc>)
 800a618:	f002 fc36 	bl	800ce88 <__assert_func>
 800a61c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a620:	6007      	str	r7, [r0, #0]
 800a622:	60c7      	str	r7, [r0, #12]
 800a624:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a628:	6819      	ldr	r1, [r3, #0]
 800a62a:	b159      	cbz	r1, 800a644 <_dtoa_r+0x5c>
 800a62c:	685a      	ldr	r2, [r3, #4]
 800a62e:	604a      	str	r2, [r1, #4]
 800a630:	2301      	movs	r3, #1
 800a632:	4093      	lsls	r3, r2
 800a634:	608b      	str	r3, [r1, #8]
 800a636:	4658      	mov	r0, fp
 800a638:	f000 feda 	bl	800b3f0 <_Bfree>
 800a63c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a640:	2200      	movs	r2, #0
 800a642:	601a      	str	r2, [r3, #0]
 800a644:	1e2b      	subs	r3, r5, #0
 800a646:	bfb9      	ittee	lt
 800a648:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a64c:	9303      	strlt	r3, [sp, #12]
 800a64e:	2300      	movge	r3, #0
 800a650:	6033      	strge	r3, [r6, #0]
 800a652:	9f03      	ldr	r7, [sp, #12]
 800a654:	4b98      	ldr	r3, [pc, #608]	@ (800a8b8 <_dtoa_r+0x2d0>)
 800a656:	bfbc      	itt	lt
 800a658:	2201      	movlt	r2, #1
 800a65a:	6032      	strlt	r2, [r6, #0]
 800a65c:	43bb      	bics	r3, r7
 800a65e:	d112      	bne.n	800a686 <_dtoa_r+0x9e>
 800a660:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a662:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a666:	6013      	str	r3, [r2, #0]
 800a668:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a66c:	4323      	orrs	r3, r4
 800a66e:	f000 854d 	beq.w	800b10c <_dtoa_r+0xb24>
 800a672:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a674:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a8cc <_dtoa_r+0x2e4>
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f000 854f 	beq.w	800b11c <_dtoa_r+0xb34>
 800a67e:	f10a 0303 	add.w	r3, sl, #3
 800a682:	f000 bd49 	b.w	800b118 <_dtoa_r+0xb30>
 800a686:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a68a:	2200      	movs	r2, #0
 800a68c:	ec51 0b17 	vmov	r0, r1, d7
 800a690:	2300      	movs	r3, #0
 800a692:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a696:	f7f6 fa3f 	bl	8000b18 <__aeabi_dcmpeq>
 800a69a:	4680      	mov	r8, r0
 800a69c:	b158      	cbz	r0, 800a6b6 <_dtoa_r+0xce>
 800a69e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	6013      	str	r3, [r2, #0]
 800a6a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a6a6:	b113      	cbz	r3, 800a6ae <_dtoa_r+0xc6>
 800a6a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a6aa:	4b84      	ldr	r3, [pc, #528]	@ (800a8bc <_dtoa_r+0x2d4>)
 800a6ac:	6013      	str	r3, [r2, #0]
 800a6ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a8d0 <_dtoa_r+0x2e8>
 800a6b2:	f000 bd33 	b.w	800b11c <_dtoa_r+0xb34>
 800a6b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a6ba:	aa16      	add	r2, sp, #88	@ 0x58
 800a6bc:	a917      	add	r1, sp, #92	@ 0x5c
 800a6be:	4658      	mov	r0, fp
 800a6c0:	f001 fa3a 	bl	800bb38 <__d2b>
 800a6c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a6c8:	4681      	mov	r9, r0
 800a6ca:	2e00      	cmp	r6, #0
 800a6cc:	d077      	beq.n	800a7be <_dtoa_r+0x1d6>
 800a6ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a6d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a6e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a6e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	4b74      	ldr	r3, [pc, #464]	@ (800a8c0 <_dtoa_r+0x2d8>)
 800a6ee:	f7f5 fdf3 	bl	80002d8 <__aeabi_dsub>
 800a6f2:	a369      	add	r3, pc, #420	@ (adr r3, 800a898 <_dtoa_r+0x2b0>)
 800a6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f8:	f7f5 ffa6 	bl	8000648 <__aeabi_dmul>
 800a6fc:	a368      	add	r3, pc, #416	@ (adr r3, 800a8a0 <_dtoa_r+0x2b8>)
 800a6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a702:	f7f5 fdeb 	bl	80002dc <__adddf3>
 800a706:	4604      	mov	r4, r0
 800a708:	4630      	mov	r0, r6
 800a70a:	460d      	mov	r5, r1
 800a70c:	f7f5 ff32 	bl	8000574 <__aeabi_i2d>
 800a710:	a365      	add	r3, pc, #404	@ (adr r3, 800a8a8 <_dtoa_r+0x2c0>)
 800a712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a716:	f7f5 ff97 	bl	8000648 <__aeabi_dmul>
 800a71a:	4602      	mov	r2, r0
 800a71c:	460b      	mov	r3, r1
 800a71e:	4620      	mov	r0, r4
 800a720:	4629      	mov	r1, r5
 800a722:	f7f5 fddb 	bl	80002dc <__adddf3>
 800a726:	4604      	mov	r4, r0
 800a728:	460d      	mov	r5, r1
 800a72a:	f7f6 fa3d 	bl	8000ba8 <__aeabi_d2iz>
 800a72e:	2200      	movs	r2, #0
 800a730:	4607      	mov	r7, r0
 800a732:	2300      	movs	r3, #0
 800a734:	4620      	mov	r0, r4
 800a736:	4629      	mov	r1, r5
 800a738:	f7f6 f9f8 	bl	8000b2c <__aeabi_dcmplt>
 800a73c:	b140      	cbz	r0, 800a750 <_dtoa_r+0x168>
 800a73e:	4638      	mov	r0, r7
 800a740:	f7f5 ff18 	bl	8000574 <__aeabi_i2d>
 800a744:	4622      	mov	r2, r4
 800a746:	462b      	mov	r3, r5
 800a748:	f7f6 f9e6 	bl	8000b18 <__aeabi_dcmpeq>
 800a74c:	b900      	cbnz	r0, 800a750 <_dtoa_r+0x168>
 800a74e:	3f01      	subs	r7, #1
 800a750:	2f16      	cmp	r7, #22
 800a752:	d851      	bhi.n	800a7f8 <_dtoa_r+0x210>
 800a754:	4b5b      	ldr	r3, [pc, #364]	@ (800a8c4 <_dtoa_r+0x2dc>)
 800a756:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a762:	f7f6 f9e3 	bl	8000b2c <__aeabi_dcmplt>
 800a766:	2800      	cmp	r0, #0
 800a768:	d048      	beq.n	800a7fc <_dtoa_r+0x214>
 800a76a:	3f01      	subs	r7, #1
 800a76c:	2300      	movs	r3, #0
 800a76e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a770:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a772:	1b9b      	subs	r3, r3, r6
 800a774:	1e5a      	subs	r2, r3, #1
 800a776:	bf44      	itt	mi
 800a778:	f1c3 0801 	rsbmi	r8, r3, #1
 800a77c:	2300      	movmi	r3, #0
 800a77e:	9208      	str	r2, [sp, #32]
 800a780:	bf54      	ite	pl
 800a782:	f04f 0800 	movpl.w	r8, #0
 800a786:	9308      	strmi	r3, [sp, #32]
 800a788:	2f00      	cmp	r7, #0
 800a78a:	db39      	blt.n	800a800 <_dtoa_r+0x218>
 800a78c:	9b08      	ldr	r3, [sp, #32]
 800a78e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a790:	443b      	add	r3, r7
 800a792:	9308      	str	r3, [sp, #32]
 800a794:	2300      	movs	r3, #0
 800a796:	930a      	str	r3, [sp, #40]	@ 0x28
 800a798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a79a:	2b09      	cmp	r3, #9
 800a79c:	d864      	bhi.n	800a868 <_dtoa_r+0x280>
 800a79e:	2b05      	cmp	r3, #5
 800a7a0:	bfc4      	itt	gt
 800a7a2:	3b04      	subgt	r3, #4
 800a7a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7a8:	f1a3 0302 	sub.w	r3, r3, #2
 800a7ac:	bfcc      	ite	gt
 800a7ae:	2400      	movgt	r4, #0
 800a7b0:	2401      	movle	r4, #1
 800a7b2:	2b03      	cmp	r3, #3
 800a7b4:	d863      	bhi.n	800a87e <_dtoa_r+0x296>
 800a7b6:	e8df f003 	tbb	[pc, r3]
 800a7ba:	372a      	.short	0x372a
 800a7bc:	5535      	.short	0x5535
 800a7be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a7c2:	441e      	add	r6, r3
 800a7c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a7c8:	2b20      	cmp	r3, #32
 800a7ca:	bfc1      	itttt	gt
 800a7cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a7d0:	409f      	lslgt	r7, r3
 800a7d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a7d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a7da:	bfd6      	itet	le
 800a7dc:	f1c3 0320 	rsble	r3, r3, #32
 800a7e0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a7e4:	fa04 f003 	lslle.w	r0, r4, r3
 800a7e8:	f7f5 feb4 	bl	8000554 <__aeabi_ui2d>
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a7f2:	3e01      	subs	r6, #1
 800a7f4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a7f6:	e777      	b.n	800a6e8 <_dtoa_r+0x100>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e7b8      	b.n	800a76e <_dtoa_r+0x186>
 800a7fc:	9012      	str	r0, [sp, #72]	@ 0x48
 800a7fe:	e7b7      	b.n	800a770 <_dtoa_r+0x188>
 800a800:	427b      	negs	r3, r7
 800a802:	930a      	str	r3, [sp, #40]	@ 0x28
 800a804:	2300      	movs	r3, #0
 800a806:	eba8 0807 	sub.w	r8, r8, r7
 800a80a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a80c:	e7c4      	b.n	800a798 <_dtoa_r+0x1b0>
 800a80e:	2300      	movs	r3, #0
 800a810:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a814:	2b00      	cmp	r3, #0
 800a816:	dc35      	bgt.n	800a884 <_dtoa_r+0x29c>
 800a818:	2301      	movs	r3, #1
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	9307      	str	r3, [sp, #28]
 800a81e:	461a      	mov	r2, r3
 800a820:	920e      	str	r2, [sp, #56]	@ 0x38
 800a822:	e00b      	b.n	800a83c <_dtoa_r+0x254>
 800a824:	2301      	movs	r3, #1
 800a826:	e7f3      	b.n	800a810 <_dtoa_r+0x228>
 800a828:	2300      	movs	r3, #0
 800a82a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a82c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a82e:	18fb      	adds	r3, r7, r3
 800a830:	9300      	str	r3, [sp, #0]
 800a832:	3301      	adds	r3, #1
 800a834:	2b01      	cmp	r3, #1
 800a836:	9307      	str	r3, [sp, #28]
 800a838:	bfb8      	it	lt
 800a83a:	2301      	movlt	r3, #1
 800a83c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a840:	2100      	movs	r1, #0
 800a842:	2204      	movs	r2, #4
 800a844:	f102 0514 	add.w	r5, r2, #20
 800a848:	429d      	cmp	r5, r3
 800a84a:	d91f      	bls.n	800a88c <_dtoa_r+0x2a4>
 800a84c:	6041      	str	r1, [r0, #4]
 800a84e:	4658      	mov	r0, fp
 800a850:	f000 fd8e 	bl	800b370 <_Balloc>
 800a854:	4682      	mov	sl, r0
 800a856:	2800      	cmp	r0, #0
 800a858:	d13c      	bne.n	800a8d4 <_dtoa_r+0x2ec>
 800a85a:	4b1b      	ldr	r3, [pc, #108]	@ (800a8c8 <_dtoa_r+0x2e0>)
 800a85c:	4602      	mov	r2, r0
 800a85e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a862:	e6d8      	b.n	800a616 <_dtoa_r+0x2e>
 800a864:	2301      	movs	r3, #1
 800a866:	e7e0      	b.n	800a82a <_dtoa_r+0x242>
 800a868:	2401      	movs	r4, #1
 800a86a:	2300      	movs	r3, #0
 800a86c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a86e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a870:	f04f 33ff 	mov.w	r3, #4294967295
 800a874:	9300      	str	r3, [sp, #0]
 800a876:	9307      	str	r3, [sp, #28]
 800a878:	2200      	movs	r2, #0
 800a87a:	2312      	movs	r3, #18
 800a87c:	e7d0      	b.n	800a820 <_dtoa_r+0x238>
 800a87e:	2301      	movs	r3, #1
 800a880:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a882:	e7f5      	b.n	800a870 <_dtoa_r+0x288>
 800a884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	9307      	str	r3, [sp, #28]
 800a88a:	e7d7      	b.n	800a83c <_dtoa_r+0x254>
 800a88c:	3101      	adds	r1, #1
 800a88e:	0052      	lsls	r2, r2, #1
 800a890:	e7d8      	b.n	800a844 <_dtoa_r+0x25c>
 800a892:	bf00      	nop
 800a894:	f3af 8000 	nop.w
 800a898:	636f4361 	.word	0x636f4361
 800a89c:	3fd287a7 	.word	0x3fd287a7
 800a8a0:	8b60c8b3 	.word	0x8b60c8b3
 800a8a4:	3fc68a28 	.word	0x3fc68a28
 800a8a8:	509f79fb 	.word	0x509f79fb
 800a8ac:	3fd34413 	.word	0x3fd34413
 800a8b0:	0800de7e 	.word	0x0800de7e
 800a8b4:	0800de95 	.word	0x0800de95
 800a8b8:	7ff00000 	.word	0x7ff00000
 800a8bc:	0800de49 	.word	0x0800de49
 800a8c0:	3ff80000 	.word	0x3ff80000
 800a8c4:	0800df90 	.word	0x0800df90
 800a8c8:	0800deed 	.word	0x0800deed
 800a8cc:	0800de7a 	.word	0x0800de7a
 800a8d0:	0800de48 	.word	0x0800de48
 800a8d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a8d8:	6018      	str	r0, [r3, #0]
 800a8da:	9b07      	ldr	r3, [sp, #28]
 800a8dc:	2b0e      	cmp	r3, #14
 800a8de:	f200 80a4 	bhi.w	800aa2a <_dtoa_r+0x442>
 800a8e2:	2c00      	cmp	r4, #0
 800a8e4:	f000 80a1 	beq.w	800aa2a <_dtoa_r+0x442>
 800a8e8:	2f00      	cmp	r7, #0
 800a8ea:	dd33      	ble.n	800a954 <_dtoa_r+0x36c>
 800a8ec:	4bad      	ldr	r3, [pc, #692]	@ (800aba4 <_dtoa_r+0x5bc>)
 800a8ee:	f007 020f 	and.w	r2, r7, #15
 800a8f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8f6:	ed93 7b00 	vldr	d7, [r3]
 800a8fa:	05f8      	lsls	r0, r7, #23
 800a8fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a900:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a904:	d516      	bpl.n	800a934 <_dtoa_r+0x34c>
 800a906:	4ba8      	ldr	r3, [pc, #672]	@ (800aba8 <_dtoa_r+0x5c0>)
 800a908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a90c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a910:	f7f5 ffc4 	bl	800089c <__aeabi_ddiv>
 800a914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a918:	f004 040f 	and.w	r4, r4, #15
 800a91c:	2603      	movs	r6, #3
 800a91e:	4da2      	ldr	r5, [pc, #648]	@ (800aba8 <_dtoa_r+0x5c0>)
 800a920:	b954      	cbnz	r4, 800a938 <_dtoa_r+0x350>
 800a922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a92a:	f7f5 ffb7 	bl	800089c <__aeabi_ddiv>
 800a92e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a932:	e028      	b.n	800a986 <_dtoa_r+0x39e>
 800a934:	2602      	movs	r6, #2
 800a936:	e7f2      	b.n	800a91e <_dtoa_r+0x336>
 800a938:	07e1      	lsls	r1, r4, #31
 800a93a:	d508      	bpl.n	800a94e <_dtoa_r+0x366>
 800a93c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a940:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a944:	f7f5 fe80 	bl	8000648 <__aeabi_dmul>
 800a948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a94c:	3601      	adds	r6, #1
 800a94e:	1064      	asrs	r4, r4, #1
 800a950:	3508      	adds	r5, #8
 800a952:	e7e5      	b.n	800a920 <_dtoa_r+0x338>
 800a954:	f000 80d2 	beq.w	800aafc <_dtoa_r+0x514>
 800a958:	427c      	negs	r4, r7
 800a95a:	4b92      	ldr	r3, [pc, #584]	@ (800aba4 <_dtoa_r+0x5bc>)
 800a95c:	4d92      	ldr	r5, [pc, #584]	@ (800aba8 <_dtoa_r+0x5c0>)
 800a95e:	f004 020f 	and.w	r2, r4, #15
 800a962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a96e:	f7f5 fe6b 	bl	8000648 <__aeabi_dmul>
 800a972:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a976:	1124      	asrs	r4, r4, #4
 800a978:	2300      	movs	r3, #0
 800a97a:	2602      	movs	r6, #2
 800a97c:	2c00      	cmp	r4, #0
 800a97e:	f040 80b2 	bne.w	800aae6 <_dtoa_r+0x4fe>
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1d3      	bne.n	800a92e <_dtoa_r+0x346>
 800a986:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a988:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f000 80b7 	beq.w	800ab00 <_dtoa_r+0x518>
 800a992:	4b86      	ldr	r3, [pc, #536]	@ (800abac <_dtoa_r+0x5c4>)
 800a994:	2200      	movs	r2, #0
 800a996:	4620      	mov	r0, r4
 800a998:	4629      	mov	r1, r5
 800a99a:	f7f6 f8c7 	bl	8000b2c <__aeabi_dcmplt>
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	f000 80ae 	beq.w	800ab00 <_dtoa_r+0x518>
 800a9a4:	9b07      	ldr	r3, [sp, #28]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 80aa 	beq.w	800ab00 <_dtoa_r+0x518>
 800a9ac:	9b00      	ldr	r3, [sp, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	dd37      	ble.n	800aa22 <_dtoa_r+0x43a>
 800a9b2:	1e7b      	subs	r3, r7, #1
 800a9b4:	9304      	str	r3, [sp, #16]
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	4b7d      	ldr	r3, [pc, #500]	@ (800abb0 <_dtoa_r+0x5c8>)
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	4629      	mov	r1, r5
 800a9be:	f7f5 fe43 	bl	8000648 <__aeabi_dmul>
 800a9c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9c6:	9c00      	ldr	r4, [sp, #0]
 800a9c8:	3601      	adds	r6, #1
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f7f5 fdd2 	bl	8000574 <__aeabi_i2d>
 800a9d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9d4:	f7f5 fe38 	bl	8000648 <__aeabi_dmul>
 800a9d8:	4b76      	ldr	r3, [pc, #472]	@ (800abb4 <_dtoa_r+0x5cc>)
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f7f5 fc7e 	bl	80002dc <__adddf3>
 800a9e0:	4605      	mov	r5, r0
 800a9e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a9e6:	2c00      	cmp	r4, #0
 800a9e8:	f040 808d 	bne.w	800ab06 <_dtoa_r+0x51e>
 800a9ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9f0:	4b71      	ldr	r3, [pc, #452]	@ (800abb8 <_dtoa_r+0x5d0>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f7f5 fc70 	bl	80002d8 <__aeabi_dsub>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa00:	462a      	mov	r2, r5
 800aa02:	4633      	mov	r3, r6
 800aa04:	f7f6 f8b0 	bl	8000b68 <__aeabi_dcmpgt>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	f040 828b 	bne.w	800af24 <_dtoa_r+0x93c>
 800aa0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa12:	462a      	mov	r2, r5
 800aa14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aa18:	f7f6 f888 	bl	8000b2c <__aeabi_dcmplt>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	f040 8128 	bne.w	800ac72 <_dtoa_r+0x68a>
 800aa22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800aa26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aa2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f2c0 815a 	blt.w	800ace6 <_dtoa_r+0x6fe>
 800aa32:	2f0e      	cmp	r7, #14
 800aa34:	f300 8157 	bgt.w	800ace6 <_dtoa_r+0x6fe>
 800aa38:	4b5a      	ldr	r3, [pc, #360]	@ (800aba4 <_dtoa_r+0x5bc>)
 800aa3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa3e:	ed93 7b00 	vldr	d7, [r3]
 800aa42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	ed8d 7b00 	vstr	d7, [sp]
 800aa4a:	da03      	bge.n	800aa54 <_dtoa_r+0x46c>
 800aa4c:	9b07      	ldr	r3, [sp, #28]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f340 8101 	ble.w	800ac56 <_dtoa_r+0x66e>
 800aa54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aa58:	4656      	mov	r6, sl
 800aa5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa5e:	4620      	mov	r0, r4
 800aa60:	4629      	mov	r1, r5
 800aa62:	f7f5 ff1b 	bl	800089c <__aeabi_ddiv>
 800aa66:	f7f6 f89f 	bl	8000ba8 <__aeabi_d2iz>
 800aa6a:	4680      	mov	r8, r0
 800aa6c:	f7f5 fd82 	bl	8000574 <__aeabi_i2d>
 800aa70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa74:	f7f5 fde8 	bl	8000648 <__aeabi_dmul>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	4629      	mov	r1, r5
 800aa80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800aa84:	f7f5 fc28 	bl	80002d8 <__aeabi_dsub>
 800aa88:	f806 4b01 	strb.w	r4, [r6], #1
 800aa8c:	9d07      	ldr	r5, [sp, #28]
 800aa8e:	eba6 040a 	sub.w	r4, r6, sl
 800aa92:	42a5      	cmp	r5, r4
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	f040 8117 	bne.w	800acca <_dtoa_r+0x6e2>
 800aa9c:	f7f5 fc1e 	bl	80002dc <__adddf3>
 800aaa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	460d      	mov	r5, r1
 800aaa8:	f7f6 f85e 	bl	8000b68 <__aeabi_dcmpgt>
 800aaac:	2800      	cmp	r0, #0
 800aaae:	f040 80f9 	bne.w	800aca4 <_dtoa_r+0x6bc>
 800aab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aab6:	4620      	mov	r0, r4
 800aab8:	4629      	mov	r1, r5
 800aaba:	f7f6 f82d 	bl	8000b18 <__aeabi_dcmpeq>
 800aabe:	b118      	cbz	r0, 800aac8 <_dtoa_r+0x4e0>
 800aac0:	f018 0f01 	tst.w	r8, #1
 800aac4:	f040 80ee 	bne.w	800aca4 <_dtoa_r+0x6bc>
 800aac8:	4649      	mov	r1, r9
 800aaca:	4658      	mov	r0, fp
 800aacc:	f000 fc90 	bl	800b3f0 <_Bfree>
 800aad0:	2300      	movs	r3, #0
 800aad2:	7033      	strb	r3, [r6, #0]
 800aad4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aad6:	3701      	adds	r7, #1
 800aad8:	601f      	str	r7, [r3, #0]
 800aada:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f000 831d 	beq.w	800b11c <_dtoa_r+0xb34>
 800aae2:	601e      	str	r6, [r3, #0]
 800aae4:	e31a      	b.n	800b11c <_dtoa_r+0xb34>
 800aae6:	07e2      	lsls	r2, r4, #31
 800aae8:	d505      	bpl.n	800aaf6 <_dtoa_r+0x50e>
 800aaea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aaee:	f7f5 fdab 	bl	8000648 <__aeabi_dmul>
 800aaf2:	3601      	adds	r6, #1
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	1064      	asrs	r4, r4, #1
 800aaf8:	3508      	adds	r5, #8
 800aafa:	e73f      	b.n	800a97c <_dtoa_r+0x394>
 800aafc:	2602      	movs	r6, #2
 800aafe:	e742      	b.n	800a986 <_dtoa_r+0x39e>
 800ab00:	9c07      	ldr	r4, [sp, #28]
 800ab02:	9704      	str	r7, [sp, #16]
 800ab04:	e761      	b.n	800a9ca <_dtoa_r+0x3e2>
 800ab06:	4b27      	ldr	r3, [pc, #156]	@ (800aba4 <_dtoa_r+0x5bc>)
 800ab08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab12:	4454      	add	r4, sl
 800ab14:	2900      	cmp	r1, #0
 800ab16:	d053      	beq.n	800abc0 <_dtoa_r+0x5d8>
 800ab18:	4928      	ldr	r1, [pc, #160]	@ (800abbc <_dtoa_r+0x5d4>)
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	f7f5 febe 	bl	800089c <__aeabi_ddiv>
 800ab20:	4633      	mov	r3, r6
 800ab22:	462a      	mov	r2, r5
 800ab24:	f7f5 fbd8 	bl	80002d8 <__aeabi_dsub>
 800ab28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ab2c:	4656      	mov	r6, sl
 800ab2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab32:	f7f6 f839 	bl	8000ba8 <__aeabi_d2iz>
 800ab36:	4605      	mov	r5, r0
 800ab38:	f7f5 fd1c 	bl	8000574 <__aeabi_i2d>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	460b      	mov	r3, r1
 800ab40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab44:	f7f5 fbc8 	bl	80002d8 <__aeabi_dsub>
 800ab48:	3530      	adds	r5, #48	@ 0x30
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab52:	f806 5b01 	strb.w	r5, [r6], #1
 800ab56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ab5a:	f7f5 ffe7 	bl	8000b2c <__aeabi_dcmplt>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d171      	bne.n	800ac46 <_dtoa_r+0x65e>
 800ab62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab66:	4911      	ldr	r1, [pc, #68]	@ (800abac <_dtoa_r+0x5c4>)
 800ab68:	2000      	movs	r0, #0
 800ab6a:	f7f5 fbb5 	bl	80002d8 <__aeabi_dsub>
 800ab6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ab72:	f7f5 ffdb 	bl	8000b2c <__aeabi_dcmplt>
 800ab76:	2800      	cmp	r0, #0
 800ab78:	f040 8095 	bne.w	800aca6 <_dtoa_r+0x6be>
 800ab7c:	42a6      	cmp	r6, r4
 800ab7e:	f43f af50 	beq.w	800aa22 <_dtoa_r+0x43a>
 800ab82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ab86:	4b0a      	ldr	r3, [pc, #40]	@ (800abb0 <_dtoa_r+0x5c8>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f7f5 fd5d 	bl	8000648 <__aeabi_dmul>
 800ab8e:	4b08      	ldr	r3, [pc, #32]	@ (800abb0 <_dtoa_r+0x5c8>)
 800ab90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ab94:	2200      	movs	r2, #0
 800ab96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab9a:	f7f5 fd55 	bl	8000648 <__aeabi_dmul>
 800ab9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aba2:	e7c4      	b.n	800ab2e <_dtoa_r+0x546>
 800aba4:	0800df90 	.word	0x0800df90
 800aba8:	0800df68 	.word	0x0800df68
 800abac:	3ff00000 	.word	0x3ff00000
 800abb0:	40240000 	.word	0x40240000
 800abb4:	401c0000 	.word	0x401c0000
 800abb8:	40140000 	.word	0x40140000
 800abbc:	3fe00000 	.word	0x3fe00000
 800abc0:	4631      	mov	r1, r6
 800abc2:	4628      	mov	r0, r5
 800abc4:	f7f5 fd40 	bl	8000648 <__aeabi_dmul>
 800abc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800abcc:	9415      	str	r4, [sp, #84]	@ 0x54
 800abce:	4656      	mov	r6, sl
 800abd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abd4:	f7f5 ffe8 	bl	8000ba8 <__aeabi_d2iz>
 800abd8:	4605      	mov	r5, r0
 800abda:	f7f5 fccb 	bl	8000574 <__aeabi_i2d>
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abe6:	f7f5 fb77 	bl	80002d8 <__aeabi_dsub>
 800abea:	3530      	adds	r5, #48	@ 0x30
 800abec:	f806 5b01 	strb.w	r5, [r6], #1
 800abf0:	4602      	mov	r2, r0
 800abf2:	460b      	mov	r3, r1
 800abf4:	42a6      	cmp	r6, r4
 800abf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800abfa:	f04f 0200 	mov.w	r2, #0
 800abfe:	d124      	bne.n	800ac4a <_dtoa_r+0x662>
 800ac00:	4bac      	ldr	r3, [pc, #688]	@ (800aeb4 <_dtoa_r+0x8cc>)
 800ac02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac06:	f7f5 fb69 	bl	80002dc <__adddf3>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac12:	f7f5 ffa9 	bl	8000b68 <__aeabi_dcmpgt>
 800ac16:	2800      	cmp	r0, #0
 800ac18:	d145      	bne.n	800aca6 <_dtoa_r+0x6be>
 800ac1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac1e:	49a5      	ldr	r1, [pc, #660]	@ (800aeb4 <_dtoa_r+0x8cc>)
 800ac20:	2000      	movs	r0, #0
 800ac22:	f7f5 fb59 	bl	80002d8 <__aeabi_dsub>
 800ac26:	4602      	mov	r2, r0
 800ac28:	460b      	mov	r3, r1
 800ac2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac2e:	f7f5 ff7d 	bl	8000b2c <__aeabi_dcmplt>
 800ac32:	2800      	cmp	r0, #0
 800ac34:	f43f aef5 	beq.w	800aa22 <_dtoa_r+0x43a>
 800ac38:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ac3a:	1e73      	subs	r3, r6, #1
 800ac3c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ac3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ac42:	2b30      	cmp	r3, #48	@ 0x30
 800ac44:	d0f8      	beq.n	800ac38 <_dtoa_r+0x650>
 800ac46:	9f04      	ldr	r7, [sp, #16]
 800ac48:	e73e      	b.n	800aac8 <_dtoa_r+0x4e0>
 800ac4a:	4b9b      	ldr	r3, [pc, #620]	@ (800aeb8 <_dtoa_r+0x8d0>)
 800ac4c:	f7f5 fcfc 	bl	8000648 <__aeabi_dmul>
 800ac50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac54:	e7bc      	b.n	800abd0 <_dtoa_r+0x5e8>
 800ac56:	d10c      	bne.n	800ac72 <_dtoa_r+0x68a>
 800ac58:	4b98      	ldr	r3, [pc, #608]	@ (800aebc <_dtoa_r+0x8d4>)
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac60:	f7f5 fcf2 	bl	8000648 <__aeabi_dmul>
 800ac64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac68:	f7f5 ff74 	bl	8000b54 <__aeabi_dcmpge>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	f000 8157 	beq.w	800af20 <_dtoa_r+0x938>
 800ac72:	2400      	movs	r4, #0
 800ac74:	4625      	mov	r5, r4
 800ac76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac78:	43db      	mvns	r3, r3
 800ac7a:	9304      	str	r3, [sp, #16]
 800ac7c:	4656      	mov	r6, sl
 800ac7e:	2700      	movs	r7, #0
 800ac80:	4621      	mov	r1, r4
 800ac82:	4658      	mov	r0, fp
 800ac84:	f000 fbb4 	bl	800b3f0 <_Bfree>
 800ac88:	2d00      	cmp	r5, #0
 800ac8a:	d0dc      	beq.n	800ac46 <_dtoa_r+0x65e>
 800ac8c:	b12f      	cbz	r7, 800ac9a <_dtoa_r+0x6b2>
 800ac8e:	42af      	cmp	r7, r5
 800ac90:	d003      	beq.n	800ac9a <_dtoa_r+0x6b2>
 800ac92:	4639      	mov	r1, r7
 800ac94:	4658      	mov	r0, fp
 800ac96:	f000 fbab 	bl	800b3f0 <_Bfree>
 800ac9a:	4629      	mov	r1, r5
 800ac9c:	4658      	mov	r0, fp
 800ac9e:	f000 fba7 	bl	800b3f0 <_Bfree>
 800aca2:	e7d0      	b.n	800ac46 <_dtoa_r+0x65e>
 800aca4:	9704      	str	r7, [sp, #16]
 800aca6:	4633      	mov	r3, r6
 800aca8:	461e      	mov	r6, r3
 800acaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acae:	2a39      	cmp	r2, #57	@ 0x39
 800acb0:	d107      	bne.n	800acc2 <_dtoa_r+0x6da>
 800acb2:	459a      	cmp	sl, r3
 800acb4:	d1f8      	bne.n	800aca8 <_dtoa_r+0x6c0>
 800acb6:	9a04      	ldr	r2, [sp, #16]
 800acb8:	3201      	adds	r2, #1
 800acba:	9204      	str	r2, [sp, #16]
 800acbc:	2230      	movs	r2, #48	@ 0x30
 800acbe:	f88a 2000 	strb.w	r2, [sl]
 800acc2:	781a      	ldrb	r2, [r3, #0]
 800acc4:	3201      	adds	r2, #1
 800acc6:	701a      	strb	r2, [r3, #0]
 800acc8:	e7bd      	b.n	800ac46 <_dtoa_r+0x65e>
 800acca:	4b7b      	ldr	r3, [pc, #492]	@ (800aeb8 <_dtoa_r+0x8d0>)
 800accc:	2200      	movs	r2, #0
 800acce:	f7f5 fcbb 	bl	8000648 <__aeabi_dmul>
 800acd2:	2200      	movs	r2, #0
 800acd4:	2300      	movs	r3, #0
 800acd6:	4604      	mov	r4, r0
 800acd8:	460d      	mov	r5, r1
 800acda:	f7f5 ff1d 	bl	8000b18 <__aeabi_dcmpeq>
 800acde:	2800      	cmp	r0, #0
 800ace0:	f43f aebb 	beq.w	800aa5a <_dtoa_r+0x472>
 800ace4:	e6f0      	b.n	800aac8 <_dtoa_r+0x4e0>
 800ace6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ace8:	2a00      	cmp	r2, #0
 800acea:	f000 80db 	beq.w	800aea4 <_dtoa_r+0x8bc>
 800acee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acf0:	2a01      	cmp	r2, #1
 800acf2:	f300 80bf 	bgt.w	800ae74 <_dtoa_r+0x88c>
 800acf6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800acf8:	2a00      	cmp	r2, #0
 800acfa:	f000 80b7 	beq.w	800ae6c <_dtoa_r+0x884>
 800acfe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ad02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ad04:	4646      	mov	r6, r8
 800ad06:	9a08      	ldr	r2, [sp, #32]
 800ad08:	2101      	movs	r1, #1
 800ad0a:	441a      	add	r2, r3
 800ad0c:	4658      	mov	r0, fp
 800ad0e:	4498      	add	r8, r3
 800ad10:	9208      	str	r2, [sp, #32]
 800ad12:	f000 fc6b 	bl	800b5ec <__i2b>
 800ad16:	4605      	mov	r5, r0
 800ad18:	b15e      	cbz	r6, 800ad32 <_dtoa_r+0x74a>
 800ad1a:	9b08      	ldr	r3, [sp, #32]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	dd08      	ble.n	800ad32 <_dtoa_r+0x74a>
 800ad20:	42b3      	cmp	r3, r6
 800ad22:	9a08      	ldr	r2, [sp, #32]
 800ad24:	bfa8      	it	ge
 800ad26:	4633      	movge	r3, r6
 800ad28:	eba8 0803 	sub.w	r8, r8, r3
 800ad2c:	1af6      	subs	r6, r6, r3
 800ad2e:	1ad3      	subs	r3, r2, r3
 800ad30:	9308      	str	r3, [sp, #32]
 800ad32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad34:	b1f3      	cbz	r3, 800ad74 <_dtoa_r+0x78c>
 800ad36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f000 80b7 	beq.w	800aeac <_dtoa_r+0x8c4>
 800ad3e:	b18c      	cbz	r4, 800ad64 <_dtoa_r+0x77c>
 800ad40:	4629      	mov	r1, r5
 800ad42:	4622      	mov	r2, r4
 800ad44:	4658      	mov	r0, fp
 800ad46:	f000 fd11 	bl	800b76c <__pow5mult>
 800ad4a:	464a      	mov	r2, r9
 800ad4c:	4601      	mov	r1, r0
 800ad4e:	4605      	mov	r5, r0
 800ad50:	4658      	mov	r0, fp
 800ad52:	f000 fc61 	bl	800b618 <__multiply>
 800ad56:	4649      	mov	r1, r9
 800ad58:	9004      	str	r0, [sp, #16]
 800ad5a:	4658      	mov	r0, fp
 800ad5c:	f000 fb48 	bl	800b3f0 <_Bfree>
 800ad60:	9b04      	ldr	r3, [sp, #16]
 800ad62:	4699      	mov	r9, r3
 800ad64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad66:	1b1a      	subs	r2, r3, r4
 800ad68:	d004      	beq.n	800ad74 <_dtoa_r+0x78c>
 800ad6a:	4649      	mov	r1, r9
 800ad6c:	4658      	mov	r0, fp
 800ad6e:	f000 fcfd 	bl	800b76c <__pow5mult>
 800ad72:	4681      	mov	r9, r0
 800ad74:	2101      	movs	r1, #1
 800ad76:	4658      	mov	r0, fp
 800ad78:	f000 fc38 	bl	800b5ec <__i2b>
 800ad7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad7e:	4604      	mov	r4, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f000 81cf 	beq.w	800b124 <_dtoa_r+0xb3c>
 800ad86:	461a      	mov	r2, r3
 800ad88:	4601      	mov	r1, r0
 800ad8a:	4658      	mov	r0, fp
 800ad8c:	f000 fcee 	bl	800b76c <__pow5mult>
 800ad90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	4604      	mov	r4, r0
 800ad96:	f300 8095 	bgt.w	800aec4 <_dtoa_r+0x8dc>
 800ad9a:	9b02      	ldr	r3, [sp, #8]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f040 8087 	bne.w	800aeb0 <_dtoa_r+0x8c8>
 800ada2:	9b03      	ldr	r3, [sp, #12]
 800ada4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f040 8089 	bne.w	800aec0 <_dtoa_r+0x8d8>
 800adae:	9b03      	ldr	r3, [sp, #12]
 800adb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800adb4:	0d1b      	lsrs	r3, r3, #20
 800adb6:	051b      	lsls	r3, r3, #20
 800adb8:	b12b      	cbz	r3, 800adc6 <_dtoa_r+0x7de>
 800adba:	9b08      	ldr	r3, [sp, #32]
 800adbc:	3301      	adds	r3, #1
 800adbe:	9308      	str	r3, [sp, #32]
 800adc0:	f108 0801 	add.w	r8, r8, #1
 800adc4:	2301      	movs	r3, #1
 800adc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800adc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f000 81b0 	beq.w	800b130 <_dtoa_r+0xb48>
 800add0:	6923      	ldr	r3, [r4, #16]
 800add2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800add6:	6918      	ldr	r0, [r3, #16]
 800add8:	f000 fbbc 	bl	800b554 <__hi0bits>
 800addc:	f1c0 0020 	rsb	r0, r0, #32
 800ade0:	9b08      	ldr	r3, [sp, #32]
 800ade2:	4418      	add	r0, r3
 800ade4:	f010 001f 	ands.w	r0, r0, #31
 800ade8:	d077      	beq.n	800aeda <_dtoa_r+0x8f2>
 800adea:	f1c0 0320 	rsb	r3, r0, #32
 800adee:	2b04      	cmp	r3, #4
 800adf0:	dd6b      	ble.n	800aeca <_dtoa_r+0x8e2>
 800adf2:	9b08      	ldr	r3, [sp, #32]
 800adf4:	f1c0 001c 	rsb	r0, r0, #28
 800adf8:	4403      	add	r3, r0
 800adfa:	4480      	add	r8, r0
 800adfc:	4406      	add	r6, r0
 800adfe:	9308      	str	r3, [sp, #32]
 800ae00:	f1b8 0f00 	cmp.w	r8, #0
 800ae04:	dd05      	ble.n	800ae12 <_dtoa_r+0x82a>
 800ae06:	4649      	mov	r1, r9
 800ae08:	4642      	mov	r2, r8
 800ae0a:	4658      	mov	r0, fp
 800ae0c:	f000 fd08 	bl	800b820 <__lshift>
 800ae10:	4681      	mov	r9, r0
 800ae12:	9b08      	ldr	r3, [sp, #32]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	dd05      	ble.n	800ae24 <_dtoa_r+0x83c>
 800ae18:	4621      	mov	r1, r4
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	4658      	mov	r0, fp
 800ae1e:	f000 fcff 	bl	800b820 <__lshift>
 800ae22:	4604      	mov	r4, r0
 800ae24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d059      	beq.n	800aede <_dtoa_r+0x8f6>
 800ae2a:	4621      	mov	r1, r4
 800ae2c:	4648      	mov	r0, r9
 800ae2e:	f000 fd63 	bl	800b8f8 <__mcmp>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	da53      	bge.n	800aede <_dtoa_r+0x8f6>
 800ae36:	1e7b      	subs	r3, r7, #1
 800ae38:	9304      	str	r3, [sp, #16]
 800ae3a:	4649      	mov	r1, r9
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	220a      	movs	r2, #10
 800ae40:	4658      	mov	r0, fp
 800ae42:	f000 faf7 	bl	800b434 <__multadd>
 800ae46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae48:	4681      	mov	r9, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f000 8172 	beq.w	800b134 <_dtoa_r+0xb4c>
 800ae50:	2300      	movs	r3, #0
 800ae52:	4629      	mov	r1, r5
 800ae54:	220a      	movs	r2, #10
 800ae56:	4658      	mov	r0, fp
 800ae58:	f000 faec 	bl	800b434 <__multadd>
 800ae5c:	9b00      	ldr	r3, [sp, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	4605      	mov	r5, r0
 800ae62:	dc67      	bgt.n	800af34 <_dtoa_r+0x94c>
 800ae64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	dc41      	bgt.n	800aeee <_dtoa_r+0x906>
 800ae6a:	e063      	b.n	800af34 <_dtoa_r+0x94c>
 800ae6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ae6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ae72:	e746      	b.n	800ad02 <_dtoa_r+0x71a>
 800ae74:	9b07      	ldr	r3, [sp, #28]
 800ae76:	1e5c      	subs	r4, r3, #1
 800ae78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae7a:	42a3      	cmp	r3, r4
 800ae7c:	bfbf      	itttt	lt
 800ae7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ae80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ae82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ae84:	1ae3      	sublt	r3, r4, r3
 800ae86:	bfb4      	ite	lt
 800ae88:	18d2      	addlt	r2, r2, r3
 800ae8a:	1b1c      	subge	r4, r3, r4
 800ae8c:	9b07      	ldr	r3, [sp, #28]
 800ae8e:	bfbc      	itt	lt
 800ae90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ae92:	2400      	movlt	r4, #0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	bfb5      	itete	lt
 800ae98:	eba8 0603 	sublt.w	r6, r8, r3
 800ae9c:	9b07      	ldrge	r3, [sp, #28]
 800ae9e:	2300      	movlt	r3, #0
 800aea0:	4646      	movge	r6, r8
 800aea2:	e730      	b.n	800ad06 <_dtoa_r+0x71e>
 800aea4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aea6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aea8:	4646      	mov	r6, r8
 800aeaa:	e735      	b.n	800ad18 <_dtoa_r+0x730>
 800aeac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aeae:	e75c      	b.n	800ad6a <_dtoa_r+0x782>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	e788      	b.n	800adc6 <_dtoa_r+0x7de>
 800aeb4:	3fe00000 	.word	0x3fe00000
 800aeb8:	40240000 	.word	0x40240000
 800aebc:	40140000 	.word	0x40140000
 800aec0:	9b02      	ldr	r3, [sp, #8]
 800aec2:	e780      	b.n	800adc6 <_dtoa_r+0x7de>
 800aec4:	2300      	movs	r3, #0
 800aec6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aec8:	e782      	b.n	800add0 <_dtoa_r+0x7e8>
 800aeca:	d099      	beq.n	800ae00 <_dtoa_r+0x818>
 800aecc:	9a08      	ldr	r2, [sp, #32]
 800aece:	331c      	adds	r3, #28
 800aed0:	441a      	add	r2, r3
 800aed2:	4498      	add	r8, r3
 800aed4:	441e      	add	r6, r3
 800aed6:	9208      	str	r2, [sp, #32]
 800aed8:	e792      	b.n	800ae00 <_dtoa_r+0x818>
 800aeda:	4603      	mov	r3, r0
 800aedc:	e7f6      	b.n	800aecc <_dtoa_r+0x8e4>
 800aede:	9b07      	ldr	r3, [sp, #28]
 800aee0:	9704      	str	r7, [sp, #16]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	dc20      	bgt.n	800af28 <_dtoa_r+0x940>
 800aee6:	9300      	str	r3, [sp, #0]
 800aee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	dd1e      	ble.n	800af2c <_dtoa_r+0x944>
 800aeee:	9b00      	ldr	r3, [sp, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f47f aec0 	bne.w	800ac76 <_dtoa_r+0x68e>
 800aef6:	4621      	mov	r1, r4
 800aef8:	2205      	movs	r2, #5
 800aefa:	4658      	mov	r0, fp
 800aefc:	f000 fa9a 	bl	800b434 <__multadd>
 800af00:	4601      	mov	r1, r0
 800af02:	4604      	mov	r4, r0
 800af04:	4648      	mov	r0, r9
 800af06:	f000 fcf7 	bl	800b8f8 <__mcmp>
 800af0a:	2800      	cmp	r0, #0
 800af0c:	f77f aeb3 	ble.w	800ac76 <_dtoa_r+0x68e>
 800af10:	4656      	mov	r6, sl
 800af12:	2331      	movs	r3, #49	@ 0x31
 800af14:	f806 3b01 	strb.w	r3, [r6], #1
 800af18:	9b04      	ldr	r3, [sp, #16]
 800af1a:	3301      	adds	r3, #1
 800af1c:	9304      	str	r3, [sp, #16]
 800af1e:	e6ae      	b.n	800ac7e <_dtoa_r+0x696>
 800af20:	9c07      	ldr	r4, [sp, #28]
 800af22:	9704      	str	r7, [sp, #16]
 800af24:	4625      	mov	r5, r4
 800af26:	e7f3      	b.n	800af10 <_dtoa_r+0x928>
 800af28:	9b07      	ldr	r3, [sp, #28]
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f000 8104 	beq.w	800b13c <_dtoa_r+0xb54>
 800af34:	2e00      	cmp	r6, #0
 800af36:	dd05      	ble.n	800af44 <_dtoa_r+0x95c>
 800af38:	4629      	mov	r1, r5
 800af3a:	4632      	mov	r2, r6
 800af3c:	4658      	mov	r0, fp
 800af3e:	f000 fc6f 	bl	800b820 <__lshift>
 800af42:	4605      	mov	r5, r0
 800af44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af46:	2b00      	cmp	r3, #0
 800af48:	d05a      	beq.n	800b000 <_dtoa_r+0xa18>
 800af4a:	6869      	ldr	r1, [r5, #4]
 800af4c:	4658      	mov	r0, fp
 800af4e:	f000 fa0f 	bl	800b370 <_Balloc>
 800af52:	4606      	mov	r6, r0
 800af54:	b928      	cbnz	r0, 800af62 <_dtoa_r+0x97a>
 800af56:	4b84      	ldr	r3, [pc, #528]	@ (800b168 <_dtoa_r+0xb80>)
 800af58:	4602      	mov	r2, r0
 800af5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800af5e:	f7ff bb5a 	b.w	800a616 <_dtoa_r+0x2e>
 800af62:	692a      	ldr	r2, [r5, #16]
 800af64:	3202      	adds	r2, #2
 800af66:	0092      	lsls	r2, r2, #2
 800af68:	f105 010c 	add.w	r1, r5, #12
 800af6c:	300c      	adds	r0, #12
 800af6e:	f001 ff75 	bl	800ce5c <memcpy>
 800af72:	2201      	movs	r2, #1
 800af74:	4631      	mov	r1, r6
 800af76:	4658      	mov	r0, fp
 800af78:	f000 fc52 	bl	800b820 <__lshift>
 800af7c:	f10a 0301 	add.w	r3, sl, #1
 800af80:	9307      	str	r3, [sp, #28]
 800af82:	9b00      	ldr	r3, [sp, #0]
 800af84:	4453      	add	r3, sl
 800af86:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af88:	9b02      	ldr	r3, [sp, #8]
 800af8a:	f003 0301 	and.w	r3, r3, #1
 800af8e:	462f      	mov	r7, r5
 800af90:	930a      	str	r3, [sp, #40]	@ 0x28
 800af92:	4605      	mov	r5, r0
 800af94:	9b07      	ldr	r3, [sp, #28]
 800af96:	4621      	mov	r1, r4
 800af98:	3b01      	subs	r3, #1
 800af9a:	4648      	mov	r0, r9
 800af9c:	9300      	str	r3, [sp, #0]
 800af9e:	f7ff fa9b 	bl	800a4d8 <quorem>
 800afa2:	4639      	mov	r1, r7
 800afa4:	9002      	str	r0, [sp, #8]
 800afa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800afaa:	4648      	mov	r0, r9
 800afac:	f000 fca4 	bl	800b8f8 <__mcmp>
 800afb0:	462a      	mov	r2, r5
 800afb2:	9008      	str	r0, [sp, #32]
 800afb4:	4621      	mov	r1, r4
 800afb6:	4658      	mov	r0, fp
 800afb8:	f000 fcba 	bl	800b930 <__mdiff>
 800afbc:	68c2      	ldr	r2, [r0, #12]
 800afbe:	4606      	mov	r6, r0
 800afc0:	bb02      	cbnz	r2, 800b004 <_dtoa_r+0xa1c>
 800afc2:	4601      	mov	r1, r0
 800afc4:	4648      	mov	r0, r9
 800afc6:	f000 fc97 	bl	800b8f8 <__mcmp>
 800afca:	4602      	mov	r2, r0
 800afcc:	4631      	mov	r1, r6
 800afce:	4658      	mov	r0, fp
 800afd0:	920e      	str	r2, [sp, #56]	@ 0x38
 800afd2:	f000 fa0d 	bl	800b3f0 <_Bfree>
 800afd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800afda:	9e07      	ldr	r6, [sp, #28]
 800afdc:	ea43 0102 	orr.w	r1, r3, r2
 800afe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afe2:	4319      	orrs	r1, r3
 800afe4:	d110      	bne.n	800b008 <_dtoa_r+0xa20>
 800afe6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800afea:	d029      	beq.n	800b040 <_dtoa_r+0xa58>
 800afec:	9b08      	ldr	r3, [sp, #32]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	dd02      	ble.n	800aff8 <_dtoa_r+0xa10>
 800aff2:	9b02      	ldr	r3, [sp, #8]
 800aff4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800aff8:	9b00      	ldr	r3, [sp, #0]
 800affa:	f883 8000 	strb.w	r8, [r3]
 800affe:	e63f      	b.n	800ac80 <_dtoa_r+0x698>
 800b000:	4628      	mov	r0, r5
 800b002:	e7bb      	b.n	800af7c <_dtoa_r+0x994>
 800b004:	2201      	movs	r2, #1
 800b006:	e7e1      	b.n	800afcc <_dtoa_r+0x9e4>
 800b008:	9b08      	ldr	r3, [sp, #32]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	db04      	blt.n	800b018 <_dtoa_r+0xa30>
 800b00e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b010:	430b      	orrs	r3, r1
 800b012:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b014:	430b      	orrs	r3, r1
 800b016:	d120      	bne.n	800b05a <_dtoa_r+0xa72>
 800b018:	2a00      	cmp	r2, #0
 800b01a:	dded      	ble.n	800aff8 <_dtoa_r+0xa10>
 800b01c:	4649      	mov	r1, r9
 800b01e:	2201      	movs	r2, #1
 800b020:	4658      	mov	r0, fp
 800b022:	f000 fbfd 	bl	800b820 <__lshift>
 800b026:	4621      	mov	r1, r4
 800b028:	4681      	mov	r9, r0
 800b02a:	f000 fc65 	bl	800b8f8 <__mcmp>
 800b02e:	2800      	cmp	r0, #0
 800b030:	dc03      	bgt.n	800b03a <_dtoa_r+0xa52>
 800b032:	d1e1      	bne.n	800aff8 <_dtoa_r+0xa10>
 800b034:	f018 0f01 	tst.w	r8, #1
 800b038:	d0de      	beq.n	800aff8 <_dtoa_r+0xa10>
 800b03a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b03e:	d1d8      	bne.n	800aff2 <_dtoa_r+0xa0a>
 800b040:	9a00      	ldr	r2, [sp, #0]
 800b042:	2339      	movs	r3, #57	@ 0x39
 800b044:	7013      	strb	r3, [r2, #0]
 800b046:	4633      	mov	r3, r6
 800b048:	461e      	mov	r6, r3
 800b04a:	3b01      	subs	r3, #1
 800b04c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b050:	2a39      	cmp	r2, #57	@ 0x39
 800b052:	d052      	beq.n	800b0fa <_dtoa_r+0xb12>
 800b054:	3201      	adds	r2, #1
 800b056:	701a      	strb	r2, [r3, #0]
 800b058:	e612      	b.n	800ac80 <_dtoa_r+0x698>
 800b05a:	2a00      	cmp	r2, #0
 800b05c:	dd07      	ble.n	800b06e <_dtoa_r+0xa86>
 800b05e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b062:	d0ed      	beq.n	800b040 <_dtoa_r+0xa58>
 800b064:	9a00      	ldr	r2, [sp, #0]
 800b066:	f108 0301 	add.w	r3, r8, #1
 800b06a:	7013      	strb	r3, [r2, #0]
 800b06c:	e608      	b.n	800ac80 <_dtoa_r+0x698>
 800b06e:	9b07      	ldr	r3, [sp, #28]
 800b070:	9a07      	ldr	r2, [sp, #28]
 800b072:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b078:	4293      	cmp	r3, r2
 800b07a:	d028      	beq.n	800b0ce <_dtoa_r+0xae6>
 800b07c:	4649      	mov	r1, r9
 800b07e:	2300      	movs	r3, #0
 800b080:	220a      	movs	r2, #10
 800b082:	4658      	mov	r0, fp
 800b084:	f000 f9d6 	bl	800b434 <__multadd>
 800b088:	42af      	cmp	r7, r5
 800b08a:	4681      	mov	r9, r0
 800b08c:	f04f 0300 	mov.w	r3, #0
 800b090:	f04f 020a 	mov.w	r2, #10
 800b094:	4639      	mov	r1, r7
 800b096:	4658      	mov	r0, fp
 800b098:	d107      	bne.n	800b0aa <_dtoa_r+0xac2>
 800b09a:	f000 f9cb 	bl	800b434 <__multadd>
 800b09e:	4607      	mov	r7, r0
 800b0a0:	4605      	mov	r5, r0
 800b0a2:	9b07      	ldr	r3, [sp, #28]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	9307      	str	r3, [sp, #28]
 800b0a8:	e774      	b.n	800af94 <_dtoa_r+0x9ac>
 800b0aa:	f000 f9c3 	bl	800b434 <__multadd>
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	4607      	mov	r7, r0
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	220a      	movs	r2, #10
 800b0b6:	4658      	mov	r0, fp
 800b0b8:	f000 f9bc 	bl	800b434 <__multadd>
 800b0bc:	4605      	mov	r5, r0
 800b0be:	e7f0      	b.n	800b0a2 <_dtoa_r+0xaba>
 800b0c0:	9b00      	ldr	r3, [sp, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	bfcc      	ite	gt
 800b0c6:	461e      	movgt	r6, r3
 800b0c8:	2601      	movle	r6, #1
 800b0ca:	4456      	add	r6, sl
 800b0cc:	2700      	movs	r7, #0
 800b0ce:	4649      	mov	r1, r9
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	4658      	mov	r0, fp
 800b0d4:	f000 fba4 	bl	800b820 <__lshift>
 800b0d8:	4621      	mov	r1, r4
 800b0da:	4681      	mov	r9, r0
 800b0dc:	f000 fc0c 	bl	800b8f8 <__mcmp>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	dcb0      	bgt.n	800b046 <_dtoa_r+0xa5e>
 800b0e4:	d102      	bne.n	800b0ec <_dtoa_r+0xb04>
 800b0e6:	f018 0f01 	tst.w	r8, #1
 800b0ea:	d1ac      	bne.n	800b046 <_dtoa_r+0xa5e>
 800b0ec:	4633      	mov	r3, r6
 800b0ee:	461e      	mov	r6, r3
 800b0f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0f4:	2a30      	cmp	r2, #48	@ 0x30
 800b0f6:	d0fa      	beq.n	800b0ee <_dtoa_r+0xb06>
 800b0f8:	e5c2      	b.n	800ac80 <_dtoa_r+0x698>
 800b0fa:	459a      	cmp	sl, r3
 800b0fc:	d1a4      	bne.n	800b048 <_dtoa_r+0xa60>
 800b0fe:	9b04      	ldr	r3, [sp, #16]
 800b100:	3301      	adds	r3, #1
 800b102:	9304      	str	r3, [sp, #16]
 800b104:	2331      	movs	r3, #49	@ 0x31
 800b106:	f88a 3000 	strb.w	r3, [sl]
 800b10a:	e5b9      	b.n	800ac80 <_dtoa_r+0x698>
 800b10c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b10e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b16c <_dtoa_r+0xb84>
 800b112:	b11b      	cbz	r3, 800b11c <_dtoa_r+0xb34>
 800b114:	f10a 0308 	add.w	r3, sl, #8
 800b118:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b11a:	6013      	str	r3, [r2, #0]
 800b11c:	4650      	mov	r0, sl
 800b11e:	b019      	add	sp, #100	@ 0x64
 800b120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b126:	2b01      	cmp	r3, #1
 800b128:	f77f ae37 	ble.w	800ad9a <_dtoa_r+0x7b2>
 800b12c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b12e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b130:	2001      	movs	r0, #1
 800b132:	e655      	b.n	800ade0 <_dtoa_r+0x7f8>
 800b134:	9b00      	ldr	r3, [sp, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	f77f aed6 	ble.w	800aee8 <_dtoa_r+0x900>
 800b13c:	4656      	mov	r6, sl
 800b13e:	4621      	mov	r1, r4
 800b140:	4648      	mov	r0, r9
 800b142:	f7ff f9c9 	bl	800a4d8 <quorem>
 800b146:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b14a:	f806 8b01 	strb.w	r8, [r6], #1
 800b14e:	9b00      	ldr	r3, [sp, #0]
 800b150:	eba6 020a 	sub.w	r2, r6, sl
 800b154:	4293      	cmp	r3, r2
 800b156:	ddb3      	ble.n	800b0c0 <_dtoa_r+0xad8>
 800b158:	4649      	mov	r1, r9
 800b15a:	2300      	movs	r3, #0
 800b15c:	220a      	movs	r2, #10
 800b15e:	4658      	mov	r0, fp
 800b160:	f000 f968 	bl	800b434 <__multadd>
 800b164:	4681      	mov	r9, r0
 800b166:	e7ea      	b.n	800b13e <_dtoa_r+0xb56>
 800b168:	0800deed 	.word	0x0800deed
 800b16c:	0800de71 	.word	0x0800de71

0800b170 <_free_r>:
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	4605      	mov	r5, r0
 800b174:	2900      	cmp	r1, #0
 800b176:	d041      	beq.n	800b1fc <_free_r+0x8c>
 800b178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b17c:	1f0c      	subs	r4, r1, #4
 800b17e:	2b00      	cmp	r3, #0
 800b180:	bfb8      	it	lt
 800b182:	18e4      	addlt	r4, r4, r3
 800b184:	f000 f8e8 	bl	800b358 <__malloc_lock>
 800b188:	4a1d      	ldr	r2, [pc, #116]	@ (800b200 <_free_r+0x90>)
 800b18a:	6813      	ldr	r3, [r2, #0]
 800b18c:	b933      	cbnz	r3, 800b19c <_free_r+0x2c>
 800b18e:	6063      	str	r3, [r4, #4]
 800b190:	6014      	str	r4, [r2, #0]
 800b192:	4628      	mov	r0, r5
 800b194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b198:	f000 b8e4 	b.w	800b364 <__malloc_unlock>
 800b19c:	42a3      	cmp	r3, r4
 800b19e:	d908      	bls.n	800b1b2 <_free_r+0x42>
 800b1a0:	6820      	ldr	r0, [r4, #0]
 800b1a2:	1821      	adds	r1, r4, r0
 800b1a4:	428b      	cmp	r3, r1
 800b1a6:	bf01      	itttt	eq
 800b1a8:	6819      	ldreq	r1, [r3, #0]
 800b1aa:	685b      	ldreq	r3, [r3, #4]
 800b1ac:	1809      	addeq	r1, r1, r0
 800b1ae:	6021      	streq	r1, [r4, #0]
 800b1b0:	e7ed      	b.n	800b18e <_free_r+0x1e>
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	b10b      	cbz	r3, 800b1bc <_free_r+0x4c>
 800b1b8:	42a3      	cmp	r3, r4
 800b1ba:	d9fa      	bls.n	800b1b2 <_free_r+0x42>
 800b1bc:	6811      	ldr	r1, [r2, #0]
 800b1be:	1850      	adds	r0, r2, r1
 800b1c0:	42a0      	cmp	r0, r4
 800b1c2:	d10b      	bne.n	800b1dc <_free_r+0x6c>
 800b1c4:	6820      	ldr	r0, [r4, #0]
 800b1c6:	4401      	add	r1, r0
 800b1c8:	1850      	adds	r0, r2, r1
 800b1ca:	4283      	cmp	r3, r0
 800b1cc:	6011      	str	r1, [r2, #0]
 800b1ce:	d1e0      	bne.n	800b192 <_free_r+0x22>
 800b1d0:	6818      	ldr	r0, [r3, #0]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	6053      	str	r3, [r2, #4]
 800b1d6:	4408      	add	r0, r1
 800b1d8:	6010      	str	r0, [r2, #0]
 800b1da:	e7da      	b.n	800b192 <_free_r+0x22>
 800b1dc:	d902      	bls.n	800b1e4 <_free_r+0x74>
 800b1de:	230c      	movs	r3, #12
 800b1e0:	602b      	str	r3, [r5, #0]
 800b1e2:	e7d6      	b.n	800b192 <_free_r+0x22>
 800b1e4:	6820      	ldr	r0, [r4, #0]
 800b1e6:	1821      	adds	r1, r4, r0
 800b1e8:	428b      	cmp	r3, r1
 800b1ea:	bf04      	itt	eq
 800b1ec:	6819      	ldreq	r1, [r3, #0]
 800b1ee:	685b      	ldreq	r3, [r3, #4]
 800b1f0:	6063      	str	r3, [r4, #4]
 800b1f2:	bf04      	itt	eq
 800b1f4:	1809      	addeq	r1, r1, r0
 800b1f6:	6021      	streq	r1, [r4, #0]
 800b1f8:	6054      	str	r4, [r2, #4]
 800b1fa:	e7ca      	b.n	800b192 <_free_r+0x22>
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}
 800b1fe:	bf00      	nop
 800b200:	20002840 	.word	0x20002840

0800b204 <malloc>:
 800b204:	4b02      	ldr	r3, [pc, #8]	@ (800b210 <malloc+0xc>)
 800b206:	4601      	mov	r1, r0
 800b208:	6818      	ldr	r0, [r3, #0]
 800b20a:	f000 b825 	b.w	800b258 <_malloc_r>
 800b20e:	bf00      	nop
 800b210:	20000018 	.word	0x20000018

0800b214 <sbrk_aligned>:
 800b214:	b570      	push	{r4, r5, r6, lr}
 800b216:	4e0f      	ldr	r6, [pc, #60]	@ (800b254 <sbrk_aligned+0x40>)
 800b218:	460c      	mov	r4, r1
 800b21a:	6831      	ldr	r1, [r6, #0]
 800b21c:	4605      	mov	r5, r0
 800b21e:	b911      	cbnz	r1, 800b226 <sbrk_aligned+0x12>
 800b220:	f001 fe0c 	bl	800ce3c <_sbrk_r>
 800b224:	6030      	str	r0, [r6, #0]
 800b226:	4621      	mov	r1, r4
 800b228:	4628      	mov	r0, r5
 800b22a:	f001 fe07 	bl	800ce3c <_sbrk_r>
 800b22e:	1c43      	adds	r3, r0, #1
 800b230:	d103      	bne.n	800b23a <sbrk_aligned+0x26>
 800b232:	f04f 34ff 	mov.w	r4, #4294967295
 800b236:	4620      	mov	r0, r4
 800b238:	bd70      	pop	{r4, r5, r6, pc}
 800b23a:	1cc4      	adds	r4, r0, #3
 800b23c:	f024 0403 	bic.w	r4, r4, #3
 800b240:	42a0      	cmp	r0, r4
 800b242:	d0f8      	beq.n	800b236 <sbrk_aligned+0x22>
 800b244:	1a21      	subs	r1, r4, r0
 800b246:	4628      	mov	r0, r5
 800b248:	f001 fdf8 	bl	800ce3c <_sbrk_r>
 800b24c:	3001      	adds	r0, #1
 800b24e:	d1f2      	bne.n	800b236 <sbrk_aligned+0x22>
 800b250:	e7ef      	b.n	800b232 <sbrk_aligned+0x1e>
 800b252:	bf00      	nop
 800b254:	2000283c 	.word	0x2000283c

0800b258 <_malloc_r>:
 800b258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b25c:	1ccd      	adds	r5, r1, #3
 800b25e:	f025 0503 	bic.w	r5, r5, #3
 800b262:	3508      	adds	r5, #8
 800b264:	2d0c      	cmp	r5, #12
 800b266:	bf38      	it	cc
 800b268:	250c      	movcc	r5, #12
 800b26a:	2d00      	cmp	r5, #0
 800b26c:	4606      	mov	r6, r0
 800b26e:	db01      	blt.n	800b274 <_malloc_r+0x1c>
 800b270:	42a9      	cmp	r1, r5
 800b272:	d904      	bls.n	800b27e <_malloc_r+0x26>
 800b274:	230c      	movs	r3, #12
 800b276:	6033      	str	r3, [r6, #0]
 800b278:	2000      	movs	r0, #0
 800b27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b27e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b354 <_malloc_r+0xfc>
 800b282:	f000 f869 	bl	800b358 <__malloc_lock>
 800b286:	f8d8 3000 	ldr.w	r3, [r8]
 800b28a:	461c      	mov	r4, r3
 800b28c:	bb44      	cbnz	r4, 800b2e0 <_malloc_r+0x88>
 800b28e:	4629      	mov	r1, r5
 800b290:	4630      	mov	r0, r6
 800b292:	f7ff ffbf 	bl	800b214 <sbrk_aligned>
 800b296:	1c43      	adds	r3, r0, #1
 800b298:	4604      	mov	r4, r0
 800b29a:	d158      	bne.n	800b34e <_malloc_r+0xf6>
 800b29c:	f8d8 4000 	ldr.w	r4, [r8]
 800b2a0:	4627      	mov	r7, r4
 800b2a2:	2f00      	cmp	r7, #0
 800b2a4:	d143      	bne.n	800b32e <_malloc_r+0xd6>
 800b2a6:	2c00      	cmp	r4, #0
 800b2a8:	d04b      	beq.n	800b342 <_malloc_r+0xea>
 800b2aa:	6823      	ldr	r3, [r4, #0]
 800b2ac:	4639      	mov	r1, r7
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	eb04 0903 	add.w	r9, r4, r3
 800b2b4:	f001 fdc2 	bl	800ce3c <_sbrk_r>
 800b2b8:	4581      	cmp	r9, r0
 800b2ba:	d142      	bne.n	800b342 <_malloc_r+0xea>
 800b2bc:	6821      	ldr	r1, [r4, #0]
 800b2be:	1a6d      	subs	r5, r5, r1
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f7ff ffa6 	bl	800b214 <sbrk_aligned>
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	d03a      	beq.n	800b342 <_malloc_r+0xea>
 800b2cc:	6823      	ldr	r3, [r4, #0]
 800b2ce:	442b      	add	r3, r5
 800b2d0:	6023      	str	r3, [r4, #0]
 800b2d2:	f8d8 3000 	ldr.w	r3, [r8]
 800b2d6:	685a      	ldr	r2, [r3, #4]
 800b2d8:	bb62      	cbnz	r2, 800b334 <_malloc_r+0xdc>
 800b2da:	f8c8 7000 	str.w	r7, [r8]
 800b2de:	e00f      	b.n	800b300 <_malloc_r+0xa8>
 800b2e0:	6822      	ldr	r2, [r4, #0]
 800b2e2:	1b52      	subs	r2, r2, r5
 800b2e4:	d420      	bmi.n	800b328 <_malloc_r+0xd0>
 800b2e6:	2a0b      	cmp	r2, #11
 800b2e8:	d917      	bls.n	800b31a <_malloc_r+0xc2>
 800b2ea:	1961      	adds	r1, r4, r5
 800b2ec:	42a3      	cmp	r3, r4
 800b2ee:	6025      	str	r5, [r4, #0]
 800b2f0:	bf18      	it	ne
 800b2f2:	6059      	strne	r1, [r3, #4]
 800b2f4:	6863      	ldr	r3, [r4, #4]
 800b2f6:	bf08      	it	eq
 800b2f8:	f8c8 1000 	streq.w	r1, [r8]
 800b2fc:	5162      	str	r2, [r4, r5]
 800b2fe:	604b      	str	r3, [r1, #4]
 800b300:	4630      	mov	r0, r6
 800b302:	f000 f82f 	bl	800b364 <__malloc_unlock>
 800b306:	f104 000b 	add.w	r0, r4, #11
 800b30a:	1d23      	adds	r3, r4, #4
 800b30c:	f020 0007 	bic.w	r0, r0, #7
 800b310:	1ac2      	subs	r2, r0, r3
 800b312:	bf1c      	itt	ne
 800b314:	1a1b      	subne	r3, r3, r0
 800b316:	50a3      	strne	r3, [r4, r2]
 800b318:	e7af      	b.n	800b27a <_malloc_r+0x22>
 800b31a:	6862      	ldr	r2, [r4, #4]
 800b31c:	42a3      	cmp	r3, r4
 800b31e:	bf0c      	ite	eq
 800b320:	f8c8 2000 	streq.w	r2, [r8]
 800b324:	605a      	strne	r2, [r3, #4]
 800b326:	e7eb      	b.n	800b300 <_malloc_r+0xa8>
 800b328:	4623      	mov	r3, r4
 800b32a:	6864      	ldr	r4, [r4, #4]
 800b32c:	e7ae      	b.n	800b28c <_malloc_r+0x34>
 800b32e:	463c      	mov	r4, r7
 800b330:	687f      	ldr	r7, [r7, #4]
 800b332:	e7b6      	b.n	800b2a2 <_malloc_r+0x4a>
 800b334:	461a      	mov	r2, r3
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	42a3      	cmp	r3, r4
 800b33a:	d1fb      	bne.n	800b334 <_malloc_r+0xdc>
 800b33c:	2300      	movs	r3, #0
 800b33e:	6053      	str	r3, [r2, #4]
 800b340:	e7de      	b.n	800b300 <_malloc_r+0xa8>
 800b342:	230c      	movs	r3, #12
 800b344:	6033      	str	r3, [r6, #0]
 800b346:	4630      	mov	r0, r6
 800b348:	f000 f80c 	bl	800b364 <__malloc_unlock>
 800b34c:	e794      	b.n	800b278 <_malloc_r+0x20>
 800b34e:	6005      	str	r5, [r0, #0]
 800b350:	e7d6      	b.n	800b300 <_malloc_r+0xa8>
 800b352:	bf00      	nop
 800b354:	20002840 	.word	0x20002840

0800b358 <__malloc_lock>:
 800b358:	4801      	ldr	r0, [pc, #4]	@ (800b360 <__malloc_lock+0x8>)
 800b35a:	f7ff b8b4 	b.w	800a4c6 <__retarget_lock_acquire_recursive>
 800b35e:	bf00      	nop
 800b360:	20002838 	.word	0x20002838

0800b364 <__malloc_unlock>:
 800b364:	4801      	ldr	r0, [pc, #4]	@ (800b36c <__malloc_unlock+0x8>)
 800b366:	f7ff b8af 	b.w	800a4c8 <__retarget_lock_release_recursive>
 800b36a:	bf00      	nop
 800b36c:	20002838 	.word	0x20002838

0800b370 <_Balloc>:
 800b370:	b570      	push	{r4, r5, r6, lr}
 800b372:	69c6      	ldr	r6, [r0, #28]
 800b374:	4604      	mov	r4, r0
 800b376:	460d      	mov	r5, r1
 800b378:	b976      	cbnz	r6, 800b398 <_Balloc+0x28>
 800b37a:	2010      	movs	r0, #16
 800b37c:	f7ff ff42 	bl	800b204 <malloc>
 800b380:	4602      	mov	r2, r0
 800b382:	61e0      	str	r0, [r4, #28]
 800b384:	b920      	cbnz	r0, 800b390 <_Balloc+0x20>
 800b386:	4b18      	ldr	r3, [pc, #96]	@ (800b3e8 <_Balloc+0x78>)
 800b388:	4818      	ldr	r0, [pc, #96]	@ (800b3ec <_Balloc+0x7c>)
 800b38a:	216b      	movs	r1, #107	@ 0x6b
 800b38c:	f001 fd7c 	bl	800ce88 <__assert_func>
 800b390:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b394:	6006      	str	r6, [r0, #0]
 800b396:	60c6      	str	r6, [r0, #12]
 800b398:	69e6      	ldr	r6, [r4, #28]
 800b39a:	68f3      	ldr	r3, [r6, #12]
 800b39c:	b183      	cbz	r3, 800b3c0 <_Balloc+0x50>
 800b39e:	69e3      	ldr	r3, [r4, #28]
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3a6:	b9b8      	cbnz	r0, 800b3d8 <_Balloc+0x68>
 800b3a8:	2101      	movs	r1, #1
 800b3aa:	fa01 f605 	lsl.w	r6, r1, r5
 800b3ae:	1d72      	adds	r2, r6, #5
 800b3b0:	0092      	lsls	r2, r2, #2
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f001 fd86 	bl	800cec4 <_calloc_r>
 800b3b8:	b160      	cbz	r0, 800b3d4 <_Balloc+0x64>
 800b3ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3be:	e00e      	b.n	800b3de <_Balloc+0x6e>
 800b3c0:	2221      	movs	r2, #33	@ 0x21
 800b3c2:	2104      	movs	r1, #4
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	f001 fd7d 	bl	800cec4 <_calloc_r>
 800b3ca:	69e3      	ldr	r3, [r4, #28]
 800b3cc:	60f0      	str	r0, [r6, #12]
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d1e4      	bne.n	800b39e <_Balloc+0x2e>
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	bd70      	pop	{r4, r5, r6, pc}
 800b3d8:	6802      	ldr	r2, [r0, #0]
 800b3da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b3de:	2300      	movs	r3, #0
 800b3e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3e4:	e7f7      	b.n	800b3d6 <_Balloc+0x66>
 800b3e6:	bf00      	nop
 800b3e8:	0800de7e 	.word	0x0800de7e
 800b3ec:	0800defe 	.word	0x0800defe

0800b3f0 <_Bfree>:
 800b3f0:	b570      	push	{r4, r5, r6, lr}
 800b3f2:	69c6      	ldr	r6, [r0, #28]
 800b3f4:	4605      	mov	r5, r0
 800b3f6:	460c      	mov	r4, r1
 800b3f8:	b976      	cbnz	r6, 800b418 <_Bfree+0x28>
 800b3fa:	2010      	movs	r0, #16
 800b3fc:	f7ff ff02 	bl	800b204 <malloc>
 800b400:	4602      	mov	r2, r0
 800b402:	61e8      	str	r0, [r5, #28]
 800b404:	b920      	cbnz	r0, 800b410 <_Bfree+0x20>
 800b406:	4b09      	ldr	r3, [pc, #36]	@ (800b42c <_Bfree+0x3c>)
 800b408:	4809      	ldr	r0, [pc, #36]	@ (800b430 <_Bfree+0x40>)
 800b40a:	218f      	movs	r1, #143	@ 0x8f
 800b40c:	f001 fd3c 	bl	800ce88 <__assert_func>
 800b410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b414:	6006      	str	r6, [r0, #0]
 800b416:	60c6      	str	r6, [r0, #12]
 800b418:	b13c      	cbz	r4, 800b42a <_Bfree+0x3a>
 800b41a:	69eb      	ldr	r3, [r5, #28]
 800b41c:	6862      	ldr	r2, [r4, #4]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b424:	6021      	str	r1, [r4, #0]
 800b426:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b42a:	bd70      	pop	{r4, r5, r6, pc}
 800b42c:	0800de7e 	.word	0x0800de7e
 800b430:	0800defe 	.word	0x0800defe

0800b434 <__multadd>:
 800b434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b438:	690d      	ldr	r5, [r1, #16]
 800b43a:	4607      	mov	r7, r0
 800b43c:	460c      	mov	r4, r1
 800b43e:	461e      	mov	r6, r3
 800b440:	f101 0c14 	add.w	ip, r1, #20
 800b444:	2000      	movs	r0, #0
 800b446:	f8dc 3000 	ldr.w	r3, [ip]
 800b44a:	b299      	uxth	r1, r3
 800b44c:	fb02 6101 	mla	r1, r2, r1, r6
 800b450:	0c1e      	lsrs	r6, r3, #16
 800b452:	0c0b      	lsrs	r3, r1, #16
 800b454:	fb02 3306 	mla	r3, r2, r6, r3
 800b458:	b289      	uxth	r1, r1
 800b45a:	3001      	adds	r0, #1
 800b45c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b460:	4285      	cmp	r5, r0
 800b462:	f84c 1b04 	str.w	r1, [ip], #4
 800b466:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b46a:	dcec      	bgt.n	800b446 <__multadd+0x12>
 800b46c:	b30e      	cbz	r6, 800b4b2 <__multadd+0x7e>
 800b46e:	68a3      	ldr	r3, [r4, #8]
 800b470:	42ab      	cmp	r3, r5
 800b472:	dc19      	bgt.n	800b4a8 <__multadd+0x74>
 800b474:	6861      	ldr	r1, [r4, #4]
 800b476:	4638      	mov	r0, r7
 800b478:	3101      	adds	r1, #1
 800b47a:	f7ff ff79 	bl	800b370 <_Balloc>
 800b47e:	4680      	mov	r8, r0
 800b480:	b928      	cbnz	r0, 800b48e <__multadd+0x5a>
 800b482:	4602      	mov	r2, r0
 800b484:	4b0c      	ldr	r3, [pc, #48]	@ (800b4b8 <__multadd+0x84>)
 800b486:	480d      	ldr	r0, [pc, #52]	@ (800b4bc <__multadd+0x88>)
 800b488:	21ba      	movs	r1, #186	@ 0xba
 800b48a:	f001 fcfd 	bl	800ce88 <__assert_func>
 800b48e:	6922      	ldr	r2, [r4, #16]
 800b490:	3202      	adds	r2, #2
 800b492:	f104 010c 	add.w	r1, r4, #12
 800b496:	0092      	lsls	r2, r2, #2
 800b498:	300c      	adds	r0, #12
 800b49a:	f001 fcdf 	bl	800ce5c <memcpy>
 800b49e:	4621      	mov	r1, r4
 800b4a0:	4638      	mov	r0, r7
 800b4a2:	f7ff ffa5 	bl	800b3f0 <_Bfree>
 800b4a6:	4644      	mov	r4, r8
 800b4a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4ac:	3501      	adds	r5, #1
 800b4ae:	615e      	str	r6, [r3, #20]
 800b4b0:	6125      	str	r5, [r4, #16]
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4b8:	0800deed 	.word	0x0800deed
 800b4bc:	0800defe 	.word	0x0800defe

0800b4c0 <__s2b>:
 800b4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4c4:	460c      	mov	r4, r1
 800b4c6:	4615      	mov	r5, r2
 800b4c8:	461f      	mov	r7, r3
 800b4ca:	2209      	movs	r2, #9
 800b4cc:	3308      	adds	r3, #8
 800b4ce:	4606      	mov	r6, r0
 800b4d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	db09      	blt.n	800b4f0 <__s2b+0x30>
 800b4dc:	4630      	mov	r0, r6
 800b4de:	f7ff ff47 	bl	800b370 <_Balloc>
 800b4e2:	b940      	cbnz	r0, 800b4f6 <__s2b+0x36>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	4b19      	ldr	r3, [pc, #100]	@ (800b54c <__s2b+0x8c>)
 800b4e8:	4819      	ldr	r0, [pc, #100]	@ (800b550 <__s2b+0x90>)
 800b4ea:	21d3      	movs	r1, #211	@ 0xd3
 800b4ec:	f001 fccc 	bl	800ce88 <__assert_func>
 800b4f0:	0052      	lsls	r2, r2, #1
 800b4f2:	3101      	adds	r1, #1
 800b4f4:	e7f0      	b.n	800b4d8 <__s2b+0x18>
 800b4f6:	9b08      	ldr	r3, [sp, #32]
 800b4f8:	6143      	str	r3, [r0, #20]
 800b4fa:	2d09      	cmp	r5, #9
 800b4fc:	f04f 0301 	mov.w	r3, #1
 800b500:	6103      	str	r3, [r0, #16]
 800b502:	dd16      	ble.n	800b532 <__s2b+0x72>
 800b504:	f104 0909 	add.w	r9, r4, #9
 800b508:	46c8      	mov	r8, r9
 800b50a:	442c      	add	r4, r5
 800b50c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b510:	4601      	mov	r1, r0
 800b512:	3b30      	subs	r3, #48	@ 0x30
 800b514:	220a      	movs	r2, #10
 800b516:	4630      	mov	r0, r6
 800b518:	f7ff ff8c 	bl	800b434 <__multadd>
 800b51c:	45a0      	cmp	r8, r4
 800b51e:	d1f5      	bne.n	800b50c <__s2b+0x4c>
 800b520:	f1a5 0408 	sub.w	r4, r5, #8
 800b524:	444c      	add	r4, r9
 800b526:	1b2d      	subs	r5, r5, r4
 800b528:	1963      	adds	r3, r4, r5
 800b52a:	42bb      	cmp	r3, r7
 800b52c:	db04      	blt.n	800b538 <__s2b+0x78>
 800b52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b532:	340a      	adds	r4, #10
 800b534:	2509      	movs	r5, #9
 800b536:	e7f6      	b.n	800b526 <__s2b+0x66>
 800b538:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b53c:	4601      	mov	r1, r0
 800b53e:	3b30      	subs	r3, #48	@ 0x30
 800b540:	220a      	movs	r2, #10
 800b542:	4630      	mov	r0, r6
 800b544:	f7ff ff76 	bl	800b434 <__multadd>
 800b548:	e7ee      	b.n	800b528 <__s2b+0x68>
 800b54a:	bf00      	nop
 800b54c:	0800deed 	.word	0x0800deed
 800b550:	0800defe 	.word	0x0800defe

0800b554 <__hi0bits>:
 800b554:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b558:	4603      	mov	r3, r0
 800b55a:	bf36      	itet	cc
 800b55c:	0403      	lslcc	r3, r0, #16
 800b55e:	2000      	movcs	r0, #0
 800b560:	2010      	movcc	r0, #16
 800b562:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b566:	bf3c      	itt	cc
 800b568:	021b      	lslcc	r3, r3, #8
 800b56a:	3008      	addcc	r0, #8
 800b56c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b570:	bf3c      	itt	cc
 800b572:	011b      	lslcc	r3, r3, #4
 800b574:	3004      	addcc	r0, #4
 800b576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b57a:	bf3c      	itt	cc
 800b57c:	009b      	lslcc	r3, r3, #2
 800b57e:	3002      	addcc	r0, #2
 800b580:	2b00      	cmp	r3, #0
 800b582:	db05      	blt.n	800b590 <__hi0bits+0x3c>
 800b584:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b588:	f100 0001 	add.w	r0, r0, #1
 800b58c:	bf08      	it	eq
 800b58e:	2020      	moveq	r0, #32
 800b590:	4770      	bx	lr

0800b592 <__lo0bits>:
 800b592:	6803      	ldr	r3, [r0, #0]
 800b594:	4602      	mov	r2, r0
 800b596:	f013 0007 	ands.w	r0, r3, #7
 800b59a:	d00b      	beq.n	800b5b4 <__lo0bits+0x22>
 800b59c:	07d9      	lsls	r1, r3, #31
 800b59e:	d421      	bmi.n	800b5e4 <__lo0bits+0x52>
 800b5a0:	0798      	lsls	r0, r3, #30
 800b5a2:	bf49      	itett	mi
 800b5a4:	085b      	lsrmi	r3, r3, #1
 800b5a6:	089b      	lsrpl	r3, r3, #2
 800b5a8:	2001      	movmi	r0, #1
 800b5aa:	6013      	strmi	r3, [r2, #0]
 800b5ac:	bf5c      	itt	pl
 800b5ae:	6013      	strpl	r3, [r2, #0]
 800b5b0:	2002      	movpl	r0, #2
 800b5b2:	4770      	bx	lr
 800b5b4:	b299      	uxth	r1, r3
 800b5b6:	b909      	cbnz	r1, 800b5bc <__lo0bits+0x2a>
 800b5b8:	0c1b      	lsrs	r3, r3, #16
 800b5ba:	2010      	movs	r0, #16
 800b5bc:	b2d9      	uxtb	r1, r3
 800b5be:	b909      	cbnz	r1, 800b5c4 <__lo0bits+0x32>
 800b5c0:	3008      	adds	r0, #8
 800b5c2:	0a1b      	lsrs	r3, r3, #8
 800b5c4:	0719      	lsls	r1, r3, #28
 800b5c6:	bf04      	itt	eq
 800b5c8:	091b      	lsreq	r3, r3, #4
 800b5ca:	3004      	addeq	r0, #4
 800b5cc:	0799      	lsls	r1, r3, #30
 800b5ce:	bf04      	itt	eq
 800b5d0:	089b      	lsreq	r3, r3, #2
 800b5d2:	3002      	addeq	r0, #2
 800b5d4:	07d9      	lsls	r1, r3, #31
 800b5d6:	d403      	bmi.n	800b5e0 <__lo0bits+0x4e>
 800b5d8:	085b      	lsrs	r3, r3, #1
 800b5da:	f100 0001 	add.w	r0, r0, #1
 800b5de:	d003      	beq.n	800b5e8 <__lo0bits+0x56>
 800b5e0:	6013      	str	r3, [r2, #0]
 800b5e2:	4770      	bx	lr
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	4770      	bx	lr
 800b5e8:	2020      	movs	r0, #32
 800b5ea:	4770      	bx	lr

0800b5ec <__i2b>:
 800b5ec:	b510      	push	{r4, lr}
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	2101      	movs	r1, #1
 800b5f2:	f7ff febd 	bl	800b370 <_Balloc>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	b928      	cbnz	r0, 800b606 <__i2b+0x1a>
 800b5fa:	4b05      	ldr	r3, [pc, #20]	@ (800b610 <__i2b+0x24>)
 800b5fc:	4805      	ldr	r0, [pc, #20]	@ (800b614 <__i2b+0x28>)
 800b5fe:	f240 1145 	movw	r1, #325	@ 0x145
 800b602:	f001 fc41 	bl	800ce88 <__assert_func>
 800b606:	2301      	movs	r3, #1
 800b608:	6144      	str	r4, [r0, #20]
 800b60a:	6103      	str	r3, [r0, #16]
 800b60c:	bd10      	pop	{r4, pc}
 800b60e:	bf00      	nop
 800b610:	0800deed 	.word	0x0800deed
 800b614:	0800defe 	.word	0x0800defe

0800b618 <__multiply>:
 800b618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	4614      	mov	r4, r2
 800b61e:	690a      	ldr	r2, [r1, #16]
 800b620:	6923      	ldr	r3, [r4, #16]
 800b622:	429a      	cmp	r2, r3
 800b624:	bfa8      	it	ge
 800b626:	4623      	movge	r3, r4
 800b628:	460f      	mov	r7, r1
 800b62a:	bfa4      	itt	ge
 800b62c:	460c      	movge	r4, r1
 800b62e:	461f      	movge	r7, r3
 800b630:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b634:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b638:	68a3      	ldr	r3, [r4, #8]
 800b63a:	6861      	ldr	r1, [r4, #4]
 800b63c:	eb0a 0609 	add.w	r6, sl, r9
 800b640:	42b3      	cmp	r3, r6
 800b642:	b085      	sub	sp, #20
 800b644:	bfb8      	it	lt
 800b646:	3101      	addlt	r1, #1
 800b648:	f7ff fe92 	bl	800b370 <_Balloc>
 800b64c:	b930      	cbnz	r0, 800b65c <__multiply+0x44>
 800b64e:	4602      	mov	r2, r0
 800b650:	4b44      	ldr	r3, [pc, #272]	@ (800b764 <__multiply+0x14c>)
 800b652:	4845      	ldr	r0, [pc, #276]	@ (800b768 <__multiply+0x150>)
 800b654:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b658:	f001 fc16 	bl	800ce88 <__assert_func>
 800b65c:	f100 0514 	add.w	r5, r0, #20
 800b660:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b664:	462b      	mov	r3, r5
 800b666:	2200      	movs	r2, #0
 800b668:	4543      	cmp	r3, r8
 800b66a:	d321      	bcc.n	800b6b0 <__multiply+0x98>
 800b66c:	f107 0114 	add.w	r1, r7, #20
 800b670:	f104 0214 	add.w	r2, r4, #20
 800b674:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b678:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b67c:	9302      	str	r3, [sp, #8]
 800b67e:	1b13      	subs	r3, r2, r4
 800b680:	3b15      	subs	r3, #21
 800b682:	f023 0303 	bic.w	r3, r3, #3
 800b686:	3304      	adds	r3, #4
 800b688:	f104 0715 	add.w	r7, r4, #21
 800b68c:	42ba      	cmp	r2, r7
 800b68e:	bf38      	it	cc
 800b690:	2304      	movcc	r3, #4
 800b692:	9301      	str	r3, [sp, #4]
 800b694:	9b02      	ldr	r3, [sp, #8]
 800b696:	9103      	str	r1, [sp, #12]
 800b698:	428b      	cmp	r3, r1
 800b69a:	d80c      	bhi.n	800b6b6 <__multiply+0x9e>
 800b69c:	2e00      	cmp	r6, #0
 800b69e:	dd03      	ble.n	800b6a8 <__multiply+0x90>
 800b6a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d05b      	beq.n	800b760 <__multiply+0x148>
 800b6a8:	6106      	str	r6, [r0, #16]
 800b6aa:	b005      	add	sp, #20
 800b6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b0:	f843 2b04 	str.w	r2, [r3], #4
 800b6b4:	e7d8      	b.n	800b668 <__multiply+0x50>
 800b6b6:	f8b1 a000 	ldrh.w	sl, [r1]
 800b6ba:	f1ba 0f00 	cmp.w	sl, #0
 800b6be:	d024      	beq.n	800b70a <__multiply+0xf2>
 800b6c0:	f104 0e14 	add.w	lr, r4, #20
 800b6c4:	46a9      	mov	r9, r5
 800b6c6:	f04f 0c00 	mov.w	ip, #0
 800b6ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b6ce:	f8d9 3000 	ldr.w	r3, [r9]
 800b6d2:	fa1f fb87 	uxth.w	fp, r7
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800b6dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b6e0:	f8d9 7000 	ldr.w	r7, [r9]
 800b6e4:	4463      	add	r3, ip
 800b6e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b6ea:	fb0a c70b 	mla	r7, sl, fp, ip
 800b6ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b6f8:	4572      	cmp	r2, lr
 800b6fa:	f849 3b04 	str.w	r3, [r9], #4
 800b6fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b702:	d8e2      	bhi.n	800b6ca <__multiply+0xb2>
 800b704:	9b01      	ldr	r3, [sp, #4]
 800b706:	f845 c003 	str.w	ip, [r5, r3]
 800b70a:	9b03      	ldr	r3, [sp, #12]
 800b70c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b710:	3104      	adds	r1, #4
 800b712:	f1b9 0f00 	cmp.w	r9, #0
 800b716:	d021      	beq.n	800b75c <__multiply+0x144>
 800b718:	682b      	ldr	r3, [r5, #0]
 800b71a:	f104 0c14 	add.w	ip, r4, #20
 800b71e:	46ae      	mov	lr, r5
 800b720:	f04f 0a00 	mov.w	sl, #0
 800b724:	f8bc b000 	ldrh.w	fp, [ip]
 800b728:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b72c:	fb09 770b 	mla	r7, r9, fp, r7
 800b730:	4457      	add	r7, sl
 800b732:	b29b      	uxth	r3, r3
 800b734:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b738:	f84e 3b04 	str.w	r3, [lr], #4
 800b73c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b740:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b744:	f8be 3000 	ldrh.w	r3, [lr]
 800b748:	fb09 330a 	mla	r3, r9, sl, r3
 800b74c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b750:	4562      	cmp	r2, ip
 800b752:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b756:	d8e5      	bhi.n	800b724 <__multiply+0x10c>
 800b758:	9f01      	ldr	r7, [sp, #4]
 800b75a:	51eb      	str	r3, [r5, r7]
 800b75c:	3504      	adds	r5, #4
 800b75e:	e799      	b.n	800b694 <__multiply+0x7c>
 800b760:	3e01      	subs	r6, #1
 800b762:	e79b      	b.n	800b69c <__multiply+0x84>
 800b764:	0800deed 	.word	0x0800deed
 800b768:	0800defe 	.word	0x0800defe

0800b76c <__pow5mult>:
 800b76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b770:	4615      	mov	r5, r2
 800b772:	f012 0203 	ands.w	r2, r2, #3
 800b776:	4607      	mov	r7, r0
 800b778:	460e      	mov	r6, r1
 800b77a:	d007      	beq.n	800b78c <__pow5mult+0x20>
 800b77c:	4c25      	ldr	r4, [pc, #148]	@ (800b814 <__pow5mult+0xa8>)
 800b77e:	3a01      	subs	r2, #1
 800b780:	2300      	movs	r3, #0
 800b782:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b786:	f7ff fe55 	bl	800b434 <__multadd>
 800b78a:	4606      	mov	r6, r0
 800b78c:	10ad      	asrs	r5, r5, #2
 800b78e:	d03d      	beq.n	800b80c <__pow5mult+0xa0>
 800b790:	69fc      	ldr	r4, [r7, #28]
 800b792:	b97c      	cbnz	r4, 800b7b4 <__pow5mult+0x48>
 800b794:	2010      	movs	r0, #16
 800b796:	f7ff fd35 	bl	800b204 <malloc>
 800b79a:	4602      	mov	r2, r0
 800b79c:	61f8      	str	r0, [r7, #28]
 800b79e:	b928      	cbnz	r0, 800b7ac <__pow5mult+0x40>
 800b7a0:	4b1d      	ldr	r3, [pc, #116]	@ (800b818 <__pow5mult+0xac>)
 800b7a2:	481e      	ldr	r0, [pc, #120]	@ (800b81c <__pow5mult+0xb0>)
 800b7a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b7a8:	f001 fb6e 	bl	800ce88 <__assert_func>
 800b7ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7b0:	6004      	str	r4, [r0, #0]
 800b7b2:	60c4      	str	r4, [r0, #12]
 800b7b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b7b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7bc:	b94c      	cbnz	r4, 800b7d2 <__pow5mult+0x66>
 800b7be:	f240 2171 	movw	r1, #625	@ 0x271
 800b7c2:	4638      	mov	r0, r7
 800b7c4:	f7ff ff12 	bl	800b5ec <__i2b>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	6003      	str	r3, [r0, #0]
 800b7d2:	f04f 0900 	mov.w	r9, #0
 800b7d6:	07eb      	lsls	r3, r5, #31
 800b7d8:	d50a      	bpl.n	800b7f0 <__pow5mult+0x84>
 800b7da:	4631      	mov	r1, r6
 800b7dc:	4622      	mov	r2, r4
 800b7de:	4638      	mov	r0, r7
 800b7e0:	f7ff ff1a 	bl	800b618 <__multiply>
 800b7e4:	4631      	mov	r1, r6
 800b7e6:	4680      	mov	r8, r0
 800b7e8:	4638      	mov	r0, r7
 800b7ea:	f7ff fe01 	bl	800b3f0 <_Bfree>
 800b7ee:	4646      	mov	r6, r8
 800b7f0:	106d      	asrs	r5, r5, #1
 800b7f2:	d00b      	beq.n	800b80c <__pow5mult+0xa0>
 800b7f4:	6820      	ldr	r0, [r4, #0]
 800b7f6:	b938      	cbnz	r0, 800b808 <__pow5mult+0x9c>
 800b7f8:	4622      	mov	r2, r4
 800b7fa:	4621      	mov	r1, r4
 800b7fc:	4638      	mov	r0, r7
 800b7fe:	f7ff ff0b 	bl	800b618 <__multiply>
 800b802:	6020      	str	r0, [r4, #0]
 800b804:	f8c0 9000 	str.w	r9, [r0]
 800b808:	4604      	mov	r4, r0
 800b80a:	e7e4      	b.n	800b7d6 <__pow5mult+0x6a>
 800b80c:	4630      	mov	r0, r6
 800b80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b812:	bf00      	nop
 800b814:	0800df58 	.word	0x0800df58
 800b818:	0800de7e 	.word	0x0800de7e
 800b81c:	0800defe 	.word	0x0800defe

0800b820 <__lshift>:
 800b820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b824:	460c      	mov	r4, r1
 800b826:	6849      	ldr	r1, [r1, #4]
 800b828:	6923      	ldr	r3, [r4, #16]
 800b82a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b82e:	68a3      	ldr	r3, [r4, #8]
 800b830:	4607      	mov	r7, r0
 800b832:	4691      	mov	r9, r2
 800b834:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b838:	f108 0601 	add.w	r6, r8, #1
 800b83c:	42b3      	cmp	r3, r6
 800b83e:	db0b      	blt.n	800b858 <__lshift+0x38>
 800b840:	4638      	mov	r0, r7
 800b842:	f7ff fd95 	bl	800b370 <_Balloc>
 800b846:	4605      	mov	r5, r0
 800b848:	b948      	cbnz	r0, 800b85e <__lshift+0x3e>
 800b84a:	4602      	mov	r2, r0
 800b84c:	4b28      	ldr	r3, [pc, #160]	@ (800b8f0 <__lshift+0xd0>)
 800b84e:	4829      	ldr	r0, [pc, #164]	@ (800b8f4 <__lshift+0xd4>)
 800b850:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b854:	f001 fb18 	bl	800ce88 <__assert_func>
 800b858:	3101      	adds	r1, #1
 800b85a:	005b      	lsls	r3, r3, #1
 800b85c:	e7ee      	b.n	800b83c <__lshift+0x1c>
 800b85e:	2300      	movs	r3, #0
 800b860:	f100 0114 	add.w	r1, r0, #20
 800b864:	f100 0210 	add.w	r2, r0, #16
 800b868:	4618      	mov	r0, r3
 800b86a:	4553      	cmp	r3, sl
 800b86c:	db33      	blt.n	800b8d6 <__lshift+0xb6>
 800b86e:	6920      	ldr	r0, [r4, #16]
 800b870:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b874:	f104 0314 	add.w	r3, r4, #20
 800b878:	f019 091f 	ands.w	r9, r9, #31
 800b87c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b880:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b884:	d02b      	beq.n	800b8de <__lshift+0xbe>
 800b886:	f1c9 0e20 	rsb	lr, r9, #32
 800b88a:	468a      	mov	sl, r1
 800b88c:	2200      	movs	r2, #0
 800b88e:	6818      	ldr	r0, [r3, #0]
 800b890:	fa00 f009 	lsl.w	r0, r0, r9
 800b894:	4310      	orrs	r0, r2
 800b896:	f84a 0b04 	str.w	r0, [sl], #4
 800b89a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b89e:	459c      	cmp	ip, r3
 800b8a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8a4:	d8f3      	bhi.n	800b88e <__lshift+0x6e>
 800b8a6:	ebac 0304 	sub.w	r3, ip, r4
 800b8aa:	3b15      	subs	r3, #21
 800b8ac:	f023 0303 	bic.w	r3, r3, #3
 800b8b0:	3304      	adds	r3, #4
 800b8b2:	f104 0015 	add.w	r0, r4, #21
 800b8b6:	4584      	cmp	ip, r0
 800b8b8:	bf38      	it	cc
 800b8ba:	2304      	movcc	r3, #4
 800b8bc:	50ca      	str	r2, [r1, r3]
 800b8be:	b10a      	cbz	r2, 800b8c4 <__lshift+0xa4>
 800b8c0:	f108 0602 	add.w	r6, r8, #2
 800b8c4:	3e01      	subs	r6, #1
 800b8c6:	4638      	mov	r0, r7
 800b8c8:	612e      	str	r6, [r5, #16]
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	f7ff fd90 	bl	800b3f0 <_Bfree>
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8da:	3301      	adds	r3, #1
 800b8dc:	e7c5      	b.n	800b86a <__lshift+0x4a>
 800b8de:	3904      	subs	r1, #4
 800b8e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8e8:	459c      	cmp	ip, r3
 800b8ea:	d8f9      	bhi.n	800b8e0 <__lshift+0xc0>
 800b8ec:	e7ea      	b.n	800b8c4 <__lshift+0xa4>
 800b8ee:	bf00      	nop
 800b8f0:	0800deed 	.word	0x0800deed
 800b8f4:	0800defe 	.word	0x0800defe

0800b8f8 <__mcmp>:
 800b8f8:	690a      	ldr	r2, [r1, #16]
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	6900      	ldr	r0, [r0, #16]
 800b8fe:	1a80      	subs	r0, r0, r2
 800b900:	b530      	push	{r4, r5, lr}
 800b902:	d10e      	bne.n	800b922 <__mcmp+0x2a>
 800b904:	3314      	adds	r3, #20
 800b906:	3114      	adds	r1, #20
 800b908:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b90c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b910:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b914:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b918:	4295      	cmp	r5, r2
 800b91a:	d003      	beq.n	800b924 <__mcmp+0x2c>
 800b91c:	d205      	bcs.n	800b92a <__mcmp+0x32>
 800b91e:	f04f 30ff 	mov.w	r0, #4294967295
 800b922:	bd30      	pop	{r4, r5, pc}
 800b924:	42a3      	cmp	r3, r4
 800b926:	d3f3      	bcc.n	800b910 <__mcmp+0x18>
 800b928:	e7fb      	b.n	800b922 <__mcmp+0x2a>
 800b92a:	2001      	movs	r0, #1
 800b92c:	e7f9      	b.n	800b922 <__mcmp+0x2a>
	...

0800b930 <__mdiff>:
 800b930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b934:	4689      	mov	r9, r1
 800b936:	4606      	mov	r6, r0
 800b938:	4611      	mov	r1, r2
 800b93a:	4648      	mov	r0, r9
 800b93c:	4614      	mov	r4, r2
 800b93e:	f7ff ffdb 	bl	800b8f8 <__mcmp>
 800b942:	1e05      	subs	r5, r0, #0
 800b944:	d112      	bne.n	800b96c <__mdiff+0x3c>
 800b946:	4629      	mov	r1, r5
 800b948:	4630      	mov	r0, r6
 800b94a:	f7ff fd11 	bl	800b370 <_Balloc>
 800b94e:	4602      	mov	r2, r0
 800b950:	b928      	cbnz	r0, 800b95e <__mdiff+0x2e>
 800b952:	4b3f      	ldr	r3, [pc, #252]	@ (800ba50 <__mdiff+0x120>)
 800b954:	f240 2137 	movw	r1, #567	@ 0x237
 800b958:	483e      	ldr	r0, [pc, #248]	@ (800ba54 <__mdiff+0x124>)
 800b95a:	f001 fa95 	bl	800ce88 <__assert_func>
 800b95e:	2301      	movs	r3, #1
 800b960:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b964:	4610      	mov	r0, r2
 800b966:	b003      	add	sp, #12
 800b968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b96c:	bfbc      	itt	lt
 800b96e:	464b      	movlt	r3, r9
 800b970:	46a1      	movlt	r9, r4
 800b972:	4630      	mov	r0, r6
 800b974:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b978:	bfba      	itte	lt
 800b97a:	461c      	movlt	r4, r3
 800b97c:	2501      	movlt	r5, #1
 800b97e:	2500      	movge	r5, #0
 800b980:	f7ff fcf6 	bl	800b370 <_Balloc>
 800b984:	4602      	mov	r2, r0
 800b986:	b918      	cbnz	r0, 800b990 <__mdiff+0x60>
 800b988:	4b31      	ldr	r3, [pc, #196]	@ (800ba50 <__mdiff+0x120>)
 800b98a:	f240 2145 	movw	r1, #581	@ 0x245
 800b98e:	e7e3      	b.n	800b958 <__mdiff+0x28>
 800b990:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b994:	6926      	ldr	r6, [r4, #16]
 800b996:	60c5      	str	r5, [r0, #12]
 800b998:	f109 0310 	add.w	r3, r9, #16
 800b99c:	f109 0514 	add.w	r5, r9, #20
 800b9a0:	f104 0e14 	add.w	lr, r4, #20
 800b9a4:	f100 0b14 	add.w	fp, r0, #20
 800b9a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b9ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b9b0:	9301      	str	r3, [sp, #4]
 800b9b2:	46d9      	mov	r9, fp
 800b9b4:	f04f 0c00 	mov.w	ip, #0
 800b9b8:	9b01      	ldr	r3, [sp, #4]
 800b9ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b9be:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b9c2:	9301      	str	r3, [sp, #4]
 800b9c4:	fa1f f38a 	uxth.w	r3, sl
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	b283      	uxth	r3, r0
 800b9cc:	1acb      	subs	r3, r1, r3
 800b9ce:	0c00      	lsrs	r0, r0, #16
 800b9d0:	4463      	add	r3, ip
 800b9d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b9d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b9e0:	4576      	cmp	r6, lr
 800b9e2:	f849 3b04 	str.w	r3, [r9], #4
 800b9e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b9ea:	d8e5      	bhi.n	800b9b8 <__mdiff+0x88>
 800b9ec:	1b33      	subs	r3, r6, r4
 800b9ee:	3b15      	subs	r3, #21
 800b9f0:	f023 0303 	bic.w	r3, r3, #3
 800b9f4:	3415      	adds	r4, #21
 800b9f6:	3304      	adds	r3, #4
 800b9f8:	42a6      	cmp	r6, r4
 800b9fa:	bf38      	it	cc
 800b9fc:	2304      	movcc	r3, #4
 800b9fe:	441d      	add	r5, r3
 800ba00:	445b      	add	r3, fp
 800ba02:	461e      	mov	r6, r3
 800ba04:	462c      	mov	r4, r5
 800ba06:	4544      	cmp	r4, r8
 800ba08:	d30e      	bcc.n	800ba28 <__mdiff+0xf8>
 800ba0a:	f108 0103 	add.w	r1, r8, #3
 800ba0e:	1b49      	subs	r1, r1, r5
 800ba10:	f021 0103 	bic.w	r1, r1, #3
 800ba14:	3d03      	subs	r5, #3
 800ba16:	45a8      	cmp	r8, r5
 800ba18:	bf38      	it	cc
 800ba1a:	2100      	movcc	r1, #0
 800ba1c:	440b      	add	r3, r1
 800ba1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba22:	b191      	cbz	r1, 800ba4a <__mdiff+0x11a>
 800ba24:	6117      	str	r7, [r2, #16]
 800ba26:	e79d      	b.n	800b964 <__mdiff+0x34>
 800ba28:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba2c:	46e6      	mov	lr, ip
 800ba2e:	0c08      	lsrs	r0, r1, #16
 800ba30:	fa1c fc81 	uxtah	ip, ip, r1
 800ba34:	4471      	add	r1, lr
 800ba36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ba3a:	b289      	uxth	r1, r1
 800ba3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ba40:	f846 1b04 	str.w	r1, [r6], #4
 800ba44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba48:	e7dd      	b.n	800ba06 <__mdiff+0xd6>
 800ba4a:	3f01      	subs	r7, #1
 800ba4c:	e7e7      	b.n	800ba1e <__mdiff+0xee>
 800ba4e:	bf00      	nop
 800ba50:	0800deed 	.word	0x0800deed
 800ba54:	0800defe 	.word	0x0800defe

0800ba58 <__ulp>:
 800ba58:	b082      	sub	sp, #8
 800ba5a:	ed8d 0b00 	vstr	d0, [sp]
 800ba5e:	9a01      	ldr	r2, [sp, #4]
 800ba60:	4b0f      	ldr	r3, [pc, #60]	@ (800baa0 <__ulp+0x48>)
 800ba62:	4013      	ands	r3, r2
 800ba64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	dc08      	bgt.n	800ba7e <__ulp+0x26>
 800ba6c:	425b      	negs	r3, r3
 800ba6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ba72:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ba76:	da04      	bge.n	800ba82 <__ulp+0x2a>
 800ba78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ba7c:	4113      	asrs	r3, r2
 800ba7e:	2200      	movs	r2, #0
 800ba80:	e008      	b.n	800ba94 <__ulp+0x3c>
 800ba82:	f1a2 0314 	sub.w	r3, r2, #20
 800ba86:	2b1e      	cmp	r3, #30
 800ba88:	bfda      	itte	le
 800ba8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ba8e:	40da      	lsrle	r2, r3
 800ba90:	2201      	movgt	r2, #1
 800ba92:	2300      	movs	r3, #0
 800ba94:	4619      	mov	r1, r3
 800ba96:	4610      	mov	r0, r2
 800ba98:	ec41 0b10 	vmov	d0, r0, r1
 800ba9c:	b002      	add	sp, #8
 800ba9e:	4770      	bx	lr
 800baa0:	7ff00000 	.word	0x7ff00000

0800baa4 <__b2d>:
 800baa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baa8:	6906      	ldr	r6, [r0, #16]
 800baaa:	f100 0814 	add.w	r8, r0, #20
 800baae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bab2:	1f37      	subs	r7, r6, #4
 800bab4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bab8:	4610      	mov	r0, r2
 800baba:	f7ff fd4b 	bl	800b554 <__hi0bits>
 800babe:	f1c0 0320 	rsb	r3, r0, #32
 800bac2:	280a      	cmp	r0, #10
 800bac4:	600b      	str	r3, [r1, #0]
 800bac6:	491b      	ldr	r1, [pc, #108]	@ (800bb34 <__b2d+0x90>)
 800bac8:	dc15      	bgt.n	800baf6 <__b2d+0x52>
 800baca:	f1c0 0c0b 	rsb	ip, r0, #11
 800bace:	fa22 f30c 	lsr.w	r3, r2, ip
 800bad2:	45b8      	cmp	r8, r7
 800bad4:	ea43 0501 	orr.w	r5, r3, r1
 800bad8:	bf34      	ite	cc
 800bada:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bade:	2300      	movcs	r3, #0
 800bae0:	3015      	adds	r0, #21
 800bae2:	fa02 f000 	lsl.w	r0, r2, r0
 800bae6:	fa23 f30c 	lsr.w	r3, r3, ip
 800baea:	4303      	orrs	r3, r0
 800baec:	461c      	mov	r4, r3
 800baee:	ec45 4b10 	vmov	d0, r4, r5
 800baf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf6:	45b8      	cmp	r8, r7
 800baf8:	bf3a      	itte	cc
 800bafa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bafe:	f1a6 0708 	subcc.w	r7, r6, #8
 800bb02:	2300      	movcs	r3, #0
 800bb04:	380b      	subs	r0, #11
 800bb06:	d012      	beq.n	800bb2e <__b2d+0x8a>
 800bb08:	f1c0 0120 	rsb	r1, r0, #32
 800bb0c:	fa23 f401 	lsr.w	r4, r3, r1
 800bb10:	4082      	lsls	r2, r0
 800bb12:	4322      	orrs	r2, r4
 800bb14:	4547      	cmp	r7, r8
 800bb16:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bb1a:	bf8c      	ite	hi
 800bb1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bb20:	2200      	movls	r2, #0
 800bb22:	4083      	lsls	r3, r0
 800bb24:	40ca      	lsrs	r2, r1
 800bb26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	e7de      	b.n	800baec <__b2d+0x48>
 800bb2e:	ea42 0501 	orr.w	r5, r2, r1
 800bb32:	e7db      	b.n	800baec <__b2d+0x48>
 800bb34:	3ff00000 	.word	0x3ff00000

0800bb38 <__d2b>:
 800bb38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb3c:	460f      	mov	r7, r1
 800bb3e:	2101      	movs	r1, #1
 800bb40:	ec59 8b10 	vmov	r8, r9, d0
 800bb44:	4616      	mov	r6, r2
 800bb46:	f7ff fc13 	bl	800b370 <_Balloc>
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	b930      	cbnz	r0, 800bb5c <__d2b+0x24>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	4b23      	ldr	r3, [pc, #140]	@ (800bbe0 <__d2b+0xa8>)
 800bb52:	4824      	ldr	r0, [pc, #144]	@ (800bbe4 <__d2b+0xac>)
 800bb54:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb58:	f001 f996 	bl	800ce88 <__assert_func>
 800bb5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb64:	b10d      	cbz	r5, 800bb6a <__d2b+0x32>
 800bb66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb6a:	9301      	str	r3, [sp, #4]
 800bb6c:	f1b8 0300 	subs.w	r3, r8, #0
 800bb70:	d023      	beq.n	800bbba <__d2b+0x82>
 800bb72:	4668      	mov	r0, sp
 800bb74:	9300      	str	r3, [sp, #0]
 800bb76:	f7ff fd0c 	bl	800b592 <__lo0bits>
 800bb7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb7e:	b1d0      	cbz	r0, 800bbb6 <__d2b+0x7e>
 800bb80:	f1c0 0320 	rsb	r3, r0, #32
 800bb84:	fa02 f303 	lsl.w	r3, r2, r3
 800bb88:	430b      	orrs	r3, r1
 800bb8a:	40c2      	lsrs	r2, r0
 800bb8c:	6163      	str	r3, [r4, #20]
 800bb8e:	9201      	str	r2, [sp, #4]
 800bb90:	9b01      	ldr	r3, [sp, #4]
 800bb92:	61a3      	str	r3, [r4, #24]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	bf0c      	ite	eq
 800bb98:	2201      	moveq	r2, #1
 800bb9a:	2202      	movne	r2, #2
 800bb9c:	6122      	str	r2, [r4, #16]
 800bb9e:	b1a5      	cbz	r5, 800bbca <__d2b+0x92>
 800bba0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bba4:	4405      	add	r5, r0
 800bba6:	603d      	str	r5, [r7, #0]
 800bba8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bbac:	6030      	str	r0, [r6, #0]
 800bbae:	4620      	mov	r0, r4
 800bbb0:	b003      	add	sp, #12
 800bbb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbb6:	6161      	str	r1, [r4, #20]
 800bbb8:	e7ea      	b.n	800bb90 <__d2b+0x58>
 800bbba:	a801      	add	r0, sp, #4
 800bbbc:	f7ff fce9 	bl	800b592 <__lo0bits>
 800bbc0:	9b01      	ldr	r3, [sp, #4]
 800bbc2:	6163      	str	r3, [r4, #20]
 800bbc4:	3020      	adds	r0, #32
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	e7e8      	b.n	800bb9c <__d2b+0x64>
 800bbca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bbce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bbd2:	6038      	str	r0, [r7, #0]
 800bbd4:	6918      	ldr	r0, [r3, #16]
 800bbd6:	f7ff fcbd 	bl	800b554 <__hi0bits>
 800bbda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bbde:	e7e5      	b.n	800bbac <__d2b+0x74>
 800bbe0:	0800deed 	.word	0x0800deed
 800bbe4:	0800defe 	.word	0x0800defe

0800bbe8 <__ratio>:
 800bbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbec:	b085      	sub	sp, #20
 800bbee:	e9cd 1000 	strd	r1, r0, [sp]
 800bbf2:	a902      	add	r1, sp, #8
 800bbf4:	f7ff ff56 	bl	800baa4 <__b2d>
 800bbf8:	9800      	ldr	r0, [sp, #0]
 800bbfa:	a903      	add	r1, sp, #12
 800bbfc:	ec55 4b10 	vmov	r4, r5, d0
 800bc00:	f7ff ff50 	bl	800baa4 <__b2d>
 800bc04:	9b01      	ldr	r3, [sp, #4]
 800bc06:	6919      	ldr	r1, [r3, #16]
 800bc08:	9b00      	ldr	r3, [sp, #0]
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	1ac9      	subs	r1, r1, r3
 800bc0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bc12:	1a9b      	subs	r3, r3, r2
 800bc14:	ec5b ab10 	vmov	sl, fp, d0
 800bc18:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	bfce      	itee	gt
 800bc20:	462a      	movgt	r2, r5
 800bc22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bc26:	465a      	movle	r2, fp
 800bc28:	462f      	mov	r7, r5
 800bc2a:	46d9      	mov	r9, fp
 800bc2c:	bfcc      	ite	gt
 800bc2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bc32:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bc36:	464b      	mov	r3, r9
 800bc38:	4652      	mov	r2, sl
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	f7f4 fe2d 	bl	800089c <__aeabi_ddiv>
 800bc42:	ec41 0b10 	vmov	d0, r0, r1
 800bc46:	b005      	add	sp, #20
 800bc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc4c <__copybits>:
 800bc4c:	3901      	subs	r1, #1
 800bc4e:	b570      	push	{r4, r5, r6, lr}
 800bc50:	1149      	asrs	r1, r1, #5
 800bc52:	6914      	ldr	r4, [r2, #16]
 800bc54:	3101      	adds	r1, #1
 800bc56:	f102 0314 	add.w	r3, r2, #20
 800bc5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc62:	1f05      	subs	r5, r0, #4
 800bc64:	42a3      	cmp	r3, r4
 800bc66:	d30c      	bcc.n	800bc82 <__copybits+0x36>
 800bc68:	1aa3      	subs	r3, r4, r2
 800bc6a:	3b11      	subs	r3, #17
 800bc6c:	f023 0303 	bic.w	r3, r3, #3
 800bc70:	3211      	adds	r2, #17
 800bc72:	42a2      	cmp	r2, r4
 800bc74:	bf88      	it	hi
 800bc76:	2300      	movhi	r3, #0
 800bc78:	4418      	add	r0, r3
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	4288      	cmp	r0, r1
 800bc7e:	d305      	bcc.n	800bc8c <__copybits+0x40>
 800bc80:	bd70      	pop	{r4, r5, r6, pc}
 800bc82:	f853 6b04 	ldr.w	r6, [r3], #4
 800bc86:	f845 6f04 	str.w	r6, [r5, #4]!
 800bc8a:	e7eb      	b.n	800bc64 <__copybits+0x18>
 800bc8c:	f840 3b04 	str.w	r3, [r0], #4
 800bc90:	e7f4      	b.n	800bc7c <__copybits+0x30>

0800bc92 <__any_on>:
 800bc92:	f100 0214 	add.w	r2, r0, #20
 800bc96:	6900      	ldr	r0, [r0, #16]
 800bc98:	114b      	asrs	r3, r1, #5
 800bc9a:	4298      	cmp	r0, r3
 800bc9c:	b510      	push	{r4, lr}
 800bc9e:	db11      	blt.n	800bcc4 <__any_on+0x32>
 800bca0:	dd0a      	ble.n	800bcb8 <__any_on+0x26>
 800bca2:	f011 011f 	ands.w	r1, r1, #31
 800bca6:	d007      	beq.n	800bcb8 <__any_on+0x26>
 800bca8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bcac:	fa24 f001 	lsr.w	r0, r4, r1
 800bcb0:	fa00 f101 	lsl.w	r1, r0, r1
 800bcb4:	428c      	cmp	r4, r1
 800bcb6:	d10b      	bne.n	800bcd0 <__any_on+0x3e>
 800bcb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d803      	bhi.n	800bcc8 <__any_on+0x36>
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	bd10      	pop	{r4, pc}
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	e7f7      	b.n	800bcb8 <__any_on+0x26>
 800bcc8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bccc:	2900      	cmp	r1, #0
 800bcce:	d0f5      	beq.n	800bcbc <__any_on+0x2a>
 800bcd0:	2001      	movs	r0, #1
 800bcd2:	e7f6      	b.n	800bcc2 <__any_on+0x30>

0800bcd4 <sulp>:
 800bcd4:	b570      	push	{r4, r5, r6, lr}
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	460d      	mov	r5, r1
 800bcda:	ec45 4b10 	vmov	d0, r4, r5
 800bcde:	4616      	mov	r6, r2
 800bce0:	f7ff feba 	bl	800ba58 <__ulp>
 800bce4:	ec51 0b10 	vmov	r0, r1, d0
 800bce8:	b17e      	cbz	r6, 800bd0a <sulp+0x36>
 800bcea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bcee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	dd09      	ble.n	800bd0a <sulp+0x36>
 800bcf6:	051b      	lsls	r3, r3, #20
 800bcf8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bcfc:	2400      	movs	r4, #0
 800bcfe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bd02:	4622      	mov	r2, r4
 800bd04:	462b      	mov	r3, r5
 800bd06:	f7f4 fc9f 	bl	8000648 <__aeabi_dmul>
 800bd0a:	ec41 0b10 	vmov	d0, r0, r1
 800bd0e:	bd70      	pop	{r4, r5, r6, pc}

0800bd10 <_strtod_l>:
 800bd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd14:	b09f      	sub	sp, #124	@ 0x7c
 800bd16:	460c      	mov	r4, r1
 800bd18:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	921a      	str	r2, [sp, #104]	@ 0x68
 800bd1e:	9005      	str	r0, [sp, #20]
 800bd20:	f04f 0a00 	mov.w	sl, #0
 800bd24:	f04f 0b00 	mov.w	fp, #0
 800bd28:	460a      	mov	r2, r1
 800bd2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800bd2c:	7811      	ldrb	r1, [r2, #0]
 800bd2e:	292b      	cmp	r1, #43	@ 0x2b
 800bd30:	d04a      	beq.n	800bdc8 <_strtod_l+0xb8>
 800bd32:	d838      	bhi.n	800bda6 <_strtod_l+0x96>
 800bd34:	290d      	cmp	r1, #13
 800bd36:	d832      	bhi.n	800bd9e <_strtod_l+0x8e>
 800bd38:	2908      	cmp	r1, #8
 800bd3a:	d832      	bhi.n	800bda2 <_strtod_l+0x92>
 800bd3c:	2900      	cmp	r1, #0
 800bd3e:	d03b      	beq.n	800bdb8 <_strtod_l+0xa8>
 800bd40:	2200      	movs	r2, #0
 800bd42:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bd44:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bd46:	782a      	ldrb	r2, [r5, #0]
 800bd48:	2a30      	cmp	r2, #48	@ 0x30
 800bd4a:	f040 80b3 	bne.w	800beb4 <_strtod_l+0x1a4>
 800bd4e:	786a      	ldrb	r2, [r5, #1]
 800bd50:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bd54:	2a58      	cmp	r2, #88	@ 0x58
 800bd56:	d16e      	bne.n	800be36 <_strtod_l+0x126>
 800bd58:	9302      	str	r3, [sp, #8]
 800bd5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd5c:	9301      	str	r3, [sp, #4]
 800bd5e:	ab1a      	add	r3, sp, #104	@ 0x68
 800bd60:	9300      	str	r3, [sp, #0]
 800bd62:	4a8e      	ldr	r2, [pc, #568]	@ (800bf9c <_strtod_l+0x28c>)
 800bd64:	9805      	ldr	r0, [sp, #20]
 800bd66:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bd68:	a919      	add	r1, sp, #100	@ 0x64
 800bd6a:	f001 f927 	bl	800cfbc <__gethex>
 800bd6e:	f010 060f 	ands.w	r6, r0, #15
 800bd72:	4604      	mov	r4, r0
 800bd74:	d005      	beq.n	800bd82 <_strtod_l+0x72>
 800bd76:	2e06      	cmp	r6, #6
 800bd78:	d128      	bne.n	800bdcc <_strtod_l+0xbc>
 800bd7a:	3501      	adds	r5, #1
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	9519      	str	r5, [sp, #100]	@ 0x64
 800bd80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	f040 858e 	bne.w	800c8a6 <_strtod_l+0xb96>
 800bd8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd8c:	b1cb      	cbz	r3, 800bdc2 <_strtod_l+0xb2>
 800bd8e:	4652      	mov	r2, sl
 800bd90:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800bd94:	ec43 2b10 	vmov	d0, r2, r3
 800bd98:	b01f      	add	sp, #124	@ 0x7c
 800bd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd9e:	2920      	cmp	r1, #32
 800bda0:	d1ce      	bne.n	800bd40 <_strtod_l+0x30>
 800bda2:	3201      	adds	r2, #1
 800bda4:	e7c1      	b.n	800bd2a <_strtod_l+0x1a>
 800bda6:	292d      	cmp	r1, #45	@ 0x2d
 800bda8:	d1ca      	bne.n	800bd40 <_strtod_l+0x30>
 800bdaa:	2101      	movs	r1, #1
 800bdac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bdae:	1c51      	adds	r1, r2, #1
 800bdb0:	9119      	str	r1, [sp, #100]	@ 0x64
 800bdb2:	7852      	ldrb	r2, [r2, #1]
 800bdb4:	2a00      	cmp	r2, #0
 800bdb6:	d1c5      	bne.n	800bd44 <_strtod_l+0x34>
 800bdb8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bdba:	9419      	str	r4, [sp, #100]	@ 0x64
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f040 8570 	bne.w	800c8a2 <_strtod_l+0xb92>
 800bdc2:	4652      	mov	r2, sl
 800bdc4:	465b      	mov	r3, fp
 800bdc6:	e7e5      	b.n	800bd94 <_strtod_l+0x84>
 800bdc8:	2100      	movs	r1, #0
 800bdca:	e7ef      	b.n	800bdac <_strtod_l+0x9c>
 800bdcc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bdce:	b13a      	cbz	r2, 800bde0 <_strtod_l+0xd0>
 800bdd0:	2135      	movs	r1, #53	@ 0x35
 800bdd2:	a81c      	add	r0, sp, #112	@ 0x70
 800bdd4:	f7ff ff3a 	bl	800bc4c <__copybits>
 800bdd8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bdda:	9805      	ldr	r0, [sp, #20]
 800bddc:	f7ff fb08 	bl	800b3f0 <_Bfree>
 800bde0:	3e01      	subs	r6, #1
 800bde2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800bde4:	2e04      	cmp	r6, #4
 800bde6:	d806      	bhi.n	800bdf6 <_strtod_l+0xe6>
 800bde8:	e8df f006 	tbb	[pc, r6]
 800bdec:	201d0314 	.word	0x201d0314
 800bdf0:	14          	.byte	0x14
 800bdf1:	00          	.byte	0x00
 800bdf2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800bdf6:	05e1      	lsls	r1, r4, #23
 800bdf8:	bf48      	it	mi
 800bdfa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800bdfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be02:	0d1b      	lsrs	r3, r3, #20
 800be04:	051b      	lsls	r3, r3, #20
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1bb      	bne.n	800bd82 <_strtod_l+0x72>
 800be0a:	f7fe fb31 	bl	800a470 <__errno>
 800be0e:	2322      	movs	r3, #34	@ 0x22
 800be10:	6003      	str	r3, [r0, #0]
 800be12:	e7b6      	b.n	800bd82 <_strtod_l+0x72>
 800be14:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800be18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800be1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800be20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800be24:	e7e7      	b.n	800bdf6 <_strtod_l+0xe6>
 800be26:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bfa4 <_strtod_l+0x294>
 800be2a:	e7e4      	b.n	800bdf6 <_strtod_l+0xe6>
 800be2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800be30:	f04f 3aff 	mov.w	sl, #4294967295
 800be34:	e7df      	b.n	800bdf6 <_strtod_l+0xe6>
 800be36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be38:	1c5a      	adds	r2, r3, #1
 800be3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800be3c:	785b      	ldrb	r3, [r3, #1]
 800be3e:	2b30      	cmp	r3, #48	@ 0x30
 800be40:	d0f9      	beq.n	800be36 <_strtod_l+0x126>
 800be42:	2b00      	cmp	r3, #0
 800be44:	d09d      	beq.n	800bd82 <_strtod_l+0x72>
 800be46:	2301      	movs	r3, #1
 800be48:	9309      	str	r3, [sp, #36]	@ 0x24
 800be4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be4c:	930c      	str	r3, [sp, #48]	@ 0x30
 800be4e:	2300      	movs	r3, #0
 800be50:	9308      	str	r3, [sp, #32]
 800be52:	930a      	str	r3, [sp, #40]	@ 0x28
 800be54:	461f      	mov	r7, r3
 800be56:	220a      	movs	r2, #10
 800be58:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800be5a:	7805      	ldrb	r5, [r0, #0]
 800be5c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800be60:	b2d9      	uxtb	r1, r3
 800be62:	2909      	cmp	r1, #9
 800be64:	d928      	bls.n	800beb8 <_strtod_l+0x1a8>
 800be66:	494e      	ldr	r1, [pc, #312]	@ (800bfa0 <_strtod_l+0x290>)
 800be68:	2201      	movs	r2, #1
 800be6a:	f000 ffd5 	bl	800ce18 <strncmp>
 800be6e:	2800      	cmp	r0, #0
 800be70:	d032      	beq.n	800bed8 <_strtod_l+0x1c8>
 800be72:	2000      	movs	r0, #0
 800be74:	462a      	mov	r2, r5
 800be76:	4681      	mov	r9, r0
 800be78:	463d      	mov	r5, r7
 800be7a:	4603      	mov	r3, r0
 800be7c:	2a65      	cmp	r2, #101	@ 0x65
 800be7e:	d001      	beq.n	800be84 <_strtod_l+0x174>
 800be80:	2a45      	cmp	r2, #69	@ 0x45
 800be82:	d114      	bne.n	800beae <_strtod_l+0x19e>
 800be84:	b91d      	cbnz	r5, 800be8e <_strtod_l+0x17e>
 800be86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be88:	4302      	orrs	r2, r0
 800be8a:	d095      	beq.n	800bdb8 <_strtod_l+0xa8>
 800be8c:	2500      	movs	r5, #0
 800be8e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800be90:	1c62      	adds	r2, r4, #1
 800be92:	9219      	str	r2, [sp, #100]	@ 0x64
 800be94:	7862      	ldrb	r2, [r4, #1]
 800be96:	2a2b      	cmp	r2, #43	@ 0x2b
 800be98:	d077      	beq.n	800bf8a <_strtod_l+0x27a>
 800be9a:	2a2d      	cmp	r2, #45	@ 0x2d
 800be9c:	d07b      	beq.n	800bf96 <_strtod_l+0x286>
 800be9e:	f04f 0c00 	mov.w	ip, #0
 800bea2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bea6:	2909      	cmp	r1, #9
 800bea8:	f240 8082 	bls.w	800bfb0 <_strtod_l+0x2a0>
 800beac:	9419      	str	r4, [sp, #100]	@ 0x64
 800beae:	f04f 0800 	mov.w	r8, #0
 800beb2:	e0a2      	b.n	800bffa <_strtod_l+0x2ea>
 800beb4:	2300      	movs	r3, #0
 800beb6:	e7c7      	b.n	800be48 <_strtod_l+0x138>
 800beb8:	2f08      	cmp	r7, #8
 800beba:	bfd5      	itete	le
 800bebc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800bebe:	9908      	ldrgt	r1, [sp, #32]
 800bec0:	fb02 3301 	mlale	r3, r2, r1, r3
 800bec4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bec8:	f100 0001 	add.w	r0, r0, #1
 800becc:	bfd4      	ite	le
 800bece:	930a      	strle	r3, [sp, #40]	@ 0x28
 800bed0:	9308      	strgt	r3, [sp, #32]
 800bed2:	3701      	adds	r7, #1
 800bed4:	9019      	str	r0, [sp, #100]	@ 0x64
 800bed6:	e7bf      	b.n	800be58 <_strtod_l+0x148>
 800bed8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800beda:	1c5a      	adds	r2, r3, #1
 800bedc:	9219      	str	r2, [sp, #100]	@ 0x64
 800bede:	785a      	ldrb	r2, [r3, #1]
 800bee0:	b37f      	cbz	r7, 800bf42 <_strtod_l+0x232>
 800bee2:	4681      	mov	r9, r0
 800bee4:	463d      	mov	r5, r7
 800bee6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800beea:	2b09      	cmp	r3, #9
 800beec:	d912      	bls.n	800bf14 <_strtod_l+0x204>
 800beee:	2301      	movs	r3, #1
 800bef0:	e7c4      	b.n	800be7c <_strtod_l+0x16c>
 800bef2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bef4:	1c5a      	adds	r2, r3, #1
 800bef6:	9219      	str	r2, [sp, #100]	@ 0x64
 800bef8:	785a      	ldrb	r2, [r3, #1]
 800befa:	3001      	adds	r0, #1
 800befc:	2a30      	cmp	r2, #48	@ 0x30
 800befe:	d0f8      	beq.n	800bef2 <_strtod_l+0x1e2>
 800bf00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bf04:	2b08      	cmp	r3, #8
 800bf06:	f200 84d3 	bhi.w	800c8b0 <_strtod_l+0xba0>
 800bf0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf0c:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf0e:	4681      	mov	r9, r0
 800bf10:	2000      	movs	r0, #0
 800bf12:	4605      	mov	r5, r0
 800bf14:	3a30      	subs	r2, #48	@ 0x30
 800bf16:	f100 0301 	add.w	r3, r0, #1
 800bf1a:	d02a      	beq.n	800bf72 <_strtod_l+0x262>
 800bf1c:	4499      	add	r9, r3
 800bf1e:	eb00 0c05 	add.w	ip, r0, r5
 800bf22:	462b      	mov	r3, r5
 800bf24:	210a      	movs	r1, #10
 800bf26:	4563      	cmp	r3, ip
 800bf28:	d10d      	bne.n	800bf46 <_strtod_l+0x236>
 800bf2a:	1c69      	adds	r1, r5, #1
 800bf2c:	4401      	add	r1, r0
 800bf2e:	4428      	add	r0, r5
 800bf30:	2808      	cmp	r0, #8
 800bf32:	dc16      	bgt.n	800bf62 <_strtod_l+0x252>
 800bf34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bf36:	230a      	movs	r3, #10
 800bf38:	fb03 2300 	mla	r3, r3, r0, r2
 800bf3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf3e:	2300      	movs	r3, #0
 800bf40:	e018      	b.n	800bf74 <_strtod_l+0x264>
 800bf42:	4638      	mov	r0, r7
 800bf44:	e7da      	b.n	800befc <_strtod_l+0x1ec>
 800bf46:	2b08      	cmp	r3, #8
 800bf48:	f103 0301 	add.w	r3, r3, #1
 800bf4c:	dc03      	bgt.n	800bf56 <_strtod_l+0x246>
 800bf4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bf50:	434e      	muls	r6, r1
 800bf52:	960a      	str	r6, [sp, #40]	@ 0x28
 800bf54:	e7e7      	b.n	800bf26 <_strtod_l+0x216>
 800bf56:	2b10      	cmp	r3, #16
 800bf58:	bfde      	ittt	le
 800bf5a:	9e08      	ldrle	r6, [sp, #32]
 800bf5c:	434e      	mulle	r6, r1
 800bf5e:	9608      	strle	r6, [sp, #32]
 800bf60:	e7e1      	b.n	800bf26 <_strtod_l+0x216>
 800bf62:	280f      	cmp	r0, #15
 800bf64:	dceb      	bgt.n	800bf3e <_strtod_l+0x22e>
 800bf66:	9808      	ldr	r0, [sp, #32]
 800bf68:	230a      	movs	r3, #10
 800bf6a:	fb03 2300 	mla	r3, r3, r0, r2
 800bf6e:	9308      	str	r3, [sp, #32]
 800bf70:	e7e5      	b.n	800bf3e <_strtod_l+0x22e>
 800bf72:	4629      	mov	r1, r5
 800bf74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bf76:	1c50      	adds	r0, r2, #1
 800bf78:	9019      	str	r0, [sp, #100]	@ 0x64
 800bf7a:	7852      	ldrb	r2, [r2, #1]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	460d      	mov	r5, r1
 800bf80:	e7b1      	b.n	800bee6 <_strtod_l+0x1d6>
 800bf82:	f04f 0900 	mov.w	r9, #0
 800bf86:	2301      	movs	r3, #1
 800bf88:	e77d      	b.n	800be86 <_strtod_l+0x176>
 800bf8a:	f04f 0c00 	mov.w	ip, #0
 800bf8e:	1ca2      	adds	r2, r4, #2
 800bf90:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf92:	78a2      	ldrb	r2, [r4, #2]
 800bf94:	e785      	b.n	800bea2 <_strtod_l+0x192>
 800bf96:	f04f 0c01 	mov.w	ip, #1
 800bf9a:	e7f8      	b.n	800bf8e <_strtod_l+0x27e>
 800bf9c:	0800e070 	.word	0x0800e070
 800bfa0:	0800e058 	.word	0x0800e058
 800bfa4:	7ff00000 	.word	0x7ff00000
 800bfa8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bfaa:	1c51      	adds	r1, r2, #1
 800bfac:	9119      	str	r1, [sp, #100]	@ 0x64
 800bfae:	7852      	ldrb	r2, [r2, #1]
 800bfb0:	2a30      	cmp	r2, #48	@ 0x30
 800bfb2:	d0f9      	beq.n	800bfa8 <_strtod_l+0x298>
 800bfb4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bfb8:	2908      	cmp	r1, #8
 800bfba:	f63f af78 	bhi.w	800beae <_strtod_l+0x19e>
 800bfbe:	3a30      	subs	r2, #48	@ 0x30
 800bfc0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bfc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bfc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bfc6:	f04f 080a 	mov.w	r8, #10
 800bfca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bfcc:	1c56      	adds	r6, r2, #1
 800bfce:	9619      	str	r6, [sp, #100]	@ 0x64
 800bfd0:	7852      	ldrb	r2, [r2, #1]
 800bfd2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bfd6:	f1be 0f09 	cmp.w	lr, #9
 800bfda:	d939      	bls.n	800c050 <_strtod_l+0x340>
 800bfdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bfde:	1a76      	subs	r6, r6, r1
 800bfe0:	2e08      	cmp	r6, #8
 800bfe2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bfe6:	dc03      	bgt.n	800bff0 <_strtod_l+0x2e0>
 800bfe8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bfea:	4588      	cmp	r8, r1
 800bfec:	bfa8      	it	ge
 800bfee:	4688      	movge	r8, r1
 800bff0:	f1bc 0f00 	cmp.w	ip, #0
 800bff4:	d001      	beq.n	800bffa <_strtod_l+0x2ea>
 800bff6:	f1c8 0800 	rsb	r8, r8, #0
 800bffa:	2d00      	cmp	r5, #0
 800bffc:	d14e      	bne.n	800c09c <_strtod_l+0x38c>
 800bffe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c000:	4308      	orrs	r0, r1
 800c002:	f47f aebe 	bne.w	800bd82 <_strtod_l+0x72>
 800c006:	2b00      	cmp	r3, #0
 800c008:	f47f aed6 	bne.w	800bdb8 <_strtod_l+0xa8>
 800c00c:	2a69      	cmp	r2, #105	@ 0x69
 800c00e:	d028      	beq.n	800c062 <_strtod_l+0x352>
 800c010:	dc25      	bgt.n	800c05e <_strtod_l+0x34e>
 800c012:	2a49      	cmp	r2, #73	@ 0x49
 800c014:	d025      	beq.n	800c062 <_strtod_l+0x352>
 800c016:	2a4e      	cmp	r2, #78	@ 0x4e
 800c018:	f47f aece 	bne.w	800bdb8 <_strtod_l+0xa8>
 800c01c:	499b      	ldr	r1, [pc, #620]	@ (800c28c <_strtod_l+0x57c>)
 800c01e:	a819      	add	r0, sp, #100	@ 0x64
 800c020:	f001 f9ee 	bl	800d400 <__match>
 800c024:	2800      	cmp	r0, #0
 800c026:	f43f aec7 	beq.w	800bdb8 <_strtod_l+0xa8>
 800c02a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	2b28      	cmp	r3, #40	@ 0x28
 800c030:	d12e      	bne.n	800c090 <_strtod_l+0x380>
 800c032:	4997      	ldr	r1, [pc, #604]	@ (800c290 <_strtod_l+0x580>)
 800c034:	aa1c      	add	r2, sp, #112	@ 0x70
 800c036:	a819      	add	r0, sp, #100	@ 0x64
 800c038:	f001 f9f6 	bl	800d428 <__hexnan>
 800c03c:	2805      	cmp	r0, #5
 800c03e:	d127      	bne.n	800c090 <_strtod_l+0x380>
 800c040:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c042:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c046:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c04a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c04e:	e698      	b.n	800bd82 <_strtod_l+0x72>
 800c050:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c052:	fb08 2101 	mla	r1, r8, r1, r2
 800c056:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c05a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c05c:	e7b5      	b.n	800bfca <_strtod_l+0x2ba>
 800c05e:	2a6e      	cmp	r2, #110	@ 0x6e
 800c060:	e7da      	b.n	800c018 <_strtod_l+0x308>
 800c062:	498c      	ldr	r1, [pc, #560]	@ (800c294 <_strtod_l+0x584>)
 800c064:	a819      	add	r0, sp, #100	@ 0x64
 800c066:	f001 f9cb 	bl	800d400 <__match>
 800c06a:	2800      	cmp	r0, #0
 800c06c:	f43f aea4 	beq.w	800bdb8 <_strtod_l+0xa8>
 800c070:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c072:	4989      	ldr	r1, [pc, #548]	@ (800c298 <_strtod_l+0x588>)
 800c074:	3b01      	subs	r3, #1
 800c076:	a819      	add	r0, sp, #100	@ 0x64
 800c078:	9319      	str	r3, [sp, #100]	@ 0x64
 800c07a:	f001 f9c1 	bl	800d400 <__match>
 800c07e:	b910      	cbnz	r0, 800c086 <_strtod_l+0x376>
 800c080:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c082:	3301      	adds	r3, #1
 800c084:	9319      	str	r3, [sp, #100]	@ 0x64
 800c086:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c2a8 <_strtod_l+0x598>
 800c08a:	f04f 0a00 	mov.w	sl, #0
 800c08e:	e678      	b.n	800bd82 <_strtod_l+0x72>
 800c090:	4882      	ldr	r0, [pc, #520]	@ (800c29c <_strtod_l+0x58c>)
 800c092:	f000 fef1 	bl	800ce78 <nan>
 800c096:	ec5b ab10 	vmov	sl, fp, d0
 800c09a:	e672      	b.n	800bd82 <_strtod_l+0x72>
 800c09c:	eba8 0309 	sub.w	r3, r8, r9
 800c0a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c0a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0a4:	2f00      	cmp	r7, #0
 800c0a6:	bf08      	it	eq
 800c0a8:	462f      	moveq	r7, r5
 800c0aa:	2d10      	cmp	r5, #16
 800c0ac:	462c      	mov	r4, r5
 800c0ae:	bfa8      	it	ge
 800c0b0:	2410      	movge	r4, #16
 800c0b2:	f7f4 fa4f 	bl	8000554 <__aeabi_ui2d>
 800c0b6:	2d09      	cmp	r5, #9
 800c0b8:	4682      	mov	sl, r0
 800c0ba:	468b      	mov	fp, r1
 800c0bc:	dc13      	bgt.n	800c0e6 <_strtod_l+0x3d6>
 800c0be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f43f ae5e 	beq.w	800bd82 <_strtod_l+0x72>
 800c0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0c8:	dd78      	ble.n	800c1bc <_strtod_l+0x4ac>
 800c0ca:	2b16      	cmp	r3, #22
 800c0cc:	dc5f      	bgt.n	800c18e <_strtod_l+0x47e>
 800c0ce:	4974      	ldr	r1, [pc, #464]	@ (800c2a0 <_strtod_l+0x590>)
 800c0d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c0d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0d8:	4652      	mov	r2, sl
 800c0da:	465b      	mov	r3, fp
 800c0dc:	f7f4 fab4 	bl	8000648 <__aeabi_dmul>
 800c0e0:	4682      	mov	sl, r0
 800c0e2:	468b      	mov	fp, r1
 800c0e4:	e64d      	b.n	800bd82 <_strtod_l+0x72>
 800c0e6:	4b6e      	ldr	r3, [pc, #440]	@ (800c2a0 <_strtod_l+0x590>)
 800c0e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c0ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c0f0:	f7f4 faaa 	bl	8000648 <__aeabi_dmul>
 800c0f4:	4682      	mov	sl, r0
 800c0f6:	9808      	ldr	r0, [sp, #32]
 800c0f8:	468b      	mov	fp, r1
 800c0fa:	f7f4 fa2b 	bl	8000554 <__aeabi_ui2d>
 800c0fe:	4602      	mov	r2, r0
 800c100:	460b      	mov	r3, r1
 800c102:	4650      	mov	r0, sl
 800c104:	4659      	mov	r1, fp
 800c106:	f7f4 f8e9 	bl	80002dc <__adddf3>
 800c10a:	2d0f      	cmp	r5, #15
 800c10c:	4682      	mov	sl, r0
 800c10e:	468b      	mov	fp, r1
 800c110:	ddd5      	ble.n	800c0be <_strtod_l+0x3ae>
 800c112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c114:	1b2c      	subs	r4, r5, r4
 800c116:	441c      	add	r4, r3
 800c118:	2c00      	cmp	r4, #0
 800c11a:	f340 8096 	ble.w	800c24a <_strtod_l+0x53a>
 800c11e:	f014 030f 	ands.w	r3, r4, #15
 800c122:	d00a      	beq.n	800c13a <_strtod_l+0x42a>
 800c124:	495e      	ldr	r1, [pc, #376]	@ (800c2a0 <_strtod_l+0x590>)
 800c126:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c12a:	4652      	mov	r2, sl
 800c12c:	465b      	mov	r3, fp
 800c12e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c132:	f7f4 fa89 	bl	8000648 <__aeabi_dmul>
 800c136:	4682      	mov	sl, r0
 800c138:	468b      	mov	fp, r1
 800c13a:	f034 040f 	bics.w	r4, r4, #15
 800c13e:	d073      	beq.n	800c228 <_strtod_l+0x518>
 800c140:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c144:	dd48      	ble.n	800c1d8 <_strtod_l+0x4c8>
 800c146:	2400      	movs	r4, #0
 800c148:	46a0      	mov	r8, r4
 800c14a:	940a      	str	r4, [sp, #40]	@ 0x28
 800c14c:	46a1      	mov	r9, r4
 800c14e:	9a05      	ldr	r2, [sp, #20]
 800c150:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c2a8 <_strtod_l+0x598>
 800c154:	2322      	movs	r3, #34	@ 0x22
 800c156:	6013      	str	r3, [r2, #0]
 800c158:	f04f 0a00 	mov.w	sl, #0
 800c15c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f43f ae0f 	beq.w	800bd82 <_strtod_l+0x72>
 800c164:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c166:	9805      	ldr	r0, [sp, #20]
 800c168:	f7ff f942 	bl	800b3f0 <_Bfree>
 800c16c:	9805      	ldr	r0, [sp, #20]
 800c16e:	4649      	mov	r1, r9
 800c170:	f7ff f93e 	bl	800b3f0 <_Bfree>
 800c174:	9805      	ldr	r0, [sp, #20]
 800c176:	4641      	mov	r1, r8
 800c178:	f7ff f93a 	bl	800b3f0 <_Bfree>
 800c17c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c17e:	9805      	ldr	r0, [sp, #20]
 800c180:	f7ff f936 	bl	800b3f0 <_Bfree>
 800c184:	9805      	ldr	r0, [sp, #20]
 800c186:	4621      	mov	r1, r4
 800c188:	f7ff f932 	bl	800b3f0 <_Bfree>
 800c18c:	e5f9      	b.n	800bd82 <_strtod_l+0x72>
 800c18e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c190:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c194:	4293      	cmp	r3, r2
 800c196:	dbbc      	blt.n	800c112 <_strtod_l+0x402>
 800c198:	4c41      	ldr	r4, [pc, #260]	@ (800c2a0 <_strtod_l+0x590>)
 800c19a:	f1c5 050f 	rsb	r5, r5, #15
 800c19e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c1a2:	4652      	mov	r2, sl
 800c1a4:	465b      	mov	r3, fp
 800c1a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1aa:	f7f4 fa4d 	bl	8000648 <__aeabi_dmul>
 800c1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1b0:	1b5d      	subs	r5, r3, r5
 800c1b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c1b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c1ba:	e78f      	b.n	800c0dc <_strtod_l+0x3cc>
 800c1bc:	3316      	adds	r3, #22
 800c1be:	dba8      	blt.n	800c112 <_strtod_l+0x402>
 800c1c0:	4b37      	ldr	r3, [pc, #220]	@ (800c2a0 <_strtod_l+0x590>)
 800c1c2:	eba9 0808 	sub.w	r8, r9, r8
 800c1c6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c1ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c1ce:	4650      	mov	r0, sl
 800c1d0:	4659      	mov	r1, fp
 800c1d2:	f7f4 fb63 	bl	800089c <__aeabi_ddiv>
 800c1d6:	e783      	b.n	800c0e0 <_strtod_l+0x3d0>
 800c1d8:	4b32      	ldr	r3, [pc, #200]	@ (800c2a4 <_strtod_l+0x594>)
 800c1da:	9308      	str	r3, [sp, #32]
 800c1dc:	2300      	movs	r3, #0
 800c1de:	1124      	asrs	r4, r4, #4
 800c1e0:	4650      	mov	r0, sl
 800c1e2:	4659      	mov	r1, fp
 800c1e4:	461e      	mov	r6, r3
 800c1e6:	2c01      	cmp	r4, #1
 800c1e8:	dc21      	bgt.n	800c22e <_strtod_l+0x51e>
 800c1ea:	b10b      	cbz	r3, 800c1f0 <_strtod_l+0x4e0>
 800c1ec:	4682      	mov	sl, r0
 800c1ee:	468b      	mov	fp, r1
 800c1f0:	492c      	ldr	r1, [pc, #176]	@ (800c2a4 <_strtod_l+0x594>)
 800c1f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c1f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c1fa:	4652      	mov	r2, sl
 800c1fc:	465b      	mov	r3, fp
 800c1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c202:	f7f4 fa21 	bl	8000648 <__aeabi_dmul>
 800c206:	4b28      	ldr	r3, [pc, #160]	@ (800c2a8 <_strtod_l+0x598>)
 800c208:	460a      	mov	r2, r1
 800c20a:	400b      	ands	r3, r1
 800c20c:	4927      	ldr	r1, [pc, #156]	@ (800c2ac <_strtod_l+0x59c>)
 800c20e:	428b      	cmp	r3, r1
 800c210:	4682      	mov	sl, r0
 800c212:	d898      	bhi.n	800c146 <_strtod_l+0x436>
 800c214:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c218:	428b      	cmp	r3, r1
 800c21a:	bf86      	itte	hi
 800c21c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c2b0 <_strtod_l+0x5a0>
 800c220:	f04f 3aff 	movhi.w	sl, #4294967295
 800c224:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c228:	2300      	movs	r3, #0
 800c22a:	9308      	str	r3, [sp, #32]
 800c22c:	e07a      	b.n	800c324 <_strtod_l+0x614>
 800c22e:	07e2      	lsls	r2, r4, #31
 800c230:	d505      	bpl.n	800c23e <_strtod_l+0x52e>
 800c232:	9b08      	ldr	r3, [sp, #32]
 800c234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c238:	f7f4 fa06 	bl	8000648 <__aeabi_dmul>
 800c23c:	2301      	movs	r3, #1
 800c23e:	9a08      	ldr	r2, [sp, #32]
 800c240:	3208      	adds	r2, #8
 800c242:	3601      	adds	r6, #1
 800c244:	1064      	asrs	r4, r4, #1
 800c246:	9208      	str	r2, [sp, #32]
 800c248:	e7cd      	b.n	800c1e6 <_strtod_l+0x4d6>
 800c24a:	d0ed      	beq.n	800c228 <_strtod_l+0x518>
 800c24c:	4264      	negs	r4, r4
 800c24e:	f014 020f 	ands.w	r2, r4, #15
 800c252:	d00a      	beq.n	800c26a <_strtod_l+0x55a>
 800c254:	4b12      	ldr	r3, [pc, #72]	@ (800c2a0 <_strtod_l+0x590>)
 800c256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c25a:	4650      	mov	r0, sl
 800c25c:	4659      	mov	r1, fp
 800c25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c262:	f7f4 fb1b 	bl	800089c <__aeabi_ddiv>
 800c266:	4682      	mov	sl, r0
 800c268:	468b      	mov	fp, r1
 800c26a:	1124      	asrs	r4, r4, #4
 800c26c:	d0dc      	beq.n	800c228 <_strtod_l+0x518>
 800c26e:	2c1f      	cmp	r4, #31
 800c270:	dd20      	ble.n	800c2b4 <_strtod_l+0x5a4>
 800c272:	2400      	movs	r4, #0
 800c274:	46a0      	mov	r8, r4
 800c276:	940a      	str	r4, [sp, #40]	@ 0x28
 800c278:	46a1      	mov	r9, r4
 800c27a:	9a05      	ldr	r2, [sp, #20]
 800c27c:	2322      	movs	r3, #34	@ 0x22
 800c27e:	f04f 0a00 	mov.w	sl, #0
 800c282:	f04f 0b00 	mov.w	fp, #0
 800c286:	6013      	str	r3, [r2, #0]
 800c288:	e768      	b.n	800c15c <_strtod_l+0x44c>
 800c28a:	bf00      	nop
 800c28c:	0800de45 	.word	0x0800de45
 800c290:	0800e05c 	.word	0x0800e05c
 800c294:	0800de3d 	.word	0x0800de3d
 800c298:	0800de74 	.word	0x0800de74
 800c29c:	0800e205 	.word	0x0800e205
 800c2a0:	0800df90 	.word	0x0800df90
 800c2a4:	0800df68 	.word	0x0800df68
 800c2a8:	7ff00000 	.word	0x7ff00000
 800c2ac:	7ca00000 	.word	0x7ca00000
 800c2b0:	7fefffff 	.word	0x7fefffff
 800c2b4:	f014 0310 	ands.w	r3, r4, #16
 800c2b8:	bf18      	it	ne
 800c2ba:	236a      	movne	r3, #106	@ 0x6a
 800c2bc:	4ea9      	ldr	r6, [pc, #676]	@ (800c564 <_strtod_l+0x854>)
 800c2be:	9308      	str	r3, [sp, #32]
 800c2c0:	4650      	mov	r0, sl
 800c2c2:	4659      	mov	r1, fp
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	07e2      	lsls	r2, r4, #31
 800c2c8:	d504      	bpl.n	800c2d4 <_strtod_l+0x5c4>
 800c2ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c2ce:	f7f4 f9bb 	bl	8000648 <__aeabi_dmul>
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	1064      	asrs	r4, r4, #1
 800c2d6:	f106 0608 	add.w	r6, r6, #8
 800c2da:	d1f4      	bne.n	800c2c6 <_strtod_l+0x5b6>
 800c2dc:	b10b      	cbz	r3, 800c2e2 <_strtod_l+0x5d2>
 800c2de:	4682      	mov	sl, r0
 800c2e0:	468b      	mov	fp, r1
 800c2e2:	9b08      	ldr	r3, [sp, #32]
 800c2e4:	b1b3      	cbz	r3, 800c314 <_strtod_l+0x604>
 800c2e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c2ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	4659      	mov	r1, fp
 800c2f2:	dd0f      	ble.n	800c314 <_strtod_l+0x604>
 800c2f4:	2b1f      	cmp	r3, #31
 800c2f6:	dd55      	ble.n	800c3a4 <_strtod_l+0x694>
 800c2f8:	2b34      	cmp	r3, #52	@ 0x34
 800c2fa:	bfde      	ittt	le
 800c2fc:	f04f 33ff 	movle.w	r3, #4294967295
 800c300:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c304:	4093      	lslle	r3, r2
 800c306:	f04f 0a00 	mov.w	sl, #0
 800c30a:	bfcc      	ite	gt
 800c30c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c310:	ea03 0b01 	andle.w	fp, r3, r1
 800c314:	2200      	movs	r2, #0
 800c316:	2300      	movs	r3, #0
 800c318:	4650      	mov	r0, sl
 800c31a:	4659      	mov	r1, fp
 800c31c:	f7f4 fbfc 	bl	8000b18 <__aeabi_dcmpeq>
 800c320:	2800      	cmp	r0, #0
 800c322:	d1a6      	bne.n	800c272 <_strtod_l+0x562>
 800c324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c326:	9300      	str	r3, [sp, #0]
 800c328:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c32a:	9805      	ldr	r0, [sp, #20]
 800c32c:	462b      	mov	r3, r5
 800c32e:	463a      	mov	r2, r7
 800c330:	f7ff f8c6 	bl	800b4c0 <__s2b>
 800c334:	900a      	str	r0, [sp, #40]	@ 0x28
 800c336:	2800      	cmp	r0, #0
 800c338:	f43f af05 	beq.w	800c146 <_strtod_l+0x436>
 800c33c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c33e:	2a00      	cmp	r2, #0
 800c340:	eba9 0308 	sub.w	r3, r9, r8
 800c344:	bfa8      	it	ge
 800c346:	2300      	movge	r3, #0
 800c348:	9312      	str	r3, [sp, #72]	@ 0x48
 800c34a:	2400      	movs	r4, #0
 800c34c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c350:	9316      	str	r3, [sp, #88]	@ 0x58
 800c352:	46a0      	mov	r8, r4
 800c354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c356:	9805      	ldr	r0, [sp, #20]
 800c358:	6859      	ldr	r1, [r3, #4]
 800c35a:	f7ff f809 	bl	800b370 <_Balloc>
 800c35e:	4681      	mov	r9, r0
 800c360:	2800      	cmp	r0, #0
 800c362:	f43f aef4 	beq.w	800c14e <_strtod_l+0x43e>
 800c366:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c368:	691a      	ldr	r2, [r3, #16]
 800c36a:	3202      	adds	r2, #2
 800c36c:	f103 010c 	add.w	r1, r3, #12
 800c370:	0092      	lsls	r2, r2, #2
 800c372:	300c      	adds	r0, #12
 800c374:	f000 fd72 	bl	800ce5c <memcpy>
 800c378:	ec4b ab10 	vmov	d0, sl, fp
 800c37c:	9805      	ldr	r0, [sp, #20]
 800c37e:	aa1c      	add	r2, sp, #112	@ 0x70
 800c380:	a91b      	add	r1, sp, #108	@ 0x6c
 800c382:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c386:	f7ff fbd7 	bl	800bb38 <__d2b>
 800c38a:	901a      	str	r0, [sp, #104]	@ 0x68
 800c38c:	2800      	cmp	r0, #0
 800c38e:	f43f aede 	beq.w	800c14e <_strtod_l+0x43e>
 800c392:	9805      	ldr	r0, [sp, #20]
 800c394:	2101      	movs	r1, #1
 800c396:	f7ff f929 	bl	800b5ec <__i2b>
 800c39a:	4680      	mov	r8, r0
 800c39c:	b948      	cbnz	r0, 800c3b2 <_strtod_l+0x6a2>
 800c39e:	f04f 0800 	mov.w	r8, #0
 800c3a2:	e6d4      	b.n	800c14e <_strtod_l+0x43e>
 800c3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ac:	ea03 0a0a 	and.w	sl, r3, sl
 800c3b0:	e7b0      	b.n	800c314 <_strtod_l+0x604>
 800c3b2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c3b4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c3b6:	2d00      	cmp	r5, #0
 800c3b8:	bfab      	itete	ge
 800c3ba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c3bc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c3be:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c3c0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c3c2:	bfac      	ite	ge
 800c3c4:	18ef      	addge	r7, r5, r3
 800c3c6:	1b5e      	sublt	r6, r3, r5
 800c3c8:	9b08      	ldr	r3, [sp, #32]
 800c3ca:	1aed      	subs	r5, r5, r3
 800c3cc:	4415      	add	r5, r2
 800c3ce:	4b66      	ldr	r3, [pc, #408]	@ (800c568 <_strtod_l+0x858>)
 800c3d0:	3d01      	subs	r5, #1
 800c3d2:	429d      	cmp	r5, r3
 800c3d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c3d8:	da50      	bge.n	800c47c <_strtod_l+0x76c>
 800c3da:	1b5b      	subs	r3, r3, r5
 800c3dc:	2b1f      	cmp	r3, #31
 800c3de:	eba2 0203 	sub.w	r2, r2, r3
 800c3e2:	f04f 0101 	mov.w	r1, #1
 800c3e6:	dc3d      	bgt.n	800c464 <_strtod_l+0x754>
 800c3e8:	fa01 f303 	lsl.w	r3, r1, r3
 800c3ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800c3f2:	18bd      	adds	r5, r7, r2
 800c3f4:	9b08      	ldr	r3, [sp, #32]
 800c3f6:	42af      	cmp	r7, r5
 800c3f8:	4416      	add	r6, r2
 800c3fa:	441e      	add	r6, r3
 800c3fc:	463b      	mov	r3, r7
 800c3fe:	bfa8      	it	ge
 800c400:	462b      	movge	r3, r5
 800c402:	42b3      	cmp	r3, r6
 800c404:	bfa8      	it	ge
 800c406:	4633      	movge	r3, r6
 800c408:	2b00      	cmp	r3, #0
 800c40a:	bfc2      	ittt	gt
 800c40c:	1aed      	subgt	r5, r5, r3
 800c40e:	1af6      	subgt	r6, r6, r3
 800c410:	1aff      	subgt	r7, r7, r3
 800c412:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c414:	2b00      	cmp	r3, #0
 800c416:	dd16      	ble.n	800c446 <_strtod_l+0x736>
 800c418:	4641      	mov	r1, r8
 800c41a:	9805      	ldr	r0, [sp, #20]
 800c41c:	461a      	mov	r2, r3
 800c41e:	f7ff f9a5 	bl	800b76c <__pow5mult>
 800c422:	4680      	mov	r8, r0
 800c424:	2800      	cmp	r0, #0
 800c426:	d0ba      	beq.n	800c39e <_strtod_l+0x68e>
 800c428:	4601      	mov	r1, r0
 800c42a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c42c:	9805      	ldr	r0, [sp, #20]
 800c42e:	f7ff f8f3 	bl	800b618 <__multiply>
 800c432:	900e      	str	r0, [sp, #56]	@ 0x38
 800c434:	2800      	cmp	r0, #0
 800c436:	f43f ae8a 	beq.w	800c14e <_strtod_l+0x43e>
 800c43a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c43c:	9805      	ldr	r0, [sp, #20]
 800c43e:	f7fe ffd7 	bl	800b3f0 <_Bfree>
 800c442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c444:	931a      	str	r3, [sp, #104]	@ 0x68
 800c446:	2d00      	cmp	r5, #0
 800c448:	dc1d      	bgt.n	800c486 <_strtod_l+0x776>
 800c44a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	dd23      	ble.n	800c498 <_strtod_l+0x788>
 800c450:	4649      	mov	r1, r9
 800c452:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c454:	9805      	ldr	r0, [sp, #20]
 800c456:	f7ff f989 	bl	800b76c <__pow5mult>
 800c45a:	4681      	mov	r9, r0
 800c45c:	b9e0      	cbnz	r0, 800c498 <_strtod_l+0x788>
 800c45e:	f04f 0900 	mov.w	r9, #0
 800c462:	e674      	b.n	800c14e <_strtod_l+0x43e>
 800c464:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c468:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c46c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c470:	35e2      	adds	r5, #226	@ 0xe2
 800c472:	fa01 f305 	lsl.w	r3, r1, r5
 800c476:	9310      	str	r3, [sp, #64]	@ 0x40
 800c478:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c47a:	e7ba      	b.n	800c3f2 <_strtod_l+0x6e2>
 800c47c:	2300      	movs	r3, #0
 800c47e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c480:	2301      	movs	r3, #1
 800c482:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c484:	e7b5      	b.n	800c3f2 <_strtod_l+0x6e2>
 800c486:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c488:	9805      	ldr	r0, [sp, #20]
 800c48a:	462a      	mov	r2, r5
 800c48c:	f7ff f9c8 	bl	800b820 <__lshift>
 800c490:	901a      	str	r0, [sp, #104]	@ 0x68
 800c492:	2800      	cmp	r0, #0
 800c494:	d1d9      	bne.n	800c44a <_strtod_l+0x73a>
 800c496:	e65a      	b.n	800c14e <_strtod_l+0x43e>
 800c498:	2e00      	cmp	r6, #0
 800c49a:	dd07      	ble.n	800c4ac <_strtod_l+0x79c>
 800c49c:	4649      	mov	r1, r9
 800c49e:	9805      	ldr	r0, [sp, #20]
 800c4a0:	4632      	mov	r2, r6
 800c4a2:	f7ff f9bd 	bl	800b820 <__lshift>
 800c4a6:	4681      	mov	r9, r0
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	d0d8      	beq.n	800c45e <_strtod_l+0x74e>
 800c4ac:	2f00      	cmp	r7, #0
 800c4ae:	dd08      	ble.n	800c4c2 <_strtod_l+0x7b2>
 800c4b0:	4641      	mov	r1, r8
 800c4b2:	9805      	ldr	r0, [sp, #20]
 800c4b4:	463a      	mov	r2, r7
 800c4b6:	f7ff f9b3 	bl	800b820 <__lshift>
 800c4ba:	4680      	mov	r8, r0
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	f43f ae46 	beq.w	800c14e <_strtod_l+0x43e>
 800c4c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c4c4:	9805      	ldr	r0, [sp, #20]
 800c4c6:	464a      	mov	r2, r9
 800c4c8:	f7ff fa32 	bl	800b930 <__mdiff>
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	f43f ae3d 	beq.w	800c14e <_strtod_l+0x43e>
 800c4d4:	68c3      	ldr	r3, [r0, #12]
 800c4d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c4d8:	2300      	movs	r3, #0
 800c4da:	60c3      	str	r3, [r0, #12]
 800c4dc:	4641      	mov	r1, r8
 800c4de:	f7ff fa0b 	bl	800b8f8 <__mcmp>
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	da46      	bge.n	800c574 <_strtod_l+0x864>
 800c4e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4e8:	ea53 030a 	orrs.w	r3, r3, sl
 800c4ec:	d16c      	bne.n	800c5c8 <_strtod_l+0x8b8>
 800c4ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d168      	bne.n	800c5c8 <_strtod_l+0x8b8>
 800c4f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c4fa:	0d1b      	lsrs	r3, r3, #20
 800c4fc:	051b      	lsls	r3, r3, #20
 800c4fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c502:	d961      	bls.n	800c5c8 <_strtod_l+0x8b8>
 800c504:	6963      	ldr	r3, [r4, #20]
 800c506:	b913      	cbnz	r3, 800c50e <_strtod_l+0x7fe>
 800c508:	6923      	ldr	r3, [r4, #16]
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	dd5c      	ble.n	800c5c8 <_strtod_l+0x8b8>
 800c50e:	4621      	mov	r1, r4
 800c510:	2201      	movs	r2, #1
 800c512:	9805      	ldr	r0, [sp, #20]
 800c514:	f7ff f984 	bl	800b820 <__lshift>
 800c518:	4641      	mov	r1, r8
 800c51a:	4604      	mov	r4, r0
 800c51c:	f7ff f9ec 	bl	800b8f8 <__mcmp>
 800c520:	2800      	cmp	r0, #0
 800c522:	dd51      	ble.n	800c5c8 <_strtod_l+0x8b8>
 800c524:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c528:	9a08      	ldr	r2, [sp, #32]
 800c52a:	0d1b      	lsrs	r3, r3, #20
 800c52c:	051b      	lsls	r3, r3, #20
 800c52e:	2a00      	cmp	r2, #0
 800c530:	d06b      	beq.n	800c60a <_strtod_l+0x8fa>
 800c532:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c536:	d868      	bhi.n	800c60a <_strtod_l+0x8fa>
 800c538:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c53c:	f67f ae9d 	bls.w	800c27a <_strtod_l+0x56a>
 800c540:	4b0a      	ldr	r3, [pc, #40]	@ (800c56c <_strtod_l+0x85c>)
 800c542:	4650      	mov	r0, sl
 800c544:	4659      	mov	r1, fp
 800c546:	2200      	movs	r2, #0
 800c548:	f7f4 f87e 	bl	8000648 <__aeabi_dmul>
 800c54c:	4b08      	ldr	r3, [pc, #32]	@ (800c570 <_strtod_l+0x860>)
 800c54e:	400b      	ands	r3, r1
 800c550:	4682      	mov	sl, r0
 800c552:	468b      	mov	fp, r1
 800c554:	2b00      	cmp	r3, #0
 800c556:	f47f ae05 	bne.w	800c164 <_strtod_l+0x454>
 800c55a:	9a05      	ldr	r2, [sp, #20]
 800c55c:	2322      	movs	r3, #34	@ 0x22
 800c55e:	6013      	str	r3, [r2, #0]
 800c560:	e600      	b.n	800c164 <_strtod_l+0x454>
 800c562:	bf00      	nop
 800c564:	0800e088 	.word	0x0800e088
 800c568:	fffffc02 	.word	0xfffffc02
 800c56c:	39500000 	.word	0x39500000
 800c570:	7ff00000 	.word	0x7ff00000
 800c574:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c578:	d165      	bne.n	800c646 <_strtod_l+0x936>
 800c57a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c57c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c580:	b35a      	cbz	r2, 800c5da <_strtod_l+0x8ca>
 800c582:	4a9f      	ldr	r2, [pc, #636]	@ (800c800 <_strtod_l+0xaf0>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d12b      	bne.n	800c5e0 <_strtod_l+0x8d0>
 800c588:	9b08      	ldr	r3, [sp, #32]
 800c58a:	4651      	mov	r1, sl
 800c58c:	b303      	cbz	r3, 800c5d0 <_strtod_l+0x8c0>
 800c58e:	4b9d      	ldr	r3, [pc, #628]	@ (800c804 <_strtod_l+0xaf4>)
 800c590:	465a      	mov	r2, fp
 800c592:	4013      	ands	r3, r2
 800c594:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c598:	f04f 32ff 	mov.w	r2, #4294967295
 800c59c:	d81b      	bhi.n	800c5d6 <_strtod_l+0x8c6>
 800c59e:	0d1b      	lsrs	r3, r3, #20
 800c5a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c5a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c5a8:	4299      	cmp	r1, r3
 800c5aa:	d119      	bne.n	800c5e0 <_strtod_l+0x8d0>
 800c5ac:	4b96      	ldr	r3, [pc, #600]	@ (800c808 <_strtod_l+0xaf8>)
 800c5ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d102      	bne.n	800c5ba <_strtod_l+0x8aa>
 800c5b4:	3101      	adds	r1, #1
 800c5b6:	f43f adca 	beq.w	800c14e <_strtod_l+0x43e>
 800c5ba:	4b92      	ldr	r3, [pc, #584]	@ (800c804 <_strtod_l+0xaf4>)
 800c5bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5be:	401a      	ands	r2, r3
 800c5c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c5c4:	f04f 0a00 	mov.w	sl, #0
 800c5c8:	9b08      	ldr	r3, [sp, #32]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d1b8      	bne.n	800c540 <_strtod_l+0x830>
 800c5ce:	e5c9      	b.n	800c164 <_strtod_l+0x454>
 800c5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5d4:	e7e8      	b.n	800c5a8 <_strtod_l+0x898>
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	e7e6      	b.n	800c5a8 <_strtod_l+0x898>
 800c5da:	ea53 030a 	orrs.w	r3, r3, sl
 800c5de:	d0a1      	beq.n	800c524 <_strtod_l+0x814>
 800c5e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c5e2:	b1db      	cbz	r3, 800c61c <_strtod_l+0x90c>
 800c5e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5e6:	4213      	tst	r3, r2
 800c5e8:	d0ee      	beq.n	800c5c8 <_strtod_l+0x8b8>
 800c5ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5ec:	9a08      	ldr	r2, [sp, #32]
 800c5ee:	4650      	mov	r0, sl
 800c5f0:	4659      	mov	r1, fp
 800c5f2:	b1bb      	cbz	r3, 800c624 <_strtod_l+0x914>
 800c5f4:	f7ff fb6e 	bl	800bcd4 <sulp>
 800c5f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c5fc:	ec53 2b10 	vmov	r2, r3, d0
 800c600:	f7f3 fe6c 	bl	80002dc <__adddf3>
 800c604:	4682      	mov	sl, r0
 800c606:	468b      	mov	fp, r1
 800c608:	e7de      	b.n	800c5c8 <_strtod_l+0x8b8>
 800c60a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c60e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c612:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c616:	f04f 3aff 	mov.w	sl, #4294967295
 800c61a:	e7d5      	b.n	800c5c8 <_strtod_l+0x8b8>
 800c61c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c61e:	ea13 0f0a 	tst.w	r3, sl
 800c622:	e7e1      	b.n	800c5e8 <_strtod_l+0x8d8>
 800c624:	f7ff fb56 	bl	800bcd4 <sulp>
 800c628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c62c:	ec53 2b10 	vmov	r2, r3, d0
 800c630:	f7f3 fe52 	bl	80002d8 <__aeabi_dsub>
 800c634:	2200      	movs	r2, #0
 800c636:	2300      	movs	r3, #0
 800c638:	4682      	mov	sl, r0
 800c63a:	468b      	mov	fp, r1
 800c63c:	f7f4 fa6c 	bl	8000b18 <__aeabi_dcmpeq>
 800c640:	2800      	cmp	r0, #0
 800c642:	d0c1      	beq.n	800c5c8 <_strtod_l+0x8b8>
 800c644:	e619      	b.n	800c27a <_strtod_l+0x56a>
 800c646:	4641      	mov	r1, r8
 800c648:	4620      	mov	r0, r4
 800c64a:	f7ff facd 	bl	800bbe8 <__ratio>
 800c64e:	ec57 6b10 	vmov	r6, r7, d0
 800c652:	2200      	movs	r2, #0
 800c654:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c658:	4630      	mov	r0, r6
 800c65a:	4639      	mov	r1, r7
 800c65c:	f7f4 fa70 	bl	8000b40 <__aeabi_dcmple>
 800c660:	2800      	cmp	r0, #0
 800c662:	d06f      	beq.n	800c744 <_strtod_l+0xa34>
 800c664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c666:	2b00      	cmp	r3, #0
 800c668:	d17a      	bne.n	800c760 <_strtod_l+0xa50>
 800c66a:	f1ba 0f00 	cmp.w	sl, #0
 800c66e:	d158      	bne.n	800c722 <_strtod_l+0xa12>
 800c670:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c672:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c676:	2b00      	cmp	r3, #0
 800c678:	d15a      	bne.n	800c730 <_strtod_l+0xa20>
 800c67a:	4b64      	ldr	r3, [pc, #400]	@ (800c80c <_strtod_l+0xafc>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	4630      	mov	r0, r6
 800c680:	4639      	mov	r1, r7
 800c682:	f7f4 fa53 	bl	8000b2c <__aeabi_dcmplt>
 800c686:	2800      	cmp	r0, #0
 800c688:	d159      	bne.n	800c73e <_strtod_l+0xa2e>
 800c68a:	4630      	mov	r0, r6
 800c68c:	4639      	mov	r1, r7
 800c68e:	4b60      	ldr	r3, [pc, #384]	@ (800c810 <_strtod_l+0xb00>)
 800c690:	2200      	movs	r2, #0
 800c692:	f7f3 ffd9 	bl	8000648 <__aeabi_dmul>
 800c696:	4606      	mov	r6, r0
 800c698:	460f      	mov	r7, r1
 800c69a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c69e:	9606      	str	r6, [sp, #24]
 800c6a0:	9307      	str	r3, [sp, #28]
 800c6a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6a6:	4d57      	ldr	r5, [pc, #348]	@ (800c804 <_strtod_l+0xaf4>)
 800c6a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c6ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6ae:	401d      	ands	r5, r3
 800c6b0:	4b58      	ldr	r3, [pc, #352]	@ (800c814 <_strtod_l+0xb04>)
 800c6b2:	429d      	cmp	r5, r3
 800c6b4:	f040 80b2 	bne.w	800c81c <_strtod_l+0xb0c>
 800c6b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c6be:	ec4b ab10 	vmov	d0, sl, fp
 800c6c2:	f7ff f9c9 	bl	800ba58 <__ulp>
 800c6c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6ca:	ec51 0b10 	vmov	r0, r1, d0
 800c6ce:	f7f3 ffbb 	bl	8000648 <__aeabi_dmul>
 800c6d2:	4652      	mov	r2, sl
 800c6d4:	465b      	mov	r3, fp
 800c6d6:	f7f3 fe01 	bl	80002dc <__adddf3>
 800c6da:	460b      	mov	r3, r1
 800c6dc:	4949      	ldr	r1, [pc, #292]	@ (800c804 <_strtod_l+0xaf4>)
 800c6de:	4a4e      	ldr	r2, [pc, #312]	@ (800c818 <_strtod_l+0xb08>)
 800c6e0:	4019      	ands	r1, r3
 800c6e2:	4291      	cmp	r1, r2
 800c6e4:	4682      	mov	sl, r0
 800c6e6:	d942      	bls.n	800c76e <_strtod_l+0xa5e>
 800c6e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c6ea:	4b47      	ldr	r3, [pc, #284]	@ (800c808 <_strtod_l+0xaf8>)
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d103      	bne.n	800c6f8 <_strtod_l+0x9e8>
 800c6f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	f43f ad2b 	beq.w	800c14e <_strtod_l+0x43e>
 800c6f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c808 <_strtod_l+0xaf8>
 800c6fc:	f04f 3aff 	mov.w	sl, #4294967295
 800c700:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c702:	9805      	ldr	r0, [sp, #20]
 800c704:	f7fe fe74 	bl	800b3f0 <_Bfree>
 800c708:	9805      	ldr	r0, [sp, #20]
 800c70a:	4649      	mov	r1, r9
 800c70c:	f7fe fe70 	bl	800b3f0 <_Bfree>
 800c710:	9805      	ldr	r0, [sp, #20]
 800c712:	4641      	mov	r1, r8
 800c714:	f7fe fe6c 	bl	800b3f0 <_Bfree>
 800c718:	9805      	ldr	r0, [sp, #20]
 800c71a:	4621      	mov	r1, r4
 800c71c:	f7fe fe68 	bl	800b3f0 <_Bfree>
 800c720:	e618      	b.n	800c354 <_strtod_l+0x644>
 800c722:	f1ba 0f01 	cmp.w	sl, #1
 800c726:	d103      	bne.n	800c730 <_strtod_l+0xa20>
 800c728:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f43f ada5 	beq.w	800c27a <_strtod_l+0x56a>
 800c730:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c7e0 <_strtod_l+0xad0>
 800c734:	4f35      	ldr	r7, [pc, #212]	@ (800c80c <_strtod_l+0xafc>)
 800c736:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c73a:	2600      	movs	r6, #0
 800c73c:	e7b1      	b.n	800c6a2 <_strtod_l+0x992>
 800c73e:	4f34      	ldr	r7, [pc, #208]	@ (800c810 <_strtod_l+0xb00>)
 800c740:	2600      	movs	r6, #0
 800c742:	e7aa      	b.n	800c69a <_strtod_l+0x98a>
 800c744:	4b32      	ldr	r3, [pc, #200]	@ (800c810 <_strtod_l+0xb00>)
 800c746:	4630      	mov	r0, r6
 800c748:	4639      	mov	r1, r7
 800c74a:	2200      	movs	r2, #0
 800c74c:	f7f3 ff7c 	bl	8000648 <__aeabi_dmul>
 800c750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c752:	4606      	mov	r6, r0
 800c754:	460f      	mov	r7, r1
 800c756:	2b00      	cmp	r3, #0
 800c758:	d09f      	beq.n	800c69a <_strtod_l+0x98a>
 800c75a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c75e:	e7a0      	b.n	800c6a2 <_strtod_l+0x992>
 800c760:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c7e8 <_strtod_l+0xad8>
 800c764:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c768:	ec57 6b17 	vmov	r6, r7, d7
 800c76c:	e799      	b.n	800c6a2 <_strtod_l+0x992>
 800c76e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c772:	9b08      	ldr	r3, [sp, #32]
 800c774:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d1c1      	bne.n	800c700 <_strtod_l+0x9f0>
 800c77c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c780:	0d1b      	lsrs	r3, r3, #20
 800c782:	051b      	lsls	r3, r3, #20
 800c784:	429d      	cmp	r5, r3
 800c786:	d1bb      	bne.n	800c700 <_strtod_l+0x9f0>
 800c788:	4630      	mov	r0, r6
 800c78a:	4639      	mov	r1, r7
 800c78c:	f7f4 fabc 	bl	8000d08 <__aeabi_d2lz>
 800c790:	f7f3 ff2c 	bl	80005ec <__aeabi_l2d>
 800c794:	4602      	mov	r2, r0
 800c796:	460b      	mov	r3, r1
 800c798:	4630      	mov	r0, r6
 800c79a:	4639      	mov	r1, r7
 800c79c:	f7f3 fd9c 	bl	80002d8 <__aeabi_dsub>
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c7a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c7ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7ae:	ea46 060a 	orr.w	r6, r6, sl
 800c7b2:	431e      	orrs	r6, r3
 800c7b4:	d06f      	beq.n	800c896 <_strtod_l+0xb86>
 800c7b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c7f0 <_strtod_l+0xae0>)
 800c7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7bc:	f7f4 f9b6 	bl	8000b2c <__aeabi_dcmplt>
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	f47f accf 	bne.w	800c164 <_strtod_l+0x454>
 800c7c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800c7f8 <_strtod_l+0xae8>)
 800c7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c7d0:	f7f4 f9ca 	bl	8000b68 <__aeabi_dcmpgt>
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	d093      	beq.n	800c700 <_strtod_l+0x9f0>
 800c7d8:	e4c4      	b.n	800c164 <_strtod_l+0x454>
 800c7da:	bf00      	nop
 800c7dc:	f3af 8000 	nop.w
 800c7e0:	00000000 	.word	0x00000000
 800c7e4:	bff00000 	.word	0xbff00000
 800c7e8:	00000000 	.word	0x00000000
 800c7ec:	3ff00000 	.word	0x3ff00000
 800c7f0:	94a03595 	.word	0x94a03595
 800c7f4:	3fdfffff 	.word	0x3fdfffff
 800c7f8:	35afe535 	.word	0x35afe535
 800c7fc:	3fe00000 	.word	0x3fe00000
 800c800:	000fffff 	.word	0x000fffff
 800c804:	7ff00000 	.word	0x7ff00000
 800c808:	7fefffff 	.word	0x7fefffff
 800c80c:	3ff00000 	.word	0x3ff00000
 800c810:	3fe00000 	.word	0x3fe00000
 800c814:	7fe00000 	.word	0x7fe00000
 800c818:	7c9fffff 	.word	0x7c9fffff
 800c81c:	9b08      	ldr	r3, [sp, #32]
 800c81e:	b323      	cbz	r3, 800c86a <_strtod_l+0xb5a>
 800c820:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c824:	d821      	bhi.n	800c86a <_strtod_l+0xb5a>
 800c826:	a328      	add	r3, pc, #160	@ (adr r3, 800c8c8 <_strtod_l+0xbb8>)
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	4630      	mov	r0, r6
 800c82e:	4639      	mov	r1, r7
 800c830:	f7f4 f986 	bl	8000b40 <__aeabi_dcmple>
 800c834:	b1a0      	cbz	r0, 800c860 <_strtod_l+0xb50>
 800c836:	4639      	mov	r1, r7
 800c838:	4630      	mov	r0, r6
 800c83a:	f7f4 f9dd 	bl	8000bf8 <__aeabi_d2uiz>
 800c83e:	2801      	cmp	r0, #1
 800c840:	bf38      	it	cc
 800c842:	2001      	movcc	r0, #1
 800c844:	f7f3 fe86 	bl	8000554 <__aeabi_ui2d>
 800c848:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c84a:	4606      	mov	r6, r0
 800c84c:	460f      	mov	r7, r1
 800c84e:	b9fb      	cbnz	r3, 800c890 <_strtod_l+0xb80>
 800c850:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c854:	9014      	str	r0, [sp, #80]	@ 0x50
 800c856:	9315      	str	r3, [sp, #84]	@ 0x54
 800c858:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c85c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c860:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c862:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c866:	1b5b      	subs	r3, r3, r5
 800c868:	9311      	str	r3, [sp, #68]	@ 0x44
 800c86a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c86e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c872:	f7ff f8f1 	bl	800ba58 <__ulp>
 800c876:	4650      	mov	r0, sl
 800c878:	ec53 2b10 	vmov	r2, r3, d0
 800c87c:	4659      	mov	r1, fp
 800c87e:	f7f3 fee3 	bl	8000648 <__aeabi_dmul>
 800c882:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c886:	f7f3 fd29 	bl	80002dc <__adddf3>
 800c88a:	4682      	mov	sl, r0
 800c88c:	468b      	mov	fp, r1
 800c88e:	e770      	b.n	800c772 <_strtod_l+0xa62>
 800c890:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c894:	e7e0      	b.n	800c858 <_strtod_l+0xb48>
 800c896:	a30e      	add	r3, pc, #56	@ (adr r3, 800c8d0 <_strtod_l+0xbc0>)
 800c898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89c:	f7f4 f946 	bl	8000b2c <__aeabi_dcmplt>
 800c8a0:	e798      	b.n	800c7d4 <_strtod_l+0xac4>
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c8a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c8aa:	6013      	str	r3, [r2, #0]
 800c8ac:	f7ff ba6d 	b.w	800bd8a <_strtod_l+0x7a>
 800c8b0:	2a65      	cmp	r2, #101	@ 0x65
 800c8b2:	f43f ab66 	beq.w	800bf82 <_strtod_l+0x272>
 800c8b6:	2a45      	cmp	r2, #69	@ 0x45
 800c8b8:	f43f ab63 	beq.w	800bf82 <_strtod_l+0x272>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	f7ff bb9e 	b.w	800bffe <_strtod_l+0x2ee>
 800c8c2:	bf00      	nop
 800c8c4:	f3af 8000 	nop.w
 800c8c8:	ffc00000 	.word	0xffc00000
 800c8cc:	41dfffff 	.word	0x41dfffff
 800c8d0:	94a03595 	.word	0x94a03595
 800c8d4:	3fcfffff 	.word	0x3fcfffff

0800c8d8 <_strtod_r>:
 800c8d8:	4b01      	ldr	r3, [pc, #4]	@ (800c8e0 <_strtod_r+0x8>)
 800c8da:	f7ff ba19 	b.w	800bd10 <_strtod_l>
 800c8de:	bf00      	nop
 800c8e0:	20000068 	.word	0x20000068

0800c8e4 <_strtol_l.constprop.0>:
 800c8e4:	2b24      	cmp	r3, #36	@ 0x24
 800c8e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8ea:	4686      	mov	lr, r0
 800c8ec:	4690      	mov	r8, r2
 800c8ee:	d801      	bhi.n	800c8f4 <_strtol_l.constprop.0+0x10>
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d106      	bne.n	800c902 <_strtol_l.constprop.0+0x1e>
 800c8f4:	f7fd fdbc 	bl	800a470 <__errno>
 800c8f8:	2316      	movs	r3, #22
 800c8fa:	6003      	str	r3, [r0, #0]
 800c8fc:	2000      	movs	r0, #0
 800c8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c902:	4834      	ldr	r0, [pc, #208]	@ (800c9d4 <_strtol_l.constprop.0+0xf0>)
 800c904:	460d      	mov	r5, r1
 800c906:	462a      	mov	r2, r5
 800c908:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c90c:	5d06      	ldrb	r6, [r0, r4]
 800c90e:	f016 0608 	ands.w	r6, r6, #8
 800c912:	d1f8      	bne.n	800c906 <_strtol_l.constprop.0+0x22>
 800c914:	2c2d      	cmp	r4, #45	@ 0x2d
 800c916:	d12d      	bne.n	800c974 <_strtol_l.constprop.0+0x90>
 800c918:	782c      	ldrb	r4, [r5, #0]
 800c91a:	2601      	movs	r6, #1
 800c91c:	1c95      	adds	r5, r2, #2
 800c91e:	f033 0210 	bics.w	r2, r3, #16
 800c922:	d109      	bne.n	800c938 <_strtol_l.constprop.0+0x54>
 800c924:	2c30      	cmp	r4, #48	@ 0x30
 800c926:	d12a      	bne.n	800c97e <_strtol_l.constprop.0+0x9a>
 800c928:	782a      	ldrb	r2, [r5, #0]
 800c92a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c92e:	2a58      	cmp	r2, #88	@ 0x58
 800c930:	d125      	bne.n	800c97e <_strtol_l.constprop.0+0x9a>
 800c932:	786c      	ldrb	r4, [r5, #1]
 800c934:	2310      	movs	r3, #16
 800c936:	3502      	adds	r5, #2
 800c938:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c93c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c940:	2200      	movs	r2, #0
 800c942:	fbbc f9f3 	udiv	r9, ip, r3
 800c946:	4610      	mov	r0, r2
 800c948:	fb03 ca19 	mls	sl, r3, r9, ip
 800c94c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c950:	2f09      	cmp	r7, #9
 800c952:	d81b      	bhi.n	800c98c <_strtol_l.constprop.0+0xa8>
 800c954:	463c      	mov	r4, r7
 800c956:	42a3      	cmp	r3, r4
 800c958:	dd27      	ble.n	800c9aa <_strtol_l.constprop.0+0xc6>
 800c95a:	1c57      	adds	r7, r2, #1
 800c95c:	d007      	beq.n	800c96e <_strtol_l.constprop.0+0x8a>
 800c95e:	4581      	cmp	r9, r0
 800c960:	d320      	bcc.n	800c9a4 <_strtol_l.constprop.0+0xc0>
 800c962:	d101      	bne.n	800c968 <_strtol_l.constprop.0+0x84>
 800c964:	45a2      	cmp	sl, r4
 800c966:	db1d      	blt.n	800c9a4 <_strtol_l.constprop.0+0xc0>
 800c968:	fb00 4003 	mla	r0, r0, r3, r4
 800c96c:	2201      	movs	r2, #1
 800c96e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c972:	e7eb      	b.n	800c94c <_strtol_l.constprop.0+0x68>
 800c974:	2c2b      	cmp	r4, #43	@ 0x2b
 800c976:	bf04      	itt	eq
 800c978:	782c      	ldrbeq	r4, [r5, #0]
 800c97a:	1c95      	addeq	r5, r2, #2
 800c97c:	e7cf      	b.n	800c91e <_strtol_l.constprop.0+0x3a>
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1da      	bne.n	800c938 <_strtol_l.constprop.0+0x54>
 800c982:	2c30      	cmp	r4, #48	@ 0x30
 800c984:	bf0c      	ite	eq
 800c986:	2308      	moveq	r3, #8
 800c988:	230a      	movne	r3, #10
 800c98a:	e7d5      	b.n	800c938 <_strtol_l.constprop.0+0x54>
 800c98c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c990:	2f19      	cmp	r7, #25
 800c992:	d801      	bhi.n	800c998 <_strtol_l.constprop.0+0xb4>
 800c994:	3c37      	subs	r4, #55	@ 0x37
 800c996:	e7de      	b.n	800c956 <_strtol_l.constprop.0+0x72>
 800c998:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c99c:	2f19      	cmp	r7, #25
 800c99e:	d804      	bhi.n	800c9aa <_strtol_l.constprop.0+0xc6>
 800c9a0:	3c57      	subs	r4, #87	@ 0x57
 800c9a2:	e7d8      	b.n	800c956 <_strtol_l.constprop.0+0x72>
 800c9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a8:	e7e1      	b.n	800c96e <_strtol_l.constprop.0+0x8a>
 800c9aa:	1c53      	adds	r3, r2, #1
 800c9ac:	d108      	bne.n	800c9c0 <_strtol_l.constprop.0+0xdc>
 800c9ae:	2322      	movs	r3, #34	@ 0x22
 800c9b0:	f8ce 3000 	str.w	r3, [lr]
 800c9b4:	4660      	mov	r0, ip
 800c9b6:	f1b8 0f00 	cmp.w	r8, #0
 800c9ba:	d0a0      	beq.n	800c8fe <_strtol_l.constprop.0+0x1a>
 800c9bc:	1e69      	subs	r1, r5, #1
 800c9be:	e006      	b.n	800c9ce <_strtol_l.constprop.0+0xea>
 800c9c0:	b106      	cbz	r6, 800c9c4 <_strtol_l.constprop.0+0xe0>
 800c9c2:	4240      	negs	r0, r0
 800c9c4:	f1b8 0f00 	cmp.w	r8, #0
 800c9c8:	d099      	beq.n	800c8fe <_strtol_l.constprop.0+0x1a>
 800c9ca:	2a00      	cmp	r2, #0
 800c9cc:	d1f6      	bne.n	800c9bc <_strtol_l.constprop.0+0xd8>
 800c9ce:	f8c8 1000 	str.w	r1, [r8]
 800c9d2:	e794      	b.n	800c8fe <_strtol_l.constprop.0+0x1a>
 800c9d4:	0800e0b1 	.word	0x0800e0b1

0800c9d8 <_strtol_r>:
 800c9d8:	f7ff bf84 	b.w	800c8e4 <_strtol_l.constprop.0>

0800c9dc <__ssputs_r>:
 800c9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e0:	688e      	ldr	r6, [r1, #8]
 800c9e2:	461f      	mov	r7, r3
 800c9e4:	42be      	cmp	r6, r7
 800c9e6:	680b      	ldr	r3, [r1, #0]
 800c9e8:	4682      	mov	sl, r0
 800c9ea:	460c      	mov	r4, r1
 800c9ec:	4690      	mov	r8, r2
 800c9ee:	d82d      	bhi.n	800ca4c <__ssputs_r+0x70>
 800c9f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c9f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c9f8:	d026      	beq.n	800ca48 <__ssputs_r+0x6c>
 800c9fa:	6965      	ldr	r5, [r4, #20]
 800c9fc:	6909      	ldr	r1, [r1, #16]
 800c9fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca02:	eba3 0901 	sub.w	r9, r3, r1
 800ca06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca0a:	1c7b      	adds	r3, r7, #1
 800ca0c:	444b      	add	r3, r9
 800ca0e:	106d      	asrs	r5, r5, #1
 800ca10:	429d      	cmp	r5, r3
 800ca12:	bf38      	it	cc
 800ca14:	461d      	movcc	r5, r3
 800ca16:	0553      	lsls	r3, r2, #21
 800ca18:	d527      	bpl.n	800ca6a <__ssputs_r+0x8e>
 800ca1a:	4629      	mov	r1, r5
 800ca1c:	f7fe fc1c 	bl	800b258 <_malloc_r>
 800ca20:	4606      	mov	r6, r0
 800ca22:	b360      	cbz	r0, 800ca7e <__ssputs_r+0xa2>
 800ca24:	6921      	ldr	r1, [r4, #16]
 800ca26:	464a      	mov	r2, r9
 800ca28:	f000 fa18 	bl	800ce5c <memcpy>
 800ca2c:	89a3      	ldrh	r3, [r4, #12]
 800ca2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ca32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca36:	81a3      	strh	r3, [r4, #12]
 800ca38:	6126      	str	r6, [r4, #16]
 800ca3a:	6165      	str	r5, [r4, #20]
 800ca3c:	444e      	add	r6, r9
 800ca3e:	eba5 0509 	sub.w	r5, r5, r9
 800ca42:	6026      	str	r6, [r4, #0]
 800ca44:	60a5      	str	r5, [r4, #8]
 800ca46:	463e      	mov	r6, r7
 800ca48:	42be      	cmp	r6, r7
 800ca4a:	d900      	bls.n	800ca4e <__ssputs_r+0x72>
 800ca4c:	463e      	mov	r6, r7
 800ca4e:	6820      	ldr	r0, [r4, #0]
 800ca50:	4632      	mov	r2, r6
 800ca52:	4641      	mov	r1, r8
 800ca54:	f000 f9c6 	bl	800cde4 <memmove>
 800ca58:	68a3      	ldr	r3, [r4, #8]
 800ca5a:	1b9b      	subs	r3, r3, r6
 800ca5c:	60a3      	str	r3, [r4, #8]
 800ca5e:	6823      	ldr	r3, [r4, #0]
 800ca60:	4433      	add	r3, r6
 800ca62:	6023      	str	r3, [r4, #0]
 800ca64:	2000      	movs	r0, #0
 800ca66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca6a:	462a      	mov	r2, r5
 800ca6c:	f000 fd89 	bl	800d582 <_realloc_r>
 800ca70:	4606      	mov	r6, r0
 800ca72:	2800      	cmp	r0, #0
 800ca74:	d1e0      	bne.n	800ca38 <__ssputs_r+0x5c>
 800ca76:	6921      	ldr	r1, [r4, #16]
 800ca78:	4650      	mov	r0, sl
 800ca7a:	f7fe fb79 	bl	800b170 <_free_r>
 800ca7e:	230c      	movs	r3, #12
 800ca80:	f8ca 3000 	str.w	r3, [sl]
 800ca84:	89a3      	ldrh	r3, [r4, #12]
 800ca86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca8a:	81a3      	strh	r3, [r4, #12]
 800ca8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca90:	e7e9      	b.n	800ca66 <__ssputs_r+0x8a>
	...

0800ca94 <_svfiprintf_r>:
 800ca94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca98:	4698      	mov	r8, r3
 800ca9a:	898b      	ldrh	r3, [r1, #12]
 800ca9c:	061b      	lsls	r3, r3, #24
 800ca9e:	b09d      	sub	sp, #116	@ 0x74
 800caa0:	4607      	mov	r7, r0
 800caa2:	460d      	mov	r5, r1
 800caa4:	4614      	mov	r4, r2
 800caa6:	d510      	bpl.n	800caca <_svfiprintf_r+0x36>
 800caa8:	690b      	ldr	r3, [r1, #16]
 800caaa:	b973      	cbnz	r3, 800caca <_svfiprintf_r+0x36>
 800caac:	2140      	movs	r1, #64	@ 0x40
 800caae:	f7fe fbd3 	bl	800b258 <_malloc_r>
 800cab2:	6028      	str	r0, [r5, #0]
 800cab4:	6128      	str	r0, [r5, #16]
 800cab6:	b930      	cbnz	r0, 800cac6 <_svfiprintf_r+0x32>
 800cab8:	230c      	movs	r3, #12
 800caba:	603b      	str	r3, [r7, #0]
 800cabc:	f04f 30ff 	mov.w	r0, #4294967295
 800cac0:	b01d      	add	sp, #116	@ 0x74
 800cac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac6:	2340      	movs	r3, #64	@ 0x40
 800cac8:	616b      	str	r3, [r5, #20]
 800caca:	2300      	movs	r3, #0
 800cacc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cace:	2320      	movs	r3, #32
 800cad0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cad4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cad8:	2330      	movs	r3, #48	@ 0x30
 800cada:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cc78 <_svfiprintf_r+0x1e4>
 800cade:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cae2:	f04f 0901 	mov.w	r9, #1
 800cae6:	4623      	mov	r3, r4
 800cae8:	469a      	mov	sl, r3
 800caea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caee:	b10a      	cbz	r2, 800caf4 <_svfiprintf_r+0x60>
 800caf0:	2a25      	cmp	r2, #37	@ 0x25
 800caf2:	d1f9      	bne.n	800cae8 <_svfiprintf_r+0x54>
 800caf4:	ebba 0b04 	subs.w	fp, sl, r4
 800caf8:	d00b      	beq.n	800cb12 <_svfiprintf_r+0x7e>
 800cafa:	465b      	mov	r3, fp
 800cafc:	4622      	mov	r2, r4
 800cafe:	4629      	mov	r1, r5
 800cb00:	4638      	mov	r0, r7
 800cb02:	f7ff ff6b 	bl	800c9dc <__ssputs_r>
 800cb06:	3001      	adds	r0, #1
 800cb08:	f000 80a7 	beq.w	800cc5a <_svfiprintf_r+0x1c6>
 800cb0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb0e:	445a      	add	r2, fp
 800cb10:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb12:	f89a 3000 	ldrb.w	r3, [sl]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f000 809f 	beq.w	800cc5a <_svfiprintf_r+0x1c6>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb26:	f10a 0a01 	add.w	sl, sl, #1
 800cb2a:	9304      	str	r3, [sp, #16]
 800cb2c:	9307      	str	r3, [sp, #28]
 800cb2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb32:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb34:	4654      	mov	r4, sl
 800cb36:	2205      	movs	r2, #5
 800cb38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb3c:	484e      	ldr	r0, [pc, #312]	@ (800cc78 <_svfiprintf_r+0x1e4>)
 800cb3e:	f7f3 fb6f 	bl	8000220 <memchr>
 800cb42:	9a04      	ldr	r2, [sp, #16]
 800cb44:	b9d8      	cbnz	r0, 800cb7e <_svfiprintf_r+0xea>
 800cb46:	06d0      	lsls	r0, r2, #27
 800cb48:	bf44      	itt	mi
 800cb4a:	2320      	movmi	r3, #32
 800cb4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb50:	0711      	lsls	r1, r2, #28
 800cb52:	bf44      	itt	mi
 800cb54:	232b      	movmi	r3, #43	@ 0x2b
 800cb56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb5a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb60:	d015      	beq.n	800cb8e <_svfiprintf_r+0xfa>
 800cb62:	9a07      	ldr	r2, [sp, #28]
 800cb64:	4654      	mov	r4, sl
 800cb66:	2000      	movs	r0, #0
 800cb68:	f04f 0c0a 	mov.w	ip, #10
 800cb6c:	4621      	mov	r1, r4
 800cb6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb72:	3b30      	subs	r3, #48	@ 0x30
 800cb74:	2b09      	cmp	r3, #9
 800cb76:	d94b      	bls.n	800cc10 <_svfiprintf_r+0x17c>
 800cb78:	b1b0      	cbz	r0, 800cba8 <_svfiprintf_r+0x114>
 800cb7a:	9207      	str	r2, [sp, #28]
 800cb7c:	e014      	b.n	800cba8 <_svfiprintf_r+0x114>
 800cb7e:	eba0 0308 	sub.w	r3, r0, r8
 800cb82:	fa09 f303 	lsl.w	r3, r9, r3
 800cb86:	4313      	orrs	r3, r2
 800cb88:	9304      	str	r3, [sp, #16]
 800cb8a:	46a2      	mov	sl, r4
 800cb8c:	e7d2      	b.n	800cb34 <_svfiprintf_r+0xa0>
 800cb8e:	9b03      	ldr	r3, [sp, #12]
 800cb90:	1d19      	adds	r1, r3, #4
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	9103      	str	r1, [sp, #12]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	bfbb      	ittet	lt
 800cb9a:	425b      	neglt	r3, r3
 800cb9c:	f042 0202 	orrlt.w	r2, r2, #2
 800cba0:	9307      	strge	r3, [sp, #28]
 800cba2:	9307      	strlt	r3, [sp, #28]
 800cba4:	bfb8      	it	lt
 800cba6:	9204      	strlt	r2, [sp, #16]
 800cba8:	7823      	ldrb	r3, [r4, #0]
 800cbaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800cbac:	d10a      	bne.n	800cbc4 <_svfiprintf_r+0x130>
 800cbae:	7863      	ldrb	r3, [r4, #1]
 800cbb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbb2:	d132      	bne.n	800cc1a <_svfiprintf_r+0x186>
 800cbb4:	9b03      	ldr	r3, [sp, #12]
 800cbb6:	1d1a      	adds	r2, r3, #4
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	9203      	str	r2, [sp, #12]
 800cbbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cbc0:	3402      	adds	r4, #2
 800cbc2:	9305      	str	r3, [sp, #20]
 800cbc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cc88 <_svfiprintf_r+0x1f4>
 800cbc8:	7821      	ldrb	r1, [r4, #0]
 800cbca:	2203      	movs	r2, #3
 800cbcc:	4650      	mov	r0, sl
 800cbce:	f7f3 fb27 	bl	8000220 <memchr>
 800cbd2:	b138      	cbz	r0, 800cbe4 <_svfiprintf_r+0x150>
 800cbd4:	9b04      	ldr	r3, [sp, #16]
 800cbd6:	eba0 000a 	sub.w	r0, r0, sl
 800cbda:	2240      	movs	r2, #64	@ 0x40
 800cbdc:	4082      	lsls	r2, r0
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	3401      	adds	r4, #1
 800cbe2:	9304      	str	r3, [sp, #16]
 800cbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbe8:	4824      	ldr	r0, [pc, #144]	@ (800cc7c <_svfiprintf_r+0x1e8>)
 800cbea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cbee:	2206      	movs	r2, #6
 800cbf0:	f7f3 fb16 	bl	8000220 <memchr>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	d036      	beq.n	800cc66 <_svfiprintf_r+0x1d2>
 800cbf8:	4b21      	ldr	r3, [pc, #132]	@ (800cc80 <_svfiprintf_r+0x1ec>)
 800cbfa:	bb1b      	cbnz	r3, 800cc44 <_svfiprintf_r+0x1b0>
 800cbfc:	9b03      	ldr	r3, [sp, #12]
 800cbfe:	3307      	adds	r3, #7
 800cc00:	f023 0307 	bic.w	r3, r3, #7
 800cc04:	3308      	adds	r3, #8
 800cc06:	9303      	str	r3, [sp, #12]
 800cc08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc0a:	4433      	add	r3, r6
 800cc0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc0e:	e76a      	b.n	800cae6 <_svfiprintf_r+0x52>
 800cc10:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc14:	460c      	mov	r4, r1
 800cc16:	2001      	movs	r0, #1
 800cc18:	e7a8      	b.n	800cb6c <_svfiprintf_r+0xd8>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	3401      	adds	r4, #1
 800cc1e:	9305      	str	r3, [sp, #20]
 800cc20:	4619      	mov	r1, r3
 800cc22:	f04f 0c0a 	mov.w	ip, #10
 800cc26:	4620      	mov	r0, r4
 800cc28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc2c:	3a30      	subs	r2, #48	@ 0x30
 800cc2e:	2a09      	cmp	r2, #9
 800cc30:	d903      	bls.n	800cc3a <_svfiprintf_r+0x1a6>
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d0c6      	beq.n	800cbc4 <_svfiprintf_r+0x130>
 800cc36:	9105      	str	r1, [sp, #20]
 800cc38:	e7c4      	b.n	800cbc4 <_svfiprintf_r+0x130>
 800cc3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc3e:	4604      	mov	r4, r0
 800cc40:	2301      	movs	r3, #1
 800cc42:	e7f0      	b.n	800cc26 <_svfiprintf_r+0x192>
 800cc44:	ab03      	add	r3, sp, #12
 800cc46:	9300      	str	r3, [sp, #0]
 800cc48:	462a      	mov	r2, r5
 800cc4a:	4b0e      	ldr	r3, [pc, #56]	@ (800cc84 <_svfiprintf_r+0x1f0>)
 800cc4c:	a904      	add	r1, sp, #16
 800cc4e:	4638      	mov	r0, r7
 800cc50:	f7fc fcca 	bl	80095e8 <_printf_float>
 800cc54:	1c42      	adds	r2, r0, #1
 800cc56:	4606      	mov	r6, r0
 800cc58:	d1d6      	bne.n	800cc08 <_svfiprintf_r+0x174>
 800cc5a:	89ab      	ldrh	r3, [r5, #12]
 800cc5c:	065b      	lsls	r3, r3, #25
 800cc5e:	f53f af2d 	bmi.w	800cabc <_svfiprintf_r+0x28>
 800cc62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc64:	e72c      	b.n	800cac0 <_svfiprintf_r+0x2c>
 800cc66:	ab03      	add	r3, sp, #12
 800cc68:	9300      	str	r3, [sp, #0]
 800cc6a:	462a      	mov	r2, r5
 800cc6c:	4b05      	ldr	r3, [pc, #20]	@ (800cc84 <_svfiprintf_r+0x1f0>)
 800cc6e:	a904      	add	r1, sp, #16
 800cc70:	4638      	mov	r0, r7
 800cc72:	f7fc ff51 	bl	8009b18 <_printf_i>
 800cc76:	e7ed      	b.n	800cc54 <_svfiprintf_r+0x1c0>
 800cc78:	0800e1b1 	.word	0x0800e1b1
 800cc7c:	0800e1bb 	.word	0x0800e1bb
 800cc80:	080095e9 	.word	0x080095e9
 800cc84:	0800c9dd 	.word	0x0800c9dd
 800cc88:	0800e1b7 	.word	0x0800e1b7

0800cc8c <__sflush_r>:
 800cc8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc94:	0716      	lsls	r6, r2, #28
 800cc96:	4605      	mov	r5, r0
 800cc98:	460c      	mov	r4, r1
 800cc9a:	d454      	bmi.n	800cd46 <__sflush_r+0xba>
 800cc9c:	684b      	ldr	r3, [r1, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	dc02      	bgt.n	800cca8 <__sflush_r+0x1c>
 800cca2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	dd48      	ble.n	800cd3a <__sflush_r+0xae>
 800cca8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ccaa:	2e00      	cmp	r6, #0
 800ccac:	d045      	beq.n	800cd3a <__sflush_r+0xae>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ccb4:	682f      	ldr	r7, [r5, #0]
 800ccb6:	6a21      	ldr	r1, [r4, #32]
 800ccb8:	602b      	str	r3, [r5, #0]
 800ccba:	d030      	beq.n	800cd1e <__sflush_r+0x92>
 800ccbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ccbe:	89a3      	ldrh	r3, [r4, #12]
 800ccc0:	0759      	lsls	r1, r3, #29
 800ccc2:	d505      	bpl.n	800ccd0 <__sflush_r+0x44>
 800ccc4:	6863      	ldr	r3, [r4, #4]
 800ccc6:	1ad2      	subs	r2, r2, r3
 800ccc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ccca:	b10b      	cbz	r3, 800ccd0 <__sflush_r+0x44>
 800cccc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ccce:	1ad2      	subs	r2, r2, r3
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ccd4:	6a21      	ldr	r1, [r4, #32]
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	47b0      	blx	r6
 800ccda:	1c43      	adds	r3, r0, #1
 800ccdc:	89a3      	ldrh	r3, [r4, #12]
 800ccde:	d106      	bne.n	800ccee <__sflush_r+0x62>
 800cce0:	6829      	ldr	r1, [r5, #0]
 800cce2:	291d      	cmp	r1, #29
 800cce4:	d82b      	bhi.n	800cd3e <__sflush_r+0xb2>
 800cce6:	4a2a      	ldr	r2, [pc, #168]	@ (800cd90 <__sflush_r+0x104>)
 800cce8:	410a      	asrs	r2, r1
 800ccea:	07d6      	lsls	r6, r2, #31
 800ccec:	d427      	bmi.n	800cd3e <__sflush_r+0xb2>
 800ccee:	2200      	movs	r2, #0
 800ccf0:	6062      	str	r2, [r4, #4]
 800ccf2:	04d9      	lsls	r1, r3, #19
 800ccf4:	6922      	ldr	r2, [r4, #16]
 800ccf6:	6022      	str	r2, [r4, #0]
 800ccf8:	d504      	bpl.n	800cd04 <__sflush_r+0x78>
 800ccfa:	1c42      	adds	r2, r0, #1
 800ccfc:	d101      	bne.n	800cd02 <__sflush_r+0x76>
 800ccfe:	682b      	ldr	r3, [r5, #0]
 800cd00:	b903      	cbnz	r3, 800cd04 <__sflush_r+0x78>
 800cd02:	6560      	str	r0, [r4, #84]	@ 0x54
 800cd04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd06:	602f      	str	r7, [r5, #0]
 800cd08:	b1b9      	cbz	r1, 800cd3a <__sflush_r+0xae>
 800cd0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd0e:	4299      	cmp	r1, r3
 800cd10:	d002      	beq.n	800cd18 <__sflush_r+0x8c>
 800cd12:	4628      	mov	r0, r5
 800cd14:	f7fe fa2c 	bl	800b170 <_free_r>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd1c:	e00d      	b.n	800cd3a <__sflush_r+0xae>
 800cd1e:	2301      	movs	r3, #1
 800cd20:	4628      	mov	r0, r5
 800cd22:	47b0      	blx	r6
 800cd24:	4602      	mov	r2, r0
 800cd26:	1c50      	adds	r0, r2, #1
 800cd28:	d1c9      	bne.n	800ccbe <__sflush_r+0x32>
 800cd2a:	682b      	ldr	r3, [r5, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d0c6      	beq.n	800ccbe <__sflush_r+0x32>
 800cd30:	2b1d      	cmp	r3, #29
 800cd32:	d001      	beq.n	800cd38 <__sflush_r+0xac>
 800cd34:	2b16      	cmp	r3, #22
 800cd36:	d11e      	bne.n	800cd76 <__sflush_r+0xea>
 800cd38:	602f      	str	r7, [r5, #0]
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	e022      	b.n	800cd84 <__sflush_r+0xf8>
 800cd3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd42:	b21b      	sxth	r3, r3
 800cd44:	e01b      	b.n	800cd7e <__sflush_r+0xf2>
 800cd46:	690f      	ldr	r7, [r1, #16]
 800cd48:	2f00      	cmp	r7, #0
 800cd4a:	d0f6      	beq.n	800cd3a <__sflush_r+0xae>
 800cd4c:	0793      	lsls	r3, r2, #30
 800cd4e:	680e      	ldr	r6, [r1, #0]
 800cd50:	bf08      	it	eq
 800cd52:	694b      	ldreq	r3, [r1, #20]
 800cd54:	600f      	str	r7, [r1, #0]
 800cd56:	bf18      	it	ne
 800cd58:	2300      	movne	r3, #0
 800cd5a:	eba6 0807 	sub.w	r8, r6, r7
 800cd5e:	608b      	str	r3, [r1, #8]
 800cd60:	f1b8 0f00 	cmp.w	r8, #0
 800cd64:	dde9      	ble.n	800cd3a <__sflush_r+0xae>
 800cd66:	6a21      	ldr	r1, [r4, #32]
 800cd68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cd6a:	4643      	mov	r3, r8
 800cd6c:	463a      	mov	r2, r7
 800cd6e:	4628      	mov	r0, r5
 800cd70:	47b0      	blx	r6
 800cd72:	2800      	cmp	r0, #0
 800cd74:	dc08      	bgt.n	800cd88 <__sflush_r+0xfc>
 800cd76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd7e:	81a3      	strh	r3, [r4, #12]
 800cd80:	f04f 30ff 	mov.w	r0, #4294967295
 800cd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd88:	4407      	add	r7, r0
 800cd8a:	eba8 0800 	sub.w	r8, r8, r0
 800cd8e:	e7e7      	b.n	800cd60 <__sflush_r+0xd4>
 800cd90:	dfbffffe 	.word	0xdfbffffe

0800cd94 <_fflush_r>:
 800cd94:	b538      	push	{r3, r4, r5, lr}
 800cd96:	690b      	ldr	r3, [r1, #16]
 800cd98:	4605      	mov	r5, r0
 800cd9a:	460c      	mov	r4, r1
 800cd9c:	b913      	cbnz	r3, 800cda4 <_fflush_r+0x10>
 800cd9e:	2500      	movs	r5, #0
 800cda0:	4628      	mov	r0, r5
 800cda2:	bd38      	pop	{r3, r4, r5, pc}
 800cda4:	b118      	cbz	r0, 800cdae <_fflush_r+0x1a>
 800cda6:	6a03      	ldr	r3, [r0, #32]
 800cda8:	b90b      	cbnz	r3, 800cdae <_fflush_r+0x1a>
 800cdaa:	f7fd fa75 	bl	800a298 <__sinit>
 800cdae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d0f3      	beq.n	800cd9e <_fflush_r+0xa>
 800cdb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cdb8:	07d0      	lsls	r0, r2, #31
 800cdba:	d404      	bmi.n	800cdc6 <_fflush_r+0x32>
 800cdbc:	0599      	lsls	r1, r3, #22
 800cdbe:	d402      	bmi.n	800cdc6 <_fflush_r+0x32>
 800cdc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cdc2:	f7fd fb80 	bl	800a4c6 <__retarget_lock_acquire_recursive>
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	4621      	mov	r1, r4
 800cdca:	f7ff ff5f 	bl	800cc8c <__sflush_r>
 800cdce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cdd0:	07da      	lsls	r2, r3, #31
 800cdd2:	4605      	mov	r5, r0
 800cdd4:	d4e4      	bmi.n	800cda0 <_fflush_r+0xc>
 800cdd6:	89a3      	ldrh	r3, [r4, #12]
 800cdd8:	059b      	lsls	r3, r3, #22
 800cdda:	d4e1      	bmi.n	800cda0 <_fflush_r+0xc>
 800cddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cdde:	f7fd fb73 	bl	800a4c8 <__retarget_lock_release_recursive>
 800cde2:	e7dd      	b.n	800cda0 <_fflush_r+0xc>

0800cde4 <memmove>:
 800cde4:	4288      	cmp	r0, r1
 800cde6:	b510      	push	{r4, lr}
 800cde8:	eb01 0402 	add.w	r4, r1, r2
 800cdec:	d902      	bls.n	800cdf4 <memmove+0x10>
 800cdee:	4284      	cmp	r4, r0
 800cdf0:	4623      	mov	r3, r4
 800cdf2:	d807      	bhi.n	800ce04 <memmove+0x20>
 800cdf4:	1e43      	subs	r3, r0, #1
 800cdf6:	42a1      	cmp	r1, r4
 800cdf8:	d008      	beq.n	800ce0c <memmove+0x28>
 800cdfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce02:	e7f8      	b.n	800cdf6 <memmove+0x12>
 800ce04:	4402      	add	r2, r0
 800ce06:	4601      	mov	r1, r0
 800ce08:	428a      	cmp	r2, r1
 800ce0a:	d100      	bne.n	800ce0e <memmove+0x2a>
 800ce0c:	bd10      	pop	{r4, pc}
 800ce0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce16:	e7f7      	b.n	800ce08 <memmove+0x24>

0800ce18 <strncmp>:
 800ce18:	b510      	push	{r4, lr}
 800ce1a:	b16a      	cbz	r2, 800ce38 <strncmp+0x20>
 800ce1c:	3901      	subs	r1, #1
 800ce1e:	1884      	adds	r4, r0, r2
 800ce20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d103      	bne.n	800ce34 <strncmp+0x1c>
 800ce2c:	42a0      	cmp	r0, r4
 800ce2e:	d001      	beq.n	800ce34 <strncmp+0x1c>
 800ce30:	2a00      	cmp	r2, #0
 800ce32:	d1f5      	bne.n	800ce20 <strncmp+0x8>
 800ce34:	1ad0      	subs	r0, r2, r3
 800ce36:	bd10      	pop	{r4, pc}
 800ce38:	4610      	mov	r0, r2
 800ce3a:	e7fc      	b.n	800ce36 <strncmp+0x1e>

0800ce3c <_sbrk_r>:
 800ce3c:	b538      	push	{r3, r4, r5, lr}
 800ce3e:	4d06      	ldr	r5, [pc, #24]	@ (800ce58 <_sbrk_r+0x1c>)
 800ce40:	2300      	movs	r3, #0
 800ce42:	4604      	mov	r4, r0
 800ce44:	4608      	mov	r0, r1
 800ce46:	602b      	str	r3, [r5, #0]
 800ce48:	f7f5 ff7c 	bl	8002d44 <_sbrk>
 800ce4c:	1c43      	adds	r3, r0, #1
 800ce4e:	d102      	bne.n	800ce56 <_sbrk_r+0x1a>
 800ce50:	682b      	ldr	r3, [r5, #0]
 800ce52:	b103      	cbz	r3, 800ce56 <_sbrk_r+0x1a>
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	bd38      	pop	{r3, r4, r5, pc}
 800ce58:	20002834 	.word	0x20002834

0800ce5c <memcpy>:
 800ce5c:	440a      	add	r2, r1
 800ce5e:	4291      	cmp	r1, r2
 800ce60:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce64:	d100      	bne.n	800ce68 <memcpy+0xc>
 800ce66:	4770      	bx	lr
 800ce68:	b510      	push	{r4, lr}
 800ce6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce72:	4291      	cmp	r1, r2
 800ce74:	d1f9      	bne.n	800ce6a <memcpy+0xe>
 800ce76:	bd10      	pop	{r4, pc}

0800ce78 <nan>:
 800ce78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ce80 <nan+0x8>
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop
 800ce80:	00000000 	.word	0x00000000
 800ce84:	7ff80000 	.word	0x7ff80000

0800ce88 <__assert_func>:
 800ce88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce8a:	4614      	mov	r4, r2
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	4b09      	ldr	r3, [pc, #36]	@ (800ceb4 <__assert_func+0x2c>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4605      	mov	r5, r0
 800ce94:	68d8      	ldr	r0, [r3, #12]
 800ce96:	b954      	cbnz	r4, 800ceae <__assert_func+0x26>
 800ce98:	4b07      	ldr	r3, [pc, #28]	@ (800ceb8 <__assert_func+0x30>)
 800ce9a:	461c      	mov	r4, r3
 800ce9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cea0:	9100      	str	r1, [sp, #0]
 800cea2:	462b      	mov	r3, r5
 800cea4:	4905      	ldr	r1, [pc, #20]	@ (800cebc <__assert_func+0x34>)
 800cea6:	f000 fba7 	bl	800d5f8 <fiprintf>
 800ceaa:	f000 fbb7 	bl	800d61c <abort>
 800ceae:	4b04      	ldr	r3, [pc, #16]	@ (800cec0 <__assert_func+0x38>)
 800ceb0:	e7f4      	b.n	800ce9c <__assert_func+0x14>
 800ceb2:	bf00      	nop
 800ceb4:	20000018 	.word	0x20000018
 800ceb8:	0800e205 	.word	0x0800e205
 800cebc:	0800e1d7 	.word	0x0800e1d7
 800cec0:	0800e1ca 	.word	0x0800e1ca

0800cec4 <_calloc_r>:
 800cec4:	b570      	push	{r4, r5, r6, lr}
 800cec6:	fba1 5402 	umull	r5, r4, r1, r2
 800ceca:	b93c      	cbnz	r4, 800cedc <_calloc_r+0x18>
 800cecc:	4629      	mov	r1, r5
 800cece:	f7fe f9c3 	bl	800b258 <_malloc_r>
 800ced2:	4606      	mov	r6, r0
 800ced4:	b928      	cbnz	r0, 800cee2 <_calloc_r+0x1e>
 800ced6:	2600      	movs	r6, #0
 800ced8:	4630      	mov	r0, r6
 800ceda:	bd70      	pop	{r4, r5, r6, pc}
 800cedc:	220c      	movs	r2, #12
 800cede:	6002      	str	r2, [r0, #0]
 800cee0:	e7f9      	b.n	800ced6 <_calloc_r+0x12>
 800cee2:	462a      	mov	r2, r5
 800cee4:	4621      	mov	r1, r4
 800cee6:	f7fd fa70 	bl	800a3ca <memset>
 800ceea:	e7f5      	b.n	800ced8 <_calloc_r+0x14>

0800ceec <rshift>:
 800ceec:	6903      	ldr	r3, [r0, #16]
 800ceee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cef2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cef6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cefa:	f100 0414 	add.w	r4, r0, #20
 800cefe:	dd45      	ble.n	800cf8c <rshift+0xa0>
 800cf00:	f011 011f 	ands.w	r1, r1, #31
 800cf04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cf08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cf0c:	d10c      	bne.n	800cf28 <rshift+0x3c>
 800cf0e:	f100 0710 	add.w	r7, r0, #16
 800cf12:	4629      	mov	r1, r5
 800cf14:	42b1      	cmp	r1, r6
 800cf16:	d334      	bcc.n	800cf82 <rshift+0x96>
 800cf18:	1a9b      	subs	r3, r3, r2
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	1eea      	subs	r2, r5, #3
 800cf1e:	4296      	cmp	r6, r2
 800cf20:	bf38      	it	cc
 800cf22:	2300      	movcc	r3, #0
 800cf24:	4423      	add	r3, r4
 800cf26:	e015      	b.n	800cf54 <rshift+0x68>
 800cf28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cf2c:	f1c1 0820 	rsb	r8, r1, #32
 800cf30:	40cf      	lsrs	r7, r1
 800cf32:	f105 0e04 	add.w	lr, r5, #4
 800cf36:	46a1      	mov	r9, r4
 800cf38:	4576      	cmp	r6, lr
 800cf3a:	46f4      	mov	ip, lr
 800cf3c:	d815      	bhi.n	800cf6a <rshift+0x7e>
 800cf3e:	1a9a      	subs	r2, r3, r2
 800cf40:	0092      	lsls	r2, r2, #2
 800cf42:	3a04      	subs	r2, #4
 800cf44:	3501      	adds	r5, #1
 800cf46:	42ae      	cmp	r6, r5
 800cf48:	bf38      	it	cc
 800cf4a:	2200      	movcc	r2, #0
 800cf4c:	18a3      	adds	r3, r4, r2
 800cf4e:	50a7      	str	r7, [r4, r2]
 800cf50:	b107      	cbz	r7, 800cf54 <rshift+0x68>
 800cf52:	3304      	adds	r3, #4
 800cf54:	1b1a      	subs	r2, r3, r4
 800cf56:	42a3      	cmp	r3, r4
 800cf58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cf5c:	bf08      	it	eq
 800cf5e:	2300      	moveq	r3, #0
 800cf60:	6102      	str	r2, [r0, #16]
 800cf62:	bf08      	it	eq
 800cf64:	6143      	streq	r3, [r0, #20]
 800cf66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf6a:	f8dc c000 	ldr.w	ip, [ip]
 800cf6e:	fa0c fc08 	lsl.w	ip, ip, r8
 800cf72:	ea4c 0707 	orr.w	r7, ip, r7
 800cf76:	f849 7b04 	str.w	r7, [r9], #4
 800cf7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf7e:	40cf      	lsrs	r7, r1
 800cf80:	e7da      	b.n	800cf38 <rshift+0x4c>
 800cf82:	f851 cb04 	ldr.w	ip, [r1], #4
 800cf86:	f847 cf04 	str.w	ip, [r7, #4]!
 800cf8a:	e7c3      	b.n	800cf14 <rshift+0x28>
 800cf8c:	4623      	mov	r3, r4
 800cf8e:	e7e1      	b.n	800cf54 <rshift+0x68>

0800cf90 <__hexdig_fun>:
 800cf90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cf94:	2b09      	cmp	r3, #9
 800cf96:	d802      	bhi.n	800cf9e <__hexdig_fun+0xe>
 800cf98:	3820      	subs	r0, #32
 800cf9a:	b2c0      	uxtb	r0, r0
 800cf9c:	4770      	bx	lr
 800cf9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cfa2:	2b05      	cmp	r3, #5
 800cfa4:	d801      	bhi.n	800cfaa <__hexdig_fun+0x1a>
 800cfa6:	3847      	subs	r0, #71	@ 0x47
 800cfa8:	e7f7      	b.n	800cf9a <__hexdig_fun+0xa>
 800cfaa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cfae:	2b05      	cmp	r3, #5
 800cfb0:	d801      	bhi.n	800cfb6 <__hexdig_fun+0x26>
 800cfb2:	3827      	subs	r0, #39	@ 0x27
 800cfb4:	e7f1      	b.n	800cf9a <__hexdig_fun+0xa>
 800cfb6:	2000      	movs	r0, #0
 800cfb8:	4770      	bx	lr
	...

0800cfbc <__gethex>:
 800cfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc0:	b085      	sub	sp, #20
 800cfc2:	468a      	mov	sl, r1
 800cfc4:	9302      	str	r3, [sp, #8]
 800cfc6:	680b      	ldr	r3, [r1, #0]
 800cfc8:	9001      	str	r0, [sp, #4]
 800cfca:	4690      	mov	r8, r2
 800cfcc:	1c9c      	adds	r4, r3, #2
 800cfce:	46a1      	mov	r9, r4
 800cfd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cfd4:	2830      	cmp	r0, #48	@ 0x30
 800cfd6:	d0fa      	beq.n	800cfce <__gethex+0x12>
 800cfd8:	eba9 0303 	sub.w	r3, r9, r3
 800cfdc:	f1a3 0b02 	sub.w	fp, r3, #2
 800cfe0:	f7ff ffd6 	bl	800cf90 <__hexdig_fun>
 800cfe4:	4605      	mov	r5, r0
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	d168      	bne.n	800d0bc <__gethex+0x100>
 800cfea:	49a0      	ldr	r1, [pc, #640]	@ (800d26c <__gethex+0x2b0>)
 800cfec:	2201      	movs	r2, #1
 800cfee:	4648      	mov	r0, r9
 800cff0:	f7ff ff12 	bl	800ce18 <strncmp>
 800cff4:	4607      	mov	r7, r0
 800cff6:	2800      	cmp	r0, #0
 800cff8:	d167      	bne.n	800d0ca <__gethex+0x10e>
 800cffa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cffe:	4626      	mov	r6, r4
 800d000:	f7ff ffc6 	bl	800cf90 <__hexdig_fun>
 800d004:	2800      	cmp	r0, #0
 800d006:	d062      	beq.n	800d0ce <__gethex+0x112>
 800d008:	4623      	mov	r3, r4
 800d00a:	7818      	ldrb	r0, [r3, #0]
 800d00c:	2830      	cmp	r0, #48	@ 0x30
 800d00e:	4699      	mov	r9, r3
 800d010:	f103 0301 	add.w	r3, r3, #1
 800d014:	d0f9      	beq.n	800d00a <__gethex+0x4e>
 800d016:	f7ff ffbb 	bl	800cf90 <__hexdig_fun>
 800d01a:	fab0 f580 	clz	r5, r0
 800d01e:	096d      	lsrs	r5, r5, #5
 800d020:	f04f 0b01 	mov.w	fp, #1
 800d024:	464a      	mov	r2, r9
 800d026:	4616      	mov	r6, r2
 800d028:	3201      	adds	r2, #1
 800d02a:	7830      	ldrb	r0, [r6, #0]
 800d02c:	f7ff ffb0 	bl	800cf90 <__hexdig_fun>
 800d030:	2800      	cmp	r0, #0
 800d032:	d1f8      	bne.n	800d026 <__gethex+0x6a>
 800d034:	498d      	ldr	r1, [pc, #564]	@ (800d26c <__gethex+0x2b0>)
 800d036:	2201      	movs	r2, #1
 800d038:	4630      	mov	r0, r6
 800d03a:	f7ff feed 	bl	800ce18 <strncmp>
 800d03e:	2800      	cmp	r0, #0
 800d040:	d13f      	bne.n	800d0c2 <__gethex+0x106>
 800d042:	b944      	cbnz	r4, 800d056 <__gethex+0x9a>
 800d044:	1c74      	adds	r4, r6, #1
 800d046:	4622      	mov	r2, r4
 800d048:	4616      	mov	r6, r2
 800d04a:	3201      	adds	r2, #1
 800d04c:	7830      	ldrb	r0, [r6, #0]
 800d04e:	f7ff ff9f 	bl	800cf90 <__hexdig_fun>
 800d052:	2800      	cmp	r0, #0
 800d054:	d1f8      	bne.n	800d048 <__gethex+0x8c>
 800d056:	1ba4      	subs	r4, r4, r6
 800d058:	00a7      	lsls	r7, r4, #2
 800d05a:	7833      	ldrb	r3, [r6, #0]
 800d05c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d060:	2b50      	cmp	r3, #80	@ 0x50
 800d062:	d13e      	bne.n	800d0e2 <__gethex+0x126>
 800d064:	7873      	ldrb	r3, [r6, #1]
 800d066:	2b2b      	cmp	r3, #43	@ 0x2b
 800d068:	d033      	beq.n	800d0d2 <__gethex+0x116>
 800d06a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d06c:	d034      	beq.n	800d0d8 <__gethex+0x11c>
 800d06e:	1c71      	adds	r1, r6, #1
 800d070:	2400      	movs	r4, #0
 800d072:	7808      	ldrb	r0, [r1, #0]
 800d074:	f7ff ff8c 	bl	800cf90 <__hexdig_fun>
 800d078:	1e43      	subs	r3, r0, #1
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	2b18      	cmp	r3, #24
 800d07e:	d830      	bhi.n	800d0e2 <__gethex+0x126>
 800d080:	f1a0 0210 	sub.w	r2, r0, #16
 800d084:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d088:	f7ff ff82 	bl	800cf90 <__hexdig_fun>
 800d08c:	f100 3cff 	add.w	ip, r0, #4294967295
 800d090:	fa5f fc8c 	uxtb.w	ip, ip
 800d094:	f1bc 0f18 	cmp.w	ip, #24
 800d098:	f04f 030a 	mov.w	r3, #10
 800d09c:	d91e      	bls.n	800d0dc <__gethex+0x120>
 800d09e:	b104      	cbz	r4, 800d0a2 <__gethex+0xe6>
 800d0a0:	4252      	negs	r2, r2
 800d0a2:	4417      	add	r7, r2
 800d0a4:	f8ca 1000 	str.w	r1, [sl]
 800d0a8:	b1ed      	cbz	r5, 800d0e6 <__gethex+0x12a>
 800d0aa:	f1bb 0f00 	cmp.w	fp, #0
 800d0ae:	bf0c      	ite	eq
 800d0b0:	2506      	moveq	r5, #6
 800d0b2:	2500      	movne	r5, #0
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	b005      	add	sp, #20
 800d0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0bc:	2500      	movs	r5, #0
 800d0be:	462c      	mov	r4, r5
 800d0c0:	e7b0      	b.n	800d024 <__gethex+0x68>
 800d0c2:	2c00      	cmp	r4, #0
 800d0c4:	d1c7      	bne.n	800d056 <__gethex+0x9a>
 800d0c6:	4627      	mov	r7, r4
 800d0c8:	e7c7      	b.n	800d05a <__gethex+0x9e>
 800d0ca:	464e      	mov	r6, r9
 800d0cc:	462f      	mov	r7, r5
 800d0ce:	2501      	movs	r5, #1
 800d0d0:	e7c3      	b.n	800d05a <__gethex+0x9e>
 800d0d2:	2400      	movs	r4, #0
 800d0d4:	1cb1      	adds	r1, r6, #2
 800d0d6:	e7cc      	b.n	800d072 <__gethex+0xb6>
 800d0d8:	2401      	movs	r4, #1
 800d0da:	e7fb      	b.n	800d0d4 <__gethex+0x118>
 800d0dc:	fb03 0002 	mla	r0, r3, r2, r0
 800d0e0:	e7ce      	b.n	800d080 <__gethex+0xc4>
 800d0e2:	4631      	mov	r1, r6
 800d0e4:	e7de      	b.n	800d0a4 <__gethex+0xe8>
 800d0e6:	eba6 0309 	sub.w	r3, r6, r9
 800d0ea:	3b01      	subs	r3, #1
 800d0ec:	4629      	mov	r1, r5
 800d0ee:	2b07      	cmp	r3, #7
 800d0f0:	dc0a      	bgt.n	800d108 <__gethex+0x14c>
 800d0f2:	9801      	ldr	r0, [sp, #4]
 800d0f4:	f7fe f93c 	bl	800b370 <_Balloc>
 800d0f8:	4604      	mov	r4, r0
 800d0fa:	b940      	cbnz	r0, 800d10e <__gethex+0x152>
 800d0fc:	4b5c      	ldr	r3, [pc, #368]	@ (800d270 <__gethex+0x2b4>)
 800d0fe:	4602      	mov	r2, r0
 800d100:	21e4      	movs	r1, #228	@ 0xe4
 800d102:	485c      	ldr	r0, [pc, #368]	@ (800d274 <__gethex+0x2b8>)
 800d104:	f7ff fec0 	bl	800ce88 <__assert_func>
 800d108:	3101      	adds	r1, #1
 800d10a:	105b      	asrs	r3, r3, #1
 800d10c:	e7ef      	b.n	800d0ee <__gethex+0x132>
 800d10e:	f100 0a14 	add.w	sl, r0, #20
 800d112:	2300      	movs	r3, #0
 800d114:	4655      	mov	r5, sl
 800d116:	469b      	mov	fp, r3
 800d118:	45b1      	cmp	r9, r6
 800d11a:	d337      	bcc.n	800d18c <__gethex+0x1d0>
 800d11c:	f845 bb04 	str.w	fp, [r5], #4
 800d120:	eba5 050a 	sub.w	r5, r5, sl
 800d124:	10ad      	asrs	r5, r5, #2
 800d126:	6125      	str	r5, [r4, #16]
 800d128:	4658      	mov	r0, fp
 800d12a:	f7fe fa13 	bl	800b554 <__hi0bits>
 800d12e:	016d      	lsls	r5, r5, #5
 800d130:	f8d8 6000 	ldr.w	r6, [r8]
 800d134:	1a2d      	subs	r5, r5, r0
 800d136:	42b5      	cmp	r5, r6
 800d138:	dd54      	ble.n	800d1e4 <__gethex+0x228>
 800d13a:	1bad      	subs	r5, r5, r6
 800d13c:	4629      	mov	r1, r5
 800d13e:	4620      	mov	r0, r4
 800d140:	f7fe fda7 	bl	800bc92 <__any_on>
 800d144:	4681      	mov	r9, r0
 800d146:	b178      	cbz	r0, 800d168 <__gethex+0x1ac>
 800d148:	1e6b      	subs	r3, r5, #1
 800d14a:	1159      	asrs	r1, r3, #5
 800d14c:	f003 021f 	and.w	r2, r3, #31
 800d150:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d154:	f04f 0901 	mov.w	r9, #1
 800d158:	fa09 f202 	lsl.w	r2, r9, r2
 800d15c:	420a      	tst	r2, r1
 800d15e:	d003      	beq.n	800d168 <__gethex+0x1ac>
 800d160:	454b      	cmp	r3, r9
 800d162:	dc36      	bgt.n	800d1d2 <__gethex+0x216>
 800d164:	f04f 0902 	mov.w	r9, #2
 800d168:	4629      	mov	r1, r5
 800d16a:	4620      	mov	r0, r4
 800d16c:	f7ff febe 	bl	800ceec <rshift>
 800d170:	442f      	add	r7, r5
 800d172:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d176:	42bb      	cmp	r3, r7
 800d178:	da42      	bge.n	800d200 <__gethex+0x244>
 800d17a:	9801      	ldr	r0, [sp, #4]
 800d17c:	4621      	mov	r1, r4
 800d17e:	f7fe f937 	bl	800b3f0 <_Bfree>
 800d182:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d184:	2300      	movs	r3, #0
 800d186:	6013      	str	r3, [r2, #0]
 800d188:	25a3      	movs	r5, #163	@ 0xa3
 800d18a:	e793      	b.n	800d0b4 <__gethex+0xf8>
 800d18c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d190:	2a2e      	cmp	r2, #46	@ 0x2e
 800d192:	d012      	beq.n	800d1ba <__gethex+0x1fe>
 800d194:	2b20      	cmp	r3, #32
 800d196:	d104      	bne.n	800d1a2 <__gethex+0x1e6>
 800d198:	f845 bb04 	str.w	fp, [r5], #4
 800d19c:	f04f 0b00 	mov.w	fp, #0
 800d1a0:	465b      	mov	r3, fp
 800d1a2:	7830      	ldrb	r0, [r6, #0]
 800d1a4:	9303      	str	r3, [sp, #12]
 800d1a6:	f7ff fef3 	bl	800cf90 <__hexdig_fun>
 800d1aa:	9b03      	ldr	r3, [sp, #12]
 800d1ac:	f000 000f 	and.w	r0, r0, #15
 800d1b0:	4098      	lsls	r0, r3
 800d1b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800d1b6:	3304      	adds	r3, #4
 800d1b8:	e7ae      	b.n	800d118 <__gethex+0x15c>
 800d1ba:	45b1      	cmp	r9, r6
 800d1bc:	d8ea      	bhi.n	800d194 <__gethex+0x1d8>
 800d1be:	492b      	ldr	r1, [pc, #172]	@ (800d26c <__gethex+0x2b0>)
 800d1c0:	9303      	str	r3, [sp, #12]
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	4630      	mov	r0, r6
 800d1c6:	f7ff fe27 	bl	800ce18 <strncmp>
 800d1ca:	9b03      	ldr	r3, [sp, #12]
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	d1e1      	bne.n	800d194 <__gethex+0x1d8>
 800d1d0:	e7a2      	b.n	800d118 <__gethex+0x15c>
 800d1d2:	1ea9      	subs	r1, r5, #2
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f7fe fd5c 	bl	800bc92 <__any_on>
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	d0c2      	beq.n	800d164 <__gethex+0x1a8>
 800d1de:	f04f 0903 	mov.w	r9, #3
 800d1e2:	e7c1      	b.n	800d168 <__gethex+0x1ac>
 800d1e4:	da09      	bge.n	800d1fa <__gethex+0x23e>
 800d1e6:	1b75      	subs	r5, r6, r5
 800d1e8:	4621      	mov	r1, r4
 800d1ea:	9801      	ldr	r0, [sp, #4]
 800d1ec:	462a      	mov	r2, r5
 800d1ee:	f7fe fb17 	bl	800b820 <__lshift>
 800d1f2:	1b7f      	subs	r7, r7, r5
 800d1f4:	4604      	mov	r4, r0
 800d1f6:	f100 0a14 	add.w	sl, r0, #20
 800d1fa:	f04f 0900 	mov.w	r9, #0
 800d1fe:	e7b8      	b.n	800d172 <__gethex+0x1b6>
 800d200:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d204:	42bd      	cmp	r5, r7
 800d206:	dd6f      	ble.n	800d2e8 <__gethex+0x32c>
 800d208:	1bed      	subs	r5, r5, r7
 800d20a:	42ae      	cmp	r6, r5
 800d20c:	dc34      	bgt.n	800d278 <__gethex+0x2bc>
 800d20e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d212:	2b02      	cmp	r3, #2
 800d214:	d022      	beq.n	800d25c <__gethex+0x2a0>
 800d216:	2b03      	cmp	r3, #3
 800d218:	d024      	beq.n	800d264 <__gethex+0x2a8>
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d115      	bne.n	800d24a <__gethex+0x28e>
 800d21e:	42ae      	cmp	r6, r5
 800d220:	d113      	bne.n	800d24a <__gethex+0x28e>
 800d222:	2e01      	cmp	r6, #1
 800d224:	d10b      	bne.n	800d23e <__gethex+0x282>
 800d226:	9a02      	ldr	r2, [sp, #8]
 800d228:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d22c:	6013      	str	r3, [r2, #0]
 800d22e:	2301      	movs	r3, #1
 800d230:	6123      	str	r3, [r4, #16]
 800d232:	f8ca 3000 	str.w	r3, [sl]
 800d236:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d238:	2562      	movs	r5, #98	@ 0x62
 800d23a:	601c      	str	r4, [r3, #0]
 800d23c:	e73a      	b.n	800d0b4 <__gethex+0xf8>
 800d23e:	1e71      	subs	r1, r6, #1
 800d240:	4620      	mov	r0, r4
 800d242:	f7fe fd26 	bl	800bc92 <__any_on>
 800d246:	2800      	cmp	r0, #0
 800d248:	d1ed      	bne.n	800d226 <__gethex+0x26a>
 800d24a:	9801      	ldr	r0, [sp, #4]
 800d24c:	4621      	mov	r1, r4
 800d24e:	f7fe f8cf 	bl	800b3f0 <_Bfree>
 800d252:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d254:	2300      	movs	r3, #0
 800d256:	6013      	str	r3, [r2, #0]
 800d258:	2550      	movs	r5, #80	@ 0x50
 800d25a:	e72b      	b.n	800d0b4 <__gethex+0xf8>
 800d25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d1f3      	bne.n	800d24a <__gethex+0x28e>
 800d262:	e7e0      	b.n	800d226 <__gethex+0x26a>
 800d264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1dd      	bne.n	800d226 <__gethex+0x26a>
 800d26a:	e7ee      	b.n	800d24a <__gethex+0x28e>
 800d26c:	0800e058 	.word	0x0800e058
 800d270:	0800deed 	.word	0x0800deed
 800d274:	0800e206 	.word	0x0800e206
 800d278:	1e6f      	subs	r7, r5, #1
 800d27a:	f1b9 0f00 	cmp.w	r9, #0
 800d27e:	d130      	bne.n	800d2e2 <__gethex+0x326>
 800d280:	b127      	cbz	r7, 800d28c <__gethex+0x2d0>
 800d282:	4639      	mov	r1, r7
 800d284:	4620      	mov	r0, r4
 800d286:	f7fe fd04 	bl	800bc92 <__any_on>
 800d28a:	4681      	mov	r9, r0
 800d28c:	117a      	asrs	r2, r7, #5
 800d28e:	2301      	movs	r3, #1
 800d290:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d294:	f007 071f 	and.w	r7, r7, #31
 800d298:	40bb      	lsls	r3, r7
 800d29a:	4213      	tst	r3, r2
 800d29c:	4629      	mov	r1, r5
 800d29e:	4620      	mov	r0, r4
 800d2a0:	bf18      	it	ne
 800d2a2:	f049 0902 	orrne.w	r9, r9, #2
 800d2a6:	f7ff fe21 	bl	800ceec <rshift>
 800d2aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d2ae:	1b76      	subs	r6, r6, r5
 800d2b0:	2502      	movs	r5, #2
 800d2b2:	f1b9 0f00 	cmp.w	r9, #0
 800d2b6:	d047      	beq.n	800d348 <__gethex+0x38c>
 800d2b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d015      	beq.n	800d2ec <__gethex+0x330>
 800d2c0:	2b03      	cmp	r3, #3
 800d2c2:	d017      	beq.n	800d2f4 <__gethex+0x338>
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	d109      	bne.n	800d2dc <__gethex+0x320>
 800d2c8:	f019 0f02 	tst.w	r9, #2
 800d2cc:	d006      	beq.n	800d2dc <__gethex+0x320>
 800d2ce:	f8da 3000 	ldr.w	r3, [sl]
 800d2d2:	ea49 0903 	orr.w	r9, r9, r3
 800d2d6:	f019 0f01 	tst.w	r9, #1
 800d2da:	d10e      	bne.n	800d2fa <__gethex+0x33e>
 800d2dc:	f045 0510 	orr.w	r5, r5, #16
 800d2e0:	e032      	b.n	800d348 <__gethex+0x38c>
 800d2e2:	f04f 0901 	mov.w	r9, #1
 800d2e6:	e7d1      	b.n	800d28c <__gethex+0x2d0>
 800d2e8:	2501      	movs	r5, #1
 800d2ea:	e7e2      	b.n	800d2b2 <__gethex+0x2f6>
 800d2ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2ee:	f1c3 0301 	rsb	r3, r3, #1
 800d2f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d2f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d0f0      	beq.n	800d2dc <__gethex+0x320>
 800d2fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d2fe:	f104 0314 	add.w	r3, r4, #20
 800d302:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d306:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d30a:	f04f 0c00 	mov.w	ip, #0
 800d30e:	4618      	mov	r0, r3
 800d310:	f853 2b04 	ldr.w	r2, [r3], #4
 800d314:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d318:	d01b      	beq.n	800d352 <__gethex+0x396>
 800d31a:	3201      	adds	r2, #1
 800d31c:	6002      	str	r2, [r0, #0]
 800d31e:	2d02      	cmp	r5, #2
 800d320:	f104 0314 	add.w	r3, r4, #20
 800d324:	d13c      	bne.n	800d3a0 <__gethex+0x3e4>
 800d326:	f8d8 2000 	ldr.w	r2, [r8]
 800d32a:	3a01      	subs	r2, #1
 800d32c:	42b2      	cmp	r2, r6
 800d32e:	d109      	bne.n	800d344 <__gethex+0x388>
 800d330:	1171      	asrs	r1, r6, #5
 800d332:	2201      	movs	r2, #1
 800d334:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d338:	f006 061f 	and.w	r6, r6, #31
 800d33c:	fa02 f606 	lsl.w	r6, r2, r6
 800d340:	421e      	tst	r6, r3
 800d342:	d13a      	bne.n	800d3ba <__gethex+0x3fe>
 800d344:	f045 0520 	orr.w	r5, r5, #32
 800d348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d34a:	601c      	str	r4, [r3, #0]
 800d34c:	9b02      	ldr	r3, [sp, #8]
 800d34e:	601f      	str	r7, [r3, #0]
 800d350:	e6b0      	b.n	800d0b4 <__gethex+0xf8>
 800d352:	4299      	cmp	r1, r3
 800d354:	f843 cc04 	str.w	ip, [r3, #-4]
 800d358:	d8d9      	bhi.n	800d30e <__gethex+0x352>
 800d35a:	68a3      	ldr	r3, [r4, #8]
 800d35c:	459b      	cmp	fp, r3
 800d35e:	db17      	blt.n	800d390 <__gethex+0x3d4>
 800d360:	6861      	ldr	r1, [r4, #4]
 800d362:	9801      	ldr	r0, [sp, #4]
 800d364:	3101      	adds	r1, #1
 800d366:	f7fe f803 	bl	800b370 <_Balloc>
 800d36a:	4681      	mov	r9, r0
 800d36c:	b918      	cbnz	r0, 800d376 <__gethex+0x3ba>
 800d36e:	4b1a      	ldr	r3, [pc, #104]	@ (800d3d8 <__gethex+0x41c>)
 800d370:	4602      	mov	r2, r0
 800d372:	2184      	movs	r1, #132	@ 0x84
 800d374:	e6c5      	b.n	800d102 <__gethex+0x146>
 800d376:	6922      	ldr	r2, [r4, #16]
 800d378:	3202      	adds	r2, #2
 800d37a:	f104 010c 	add.w	r1, r4, #12
 800d37e:	0092      	lsls	r2, r2, #2
 800d380:	300c      	adds	r0, #12
 800d382:	f7ff fd6b 	bl	800ce5c <memcpy>
 800d386:	4621      	mov	r1, r4
 800d388:	9801      	ldr	r0, [sp, #4]
 800d38a:	f7fe f831 	bl	800b3f0 <_Bfree>
 800d38e:	464c      	mov	r4, r9
 800d390:	6923      	ldr	r3, [r4, #16]
 800d392:	1c5a      	adds	r2, r3, #1
 800d394:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d398:	6122      	str	r2, [r4, #16]
 800d39a:	2201      	movs	r2, #1
 800d39c:	615a      	str	r2, [r3, #20]
 800d39e:	e7be      	b.n	800d31e <__gethex+0x362>
 800d3a0:	6922      	ldr	r2, [r4, #16]
 800d3a2:	455a      	cmp	r2, fp
 800d3a4:	dd0b      	ble.n	800d3be <__gethex+0x402>
 800d3a6:	2101      	movs	r1, #1
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	f7ff fd9f 	bl	800ceec <rshift>
 800d3ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d3b2:	3701      	adds	r7, #1
 800d3b4:	42bb      	cmp	r3, r7
 800d3b6:	f6ff aee0 	blt.w	800d17a <__gethex+0x1be>
 800d3ba:	2501      	movs	r5, #1
 800d3bc:	e7c2      	b.n	800d344 <__gethex+0x388>
 800d3be:	f016 061f 	ands.w	r6, r6, #31
 800d3c2:	d0fa      	beq.n	800d3ba <__gethex+0x3fe>
 800d3c4:	4453      	add	r3, sl
 800d3c6:	f1c6 0620 	rsb	r6, r6, #32
 800d3ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d3ce:	f7fe f8c1 	bl	800b554 <__hi0bits>
 800d3d2:	42b0      	cmp	r0, r6
 800d3d4:	dbe7      	blt.n	800d3a6 <__gethex+0x3ea>
 800d3d6:	e7f0      	b.n	800d3ba <__gethex+0x3fe>
 800d3d8:	0800deed 	.word	0x0800deed

0800d3dc <L_shift>:
 800d3dc:	f1c2 0208 	rsb	r2, r2, #8
 800d3e0:	0092      	lsls	r2, r2, #2
 800d3e2:	b570      	push	{r4, r5, r6, lr}
 800d3e4:	f1c2 0620 	rsb	r6, r2, #32
 800d3e8:	6843      	ldr	r3, [r0, #4]
 800d3ea:	6804      	ldr	r4, [r0, #0]
 800d3ec:	fa03 f506 	lsl.w	r5, r3, r6
 800d3f0:	432c      	orrs	r4, r5
 800d3f2:	40d3      	lsrs	r3, r2
 800d3f4:	6004      	str	r4, [r0, #0]
 800d3f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d3fa:	4288      	cmp	r0, r1
 800d3fc:	d3f4      	bcc.n	800d3e8 <L_shift+0xc>
 800d3fe:	bd70      	pop	{r4, r5, r6, pc}

0800d400 <__match>:
 800d400:	b530      	push	{r4, r5, lr}
 800d402:	6803      	ldr	r3, [r0, #0]
 800d404:	3301      	adds	r3, #1
 800d406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d40a:	b914      	cbnz	r4, 800d412 <__match+0x12>
 800d40c:	6003      	str	r3, [r0, #0]
 800d40e:	2001      	movs	r0, #1
 800d410:	bd30      	pop	{r4, r5, pc}
 800d412:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d416:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d41a:	2d19      	cmp	r5, #25
 800d41c:	bf98      	it	ls
 800d41e:	3220      	addls	r2, #32
 800d420:	42a2      	cmp	r2, r4
 800d422:	d0f0      	beq.n	800d406 <__match+0x6>
 800d424:	2000      	movs	r0, #0
 800d426:	e7f3      	b.n	800d410 <__match+0x10>

0800d428 <__hexnan>:
 800d428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d42c:	680b      	ldr	r3, [r1, #0]
 800d42e:	6801      	ldr	r1, [r0, #0]
 800d430:	115e      	asrs	r6, r3, #5
 800d432:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d436:	f013 031f 	ands.w	r3, r3, #31
 800d43a:	b087      	sub	sp, #28
 800d43c:	bf18      	it	ne
 800d43e:	3604      	addne	r6, #4
 800d440:	2500      	movs	r5, #0
 800d442:	1f37      	subs	r7, r6, #4
 800d444:	4682      	mov	sl, r0
 800d446:	4690      	mov	r8, r2
 800d448:	9301      	str	r3, [sp, #4]
 800d44a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d44e:	46b9      	mov	r9, r7
 800d450:	463c      	mov	r4, r7
 800d452:	9502      	str	r5, [sp, #8]
 800d454:	46ab      	mov	fp, r5
 800d456:	784a      	ldrb	r2, [r1, #1]
 800d458:	1c4b      	adds	r3, r1, #1
 800d45a:	9303      	str	r3, [sp, #12]
 800d45c:	b342      	cbz	r2, 800d4b0 <__hexnan+0x88>
 800d45e:	4610      	mov	r0, r2
 800d460:	9105      	str	r1, [sp, #20]
 800d462:	9204      	str	r2, [sp, #16]
 800d464:	f7ff fd94 	bl	800cf90 <__hexdig_fun>
 800d468:	2800      	cmp	r0, #0
 800d46a:	d151      	bne.n	800d510 <__hexnan+0xe8>
 800d46c:	9a04      	ldr	r2, [sp, #16]
 800d46e:	9905      	ldr	r1, [sp, #20]
 800d470:	2a20      	cmp	r2, #32
 800d472:	d818      	bhi.n	800d4a6 <__hexnan+0x7e>
 800d474:	9b02      	ldr	r3, [sp, #8]
 800d476:	459b      	cmp	fp, r3
 800d478:	dd13      	ble.n	800d4a2 <__hexnan+0x7a>
 800d47a:	454c      	cmp	r4, r9
 800d47c:	d206      	bcs.n	800d48c <__hexnan+0x64>
 800d47e:	2d07      	cmp	r5, #7
 800d480:	dc04      	bgt.n	800d48c <__hexnan+0x64>
 800d482:	462a      	mov	r2, r5
 800d484:	4649      	mov	r1, r9
 800d486:	4620      	mov	r0, r4
 800d488:	f7ff ffa8 	bl	800d3dc <L_shift>
 800d48c:	4544      	cmp	r4, r8
 800d48e:	d952      	bls.n	800d536 <__hexnan+0x10e>
 800d490:	2300      	movs	r3, #0
 800d492:	f1a4 0904 	sub.w	r9, r4, #4
 800d496:	f844 3c04 	str.w	r3, [r4, #-4]
 800d49a:	f8cd b008 	str.w	fp, [sp, #8]
 800d49e:	464c      	mov	r4, r9
 800d4a0:	461d      	mov	r5, r3
 800d4a2:	9903      	ldr	r1, [sp, #12]
 800d4a4:	e7d7      	b.n	800d456 <__hexnan+0x2e>
 800d4a6:	2a29      	cmp	r2, #41	@ 0x29
 800d4a8:	d157      	bne.n	800d55a <__hexnan+0x132>
 800d4aa:	3102      	adds	r1, #2
 800d4ac:	f8ca 1000 	str.w	r1, [sl]
 800d4b0:	f1bb 0f00 	cmp.w	fp, #0
 800d4b4:	d051      	beq.n	800d55a <__hexnan+0x132>
 800d4b6:	454c      	cmp	r4, r9
 800d4b8:	d206      	bcs.n	800d4c8 <__hexnan+0xa0>
 800d4ba:	2d07      	cmp	r5, #7
 800d4bc:	dc04      	bgt.n	800d4c8 <__hexnan+0xa0>
 800d4be:	462a      	mov	r2, r5
 800d4c0:	4649      	mov	r1, r9
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	f7ff ff8a 	bl	800d3dc <L_shift>
 800d4c8:	4544      	cmp	r4, r8
 800d4ca:	d936      	bls.n	800d53a <__hexnan+0x112>
 800d4cc:	f1a8 0204 	sub.w	r2, r8, #4
 800d4d0:	4623      	mov	r3, r4
 800d4d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800d4d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800d4da:	429f      	cmp	r7, r3
 800d4dc:	d2f9      	bcs.n	800d4d2 <__hexnan+0xaa>
 800d4de:	1b3b      	subs	r3, r7, r4
 800d4e0:	f023 0303 	bic.w	r3, r3, #3
 800d4e4:	3304      	adds	r3, #4
 800d4e6:	3401      	adds	r4, #1
 800d4e8:	3e03      	subs	r6, #3
 800d4ea:	42b4      	cmp	r4, r6
 800d4ec:	bf88      	it	hi
 800d4ee:	2304      	movhi	r3, #4
 800d4f0:	4443      	add	r3, r8
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f843 2b04 	str.w	r2, [r3], #4
 800d4f8:	429f      	cmp	r7, r3
 800d4fa:	d2fb      	bcs.n	800d4f4 <__hexnan+0xcc>
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	b91b      	cbnz	r3, 800d508 <__hexnan+0xe0>
 800d500:	4547      	cmp	r7, r8
 800d502:	d128      	bne.n	800d556 <__hexnan+0x12e>
 800d504:	2301      	movs	r3, #1
 800d506:	603b      	str	r3, [r7, #0]
 800d508:	2005      	movs	r0, #5
 800d50a:	b007      	add	sp, #28
 800d50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d510:	3501      	adds	r5, #1
 800d512:	2d08      	cmp	r5, #8
 800d514:	f10b 0b01 	add.w	fp, fp, #1
 800d518:	dd06      	ble.n	800d528 <__hexnan+0x100>
 800d51a:	4544      	cmp	r4, r8
 800d51c:	d9c1      	bls.n	800d4a2 <__hexnan+0x7a>
 800d51e:	2300      	movs	r3, #0
 800d520:	f844 3c04 	str.w	r3, [r4, #-4]
 800d524:	2501      	movs	r5, #1
 800d526:	3c04      	subs	r4, #4
 800d528:	6822      	ldr	r2, [r4, #0]
 800d52a:	f000 000f 	and.w	r0, r0, #15
 800d52e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d532:	6020      	str	r0, [r4, #0]
 800d534:	e7b5      	b.n	800d4a2 <__hexnan+0x7a>
 800d536:	2508      	movs	r5, #8
 800d538:	e7b3      	b.n	800d4a2 <__hexnan+0x7a>
 800d53a:	9b01      	ldr	r3, [sp, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d0dd      	beq.n	800d4fc <__hexnan+0xd4>
 800d540:	f1c3 0320 	rsb	r3, r3, #32
 800d544:	f04f 32ff 	mov.w	r2, #4294967295
 800d548:	40da      	lsrs	r2, r3
 800d54a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d54e:	4013      	ands	r3, r2
 800d550:	f846 3c04 	str.w	r3, [r6, #-4]
 800d554:	e7d2      	b.n	800d4fc <__hexnan+0xd4>
 800d556:	3f04      	subs	r7, #4
 800d558:	e7d0      	b.n	800d4fc <__hexnan+0xd4>
 800d55a:	2004      	movs	r0, #4
 800d55c:	e7d5      	b.n	800d50a <__hexnan+0xe2>

0800d55e <__ascii_mbtowc>:
 800d55e:	b082      	sub	sp, #8
 800d560:	b901      	cbnz	r1, 800d564 <__ascii_mbtowc+0x6>
 800d562:	a901      	add	r1, sp, #4
 800d564:	b142      	cbz	r2, 800d578 <__ascii_mbtowc+0x1a>
 800d566:	b14b      	cbz	r3, 800d57c <__ascii_mbtowc+0x1e>
 800d568:	7813      	ldrb	r3, [r2, #0]
 800d56a:	600b      	str	r3, [r1, #0]
 800d56c:	7812      	ldrb	r2, [r2, #0]
 800d56e:	1e10      	subs	r0, r2, #0
 800d570:	bf18      	it	ne
 800d572:	2001      	movne	r0, #1
 800d574:	b002      	add	sp, #8
 800d576:	4770      	bx	lr
 800d578:	4610      	mov	r0, r2
 800d57a:	e7fb      	b.n	800d574 <__ascii_mbtowc+0x16>
 800d57c:	f06f 0001 	mvn.w	r0, #1
 800d580:	e7f8      	b.n	800d574 <__ascii_mbtowc+0x16>

0800d582 <_realloc_r>:
 800d582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d586:	4680      	mov	r8, r0
 800d588:	4615      	mov	r5, r2
 800d58a:	460c      	mov	r4, r1
 800d58c:	b921      	cbnz	r1, 800d598 <_realloc_r+0x16>
 800d58e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d592:	4611      	mov	r1, r2
 800d594:	f7fd be60 	b.w	800b258 <_malloc_r>
 800d598:	b92a      	cbnz	r2, 800d5a6 <_realloc_r+0x24>
 800d59a:	f7fd fde9 	bl	800b170 <_free_r>
 800d59e:	2400      	movs	r4, #0
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5a6:	f000 f840 	bl	800d62a <_malloc_usable_size_r>
 800d5aa:	4285      	cmp	r5, r0
 800d5ac:	4606      	mov	r6, r0
 800d5ae:	d802      	bhi.n	800d5b6 <_realloc_r+0x34>
 800d5b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d5b4:	d8f4      	bhi.n	800d5a0 <_realloc_r+0x1e>
 800d5b6:	4629      	mov	r1, r5
 800d5b8:	4640      	mov	r0, r8
 800d5ba:	f7fd fe4d 	bl	800b258 <_malloc_r>
 800d5be:	4607      	mov	r7, r0
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	d0ec      	beq.n	800d59e <_realloc_r+0x1c>
 800d5c4:	42b5      	cmp	r5, r6
 800d5c6:	462a      	mov	r2, r5
 800d5c8:	4621      	mov	r1, r4
 800d5ca:	bf28      	it	cs
 800d5cc:	4632      	movcs	r2, r6
 800d5ce:	f7ff fc45 	bl	800ce5c <memcpy>
 800d5d2:	4621      	mov	r1, r4
 800d5d4:	4640      	mov	r0, r8
 800d5d6:	f7fd fdcb 	bl	800b170 <_free_r>
 800d5da:	463c      	mov	r4, r7
 800d5dc:	e7e0      	b.n	800d5a0 <_realloc_r+0x1e>

0800d5de <__ascii_wctomb>:
 800d5de:	4603      	mov	r3, r0
 800d5e0:	4608      	mov	r0, r1
 800d5e2:	b141      	cbz	r1, 800d5f6 <__ascii_wctomb+0x18>
 800d5e4:	2aff      	cmp	r2, #255	@ 0xff
 800d5e6:	d904      	bls.n	800d5f2 <__ascii_wctomb+0x14>
 800d5e8:	228a      	movs	r2, #138	@ 0x8a
 800d5ea:	601a      	str	r2, [r3, #0]
 800d5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f0:	4770      	bx	lr
 800d5f2:	700a      	strb	r2, [r1, #0]
 800d5f4:	2001      	movs	r0, #1
 800d5f6:	4770      	bx	lr

0800d5f8 <fiprintf>:
 800d5f8:	b40e      	push	{r1, r2, r3}
 800d5fa:	b503      	push	{r0, r1, lr}
 800d5fc:	4601      	mov	r1, r0
 800d5fe:	ab03      	add	r3, sp, #12
 800d600:	4805      	ldr	r0, [pc, #20]	@ (800d618 <fiprintf+0x20>)
 800d602:	f853 2b04 	ldr.w	r2, [r3], #4
 800d606:	6800      	ldr	r0, [r0, #0]
 800d608:	9301      	str	r3, [sp, #4]
 800d60a:	f000 f83f 	bl	800d68c <_vfiprintf_r>
 800d60e:	b002      	add	sp, #8
 800d610:	f85d eb04 	ldr.w	lr, [sp], #4
 800d614:	b003      	add	sp, #12
 800d616:	4770      	bx	lr
 800d618:	20000018 	.word	0x20000018

0800d61c <abort>:
 800d61c:	b508      	push	{r3, lr}
 800d61e:	2006      	movs	r0, #6
 800d620:	f000 fa08 	bl	800da34 <raise>
 800d624:	2001      	movs	r0, #1
 800d626:	f7f5 fb31 	bl	8002c8c <_exit>

0800d62a <_malloc_usable_size_r>:
 800d62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d62e:	1f18      	subs	r0, r3, #4
 800d630:	2b00      	cmp	r3, #0
 800d632:	bfbc      	itt	lt
 800d634:	580b      	ldrlt	r3, [r1, r0]
 800d636:	18c0      	addlt	r0, r0, r3
 800d638:	4770      	bx	lr

0800d63a <__sfputc_r>:
 800d63a:	6893      	ldr	r3, [r2, #8]
 800d63c:	3b01      	subs	r3, #1
 800d63e:	2b00      	cmp	r3, #0
 800d640:	b410      	push	{r4}
 800d642:	6093      	str	r3, [r2, #8]
 800d644:	da08      	bge.n	800d658 <__sfputc_r+0x1e>
 800d646:	6994      	ldr	r4, [r2, #24]
 800d648:	42a3      	cmp	r3, r4
 800d64a:	db01      	blt.n	800d650 <__sfputc_r+0x16>
 800d64c:	290a      	cmp	r1, #10
 800d64e:	d103      	bne.n	800d658 <__sfputc_r+0x1e>
 800d650:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d654:	f000 b932 	b.w	800d8bc <__swbuf_r>
 800d658:	6813      	ldr	r3, [r2, #0]
 800d65a:	1c58      	adds	r0, r3, #1
 800d65c:	6010      	str	r0, [r2, #0]
 800d65e:	7019      	strb	r1, [r3, #0]
 800d660:	4608      	mov	r0, r1
 800d662:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <__sfputs_r>:
 800d668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66a:	4606      	mov	r6, r0
 800d66c:	460f      	mov	r7, r1
 800d66e:	4614      	mov	r4, r2
 800d670:	18d5      	adds	r5, r2, r3
 800d672:	42ac      	cmp	r4, r5
 800d674:	d101      	bne.n	800d67a <__sfputs_r+0x12>
 800d676:	2000      	movs	r0, #0
 800d678:	e007      	b.n	800d68a <__sfputs_r+0x22>
 800d67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d67e:	463a      	mov	r2, r7
 800d680:	4630      	mov	r0, r6
 800d682:	f7ff ffda 	bl	800d63a <__sfputc_r>
 800d686:	1c43      	adds	r3, r0, #1
 800d688:	d1f3      	bne.n	800d672 <__sfputs_r+0xa>
 800d68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d68c <_vfiprintf_r>:
 800d68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d690:	460d      	mov	r5, r1
 800d692:	b09d      	sub	sp, #116	@ 0x74
 800d694:	4614      	mov	r4, r2
 800d696:	4698      	mov	r8, r3
 800d698:	4606      	mov	r6, r0
 800d69a:	b118      	cbz	r0, 800d6a4 <_vfiprintf_r+0x18>
 800d69c:	6a03      	ldr	r3, [r0, #32]
 800d69e:	b90b      	cbnz	r3, 800d6a4 <_vfiprintf_r+0x18>
 800d6a0:	f7fc fdfa 	bl	800a298 <__sinit>
 800d6a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6a6:	07d9      	lsls	r1, r3, #31
 800d6a8:	d405      	bmi.n	800d6b6 <_vfiprintf_r+0x2a>
 800d6aa:	89ab      	ldrh	r3, [r5, #12]
 800d6ac:	059a      	lsls	r2, r3, #22
 800d6ae:	d402      	bmi.n	800d6b6 <_vfiprintf_r+0x2a>
 800d6b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6b2:	f7fc ff08 	bl	800a4c6 <__retarget_lock_acquire_recursive>
 800d6b6:	89ab      	ldrh	r3, [r5, #12]
 800d6b8:	071b      	lsls	r3, r3, #28
 800d6ba:	d501      	bpl.n	800d6c0 <_vfiprintf_r+0x34>
 800d6bc:	692b      	ldr	r3, [r5, #16]
 800d6be:	b99b      	cbnz	r3, 800d6e8 <_vfiprintf_r+0x5c>
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	f000 f938 	bl	800d938 <__swsetup_r>
 800d6c8:	b170      	cbz	r0, 800d6e8 <_vfiprintf_r+0x5c>
 800d6ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6cc:	07dc      	lsls	r4, r3, #31
 800d6ce:	d504      	bpl.n	800d6da <_vfiprintf_r+0x4e>
 800d6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d4:	b01d      	add	sp, #116	@ 0x74
 800d6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6da:	89ab      	ldrh	r3, [r5, #12]
 800d6dc:	0598      	lsls	r0, r3, #22
 800d6de:	d4f7      	bmi.n	800d6d0 <_vfiprintf_r+0x44>
 800d6e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6e2:	f7fc fef1 	bl	800a4c8 <__retarget_lock_release_recursive>
 800d6e6:	e7f3      	b.n	800d6d0 <_vfiprintf_r+0x44>
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6ec:	2320      	movs	r3, #32
 800d6ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6f6:	2330      	movs	r3, #48	@ 0x30
 800d6f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d8a8 <_vfiprintf_r+0x21c>
 800d6fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d700:	f04f 0901 	mov.w	r9, #1
 800d704:	4623      	mov	r3, r4
 800d706:	469a      	mov	sl, r3
 800d708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d70c:	b10a      	cbz	r2, 800d712 <_vfiprintf_r+0x86>
 800d70e:	2a25      	cmp	r2, #37	@ 0x25
 800d710:	d1f9      	bne.n	800d706 <_vfiprintf_r+0x7a>
 800d712:	ebba 0b04 	subs.w	fp, sl, r4
 800d716:	d00b      	beq.n	800d730 <_vfiprintf_r+0xa4>
 800d718:	465b      	mov	r3, fp
 800d71a:	4622      	mov	r2, r4
 800d71c:	4629      	mov	r1, r5
 800d71e:	4630      	mov	r0, r6
 800d720:	f7ff ffa2 	bl	800d668 <__sfputs_r>
 800d724:	3001      	adds	r0, #1
 800d726:	f000 80a7 	beq.w	800d878 <_vfiprintf_r+0x1ec>
 800d72a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d72c:	445a      	add	r2, fp
 800d72e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d730:	f89a 3000 	ldrb.w	r3, [sl]
 800d734:	2b00      	cmp	r3, #0
 800d736:	f000 809f 	beq.w	800d878 <_vfiprintf_r+0x1ec>
 800d73a:	2300      	movs	r3, #0
 800d73c:	f04f 32ff 	mov.w	r2, #4294967295
 800d740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d744:	f10a 0a01 	add.w	sl, sl, #1
 800d748:	9304      	str	r3, [sp, #16]
 800d74a:	9307      	str	r3, [sp, #28]
 800d74c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d750:	931a      	str	r3, [sp, #104]	@ 0x68
 800d752:	4654      	mov	r4, sl
 800d754:	2205      	movs	r2, #5
 800d756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d75a:	4853      	ldr	r0, [pc, #332]	@ (800d8a8 <_vfiprintf_r+0x21c>)
 800d75c:	f7f2 fd60 	bl	8000220 <memchr>
 800d760:	9a04      	ldr	r2, [sp, #16]
 800d762:	b9d8      	cbnz	r0, 800d79c <_vfiprintf_r+0x110>
 800d764:	06d1      	lsls	r1, r2, #27
 800d766:	bf44      	itt	mi
 800d768:	2320      	movmi	r3, #32
 800d76a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d76e:	0713      	lsls	r3, r2, #28
 800d770:	bf44      	itt	mi
 800d772:	232b      	movmi	r3, #43	@ 0x2b
 800d774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d778:	f89a 3000 	ldrb.w	r3, [sl]
 800d77c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d77e:	d015      	beq.n	800d7ac <_vfiprintf_r+0x120>
 800d780:	9a07      	ldr	r2, [sp, #28]
 800d782:	4654      	mov	r4, sl
 800d784:	2000      	movs	r0, #0
 800d786:	f04f 0c0a 	mov.w	ip, #10
 800d78a:	4621      	mov	r1, r4
 800d78c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d790:	3b30      	subs	r3, #48	@ 0x30
 800d792:	2b09      	cmp	r3, #9
 800d794:	d94b      	bls.n	800d82e <_vfiprintf_r+0x1a2>
 800d796:	b1b0      	cbz	r0, 800d7c6 <_vfiprintf_r+0x13a>
 800d798:	9207      	str	r2, [sp, #28]
 800d79a:	e014      	b.n	800d7c6 <_vfiprintf_r+0x13a>
 800d79c:	eba0 0308 	sub.w	r3, r0, r8
 800d7a0:	fa09 f303 	lsl.w	r3, r9, r3
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	9304      	str	r3, [sp, #16]
 800d7a8:	46a2      	mov	sl, r4
 800d7aa:	e7d2      	b.n	800d752 <_vfiprintf_r+0xc6>
 800d7ac:	9b03      	ldr	r3, [sp, #12]
 800d7ae:	1d19      	adds	r1, r3, #4
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	9103      	str	r1, [sp, #12]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	bfbb      	ittet	lt
 800d7b8:	425b      	neglt	r3, r3
 800d7ba:	f042 0202 	orrlt.w	r2, r2, #2
 800d7be:	9307      	strge	r3, [sp, #28]
 800d7c0:	9307      	strlt	r3, [sp, #28]
 800d7c2:	bfb8      	it	lt
 800d7c4:	9204      	strlt	r2, [sp, #16]
 800d7c6:	7823      	ldrb	r3, [r4, #0]
 800d7c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7ca:	d10a      	bne.n	800d7e2 <_vfiprintf_r+0x156>
 800d7cc:	7863      	ldrb	r3, [r4, #1]
 800d7ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7d0:	d132      	bne.n	800d838 <_vfiprintf_r+0x1ac>
 800d7d2:	9b03      	ldr	r3, [sp, #12]
 800d7d4:	1d1a      	adds	r2, r3, #4
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	9203      	str	r2, [sp, #12]
 800d7da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7de:	3402      	adds	r4, #2
 800d7e0:	9305      	str	r3, [sp, #20]
 800d7e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d8b8 <_vfiprintf_r+0x22c>
 800d7e6:	7821      	ldrb	r1, [r4, #0]
 800d7e8:	2203      	movs	r2, #3
 800d7ea:	4650      	mov	r0, sl
 800d7ec:	f7f2 fd18 	bl	8000220 <memchr>
 800d7f0:	b138      	cbz	r0, 800d802 <_vfiprintf_r+0x176>
 800d7f2:	9b04      	ldr	r3, [sp, #16]
 800d7f4:	eba0 000a 	sub.w	r0, r0, sl
 800d7f8:	2240      	movs	r2, #64	@ 0x40
 800d7fa:	4082      	lsls	r2, r0
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	3401      	adds	r4, #1
 800d800:	9304      	str	r3, [sp, #16]
 800d802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d806:	4829      	ldr	r0, [pc, #164]	@ (800d8ac <_vfiprintf_r+0x220>)
 800d808:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d80c:	2206      	movs	r2, #6
 800d80e:	f7f2 fd07 	bl	8000220 <memchr>
 800d812:	2800      	cmp	r0, #0
 800d814:	d03f      	beq.n	800d896 <_vfiprintf_r+0x20a>
 800d816:	4b26      	ldr	r3, [pc, #152]	@ (800d8b0 <_vfiprintf_r+0x224>)
 800d818:	bb1b      	cbnz	r3, 800d862 <_vfiprintf_r+0x1d6>
 800d81a:	9b03      	ldr	r3, [sp, #12]
 800d81c:	3307      	adds	r3, #7
 800d81e:	f023 0307 	bic.w	r3, r3, #7
 800d822:	3308      	adds	r3, #8
 800d824:	9303      	str	r3, [sp, #12]
 800d826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d828:	443b      	add	r3, r7
 800d82a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d82c:	e76a      	b.n	800d704 <_vfiprintf_r+0x78>
 800d82e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d832:	460c      	mov	r4, r1
 800d834:	2001      	movs	r0, #1
 800d836:	e7a8      	b.n	800d78a <_vfiprintf_r+0xfe>
 800d838:	2300      	movs	r3, #0
 800d83a:	3401      	adds	r4, #1
 800d83c:	9305      	str	r3, [sp, #20]
 800d83e:	4619      	mov	r1, r3
 800d840:	f04f 0c0a 	mov.w	ip, #10
 800d844:	4620      	mov	r0, r4
 800d846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d84a:	3a30      	subs	r2, #48	@ 0x30
 800d84c:	2a09      	cmp	r2, #9
 800d84e:	d903      	bls.n	800d858 <_vfiprintf_r+0x1cc>
 800d850:	2b00      	cmp	r3, #0
 800d852:	d0c6      	beq.n	800d7e2 <_vfiprintf_r+0x156>
 800d854:	9105      	str	r1, [sp, #20]
 800d856:	e7c4      	b.n	800d7e2 <_vfiprintf_r+0x156>
 800d858:	fb0c 2101 	mla	r1, ip, r1, r2
 800d85c:	4604      	mov	r4, r0
 800d85e:	2301      	movs	r3, #1
 800d860:	e7f0      	b.n	800d844 <_vfiprintf_r+0x1b8>
 800d862:	ab03      	add	r3, sp, #12
 800d864:	9300      	str	r3, [sp, #0]
 800d866:	462a      	mov	r2, r5
 800d868:	4b12      	ldr	r3, [pc, #72]	@ (800d8b4 <_vfiprintf_r+0x228>)
 800d86a:	a904      	add	r1, sp, #16
 800d86c:	4630      	mov	r0, r6
 800d86e:	f7fb febb 	bl	80095e8 <_printf_float>
 800d872:	4607      	mov	r7, r0
 800d874:	1c78      	adds	r0, r7, #1
 800d876:	d1d6      	bne.n	800d826 <_vfiprintf_r+0x19a>
 800d878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d87a:	07d9      	lsls	r1, r3, #31
 800d87c:	d405      	bmi.n	800d88a <_vfiprintf_r+0x1fe>
 800d87e:	89ab      	ldrh	r3, [r5, #12]
 800d880:	059a      	lsls	r2, r3, #22
 800d882:	d402      	bmi.n	800d88a <_vfiprintf_r+0x1fe>
 800d884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d886:	f7fc fe1f 	bl	800a4c8 <__retarget_lock_release_recursive>
 800d88a:	89ab      	ldrh	r3, [r5, #12]
 800d88c:	065b      	lsls	r3, r3, #25
 800d88e:	f53f af1f 	bmi.w	800d6d0 <_vfiprintf_r+0x44>
 800d892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d894:	e71e      	b.n	800d6d4 <_vfiprintf_r+0x48>
 800d896:	ab03      	add	r3, sp, #12
 800d898:	9300      	str	r3, [sp, #0]
 800d89a:	462a      	mov	r2, r5
 800d89c:	4b05      	ldr	r3, [pc, #20]	@ (800d8b4 <_vfiprintf_r+0x228>)
 800d89e:	a904      	add	r1, sp, #16
 800d8a0:	4630      	mov	r0, r6
 800d8a2:	f7fc f939 	bl	8009b18 <_printf_i>
 800d8a6:	e7e4      	b.n	800d872 <_vfiprintf_r+0x1e6>
 800d8a8:	0800e1b1 	.word	0x0800e1b1
 800d8ac:	0800e1bb 	.word	0x0800e1bb
 800d8b0:	080095e9 	.word	0x080095e9
 800d8b4:	0800d669 	.word	0x0800d669
 800d8b8:	0800e1b7 	.word	0x0800e1b7

0800d8bc <__swbuf_r>:
 800d8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8be:	460e      	mov	r6, r1
 800d8c0:	4614      	mov	r4, r2
 800d8c2:	4605      	mov	r5, r0
 800d8c4:	b118      	cbz	r0, 800d8ce <__swbuf_r+0x12>
 800d8c6:	6a03      	ldr	r3, [r0, #32]
 800d8c8:	b90b      	cbnz	r3, 800d8ce <__swbuf_r+0x12>
 800d8ca:	f7fc fce5 	bl	800a298 <__sinit>
 800d8ce:	69a3      	ldr	r3, [r4, #24]
 800d8d0:	60a3      	str	r3, [r4, #8]
 800d8d2:	89a3      	ldrh	r3, [r4, #12]
 800d8d4:	071a      	lsls	r2, r3, #28
 800d8d6:	d501      	bpl.n	800d8dc <__swbuf_r+0x20>
 800d8d8:	6923      	ldr	r3, [r4, #16]
 800d8da:	b943      	cbnz	r3, 800d8ee <__swbuf_r+0x32>
 800d8dc:	4621      	mov	r1, r4
 800d8de:	4628      	mov	r0, r5
 800d8e0:	f000 f82a 	bl	800d938 <__swsetup_r>
 800d8e4:	b118      	cbz	r0, 800d8ee <__swbuf_r+0x32>
 800d8e6:	f04f 37ff 	mov.w	r7, #4294967295
 800d8ea:	4638      	mov	r0, r7
 800d8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8ee:	6823      	ldr	r3, [r4, #0]
 800d8f0:	6922      	ldr	r2, [r4, #16]
 800d8f2:	1a98      	subs	r0, r3, r2
 800d8f4:	6963      	ldr	r3, [r4, #20]
 800d8f6:	b2f6      	uxtb	r6, r6
 800d8f8:	4283      	cmp	r3, r0
 800d8fa:	4637      	mov	r7, r6
 800d8fc:	dc05      	bgt.n	800d90a <__swbuf_r+0x4e>
 800d8fe:	4621      	mov	r1, r4
 800d900:	4628      	mov	r0, r5
 800d902:	f7ff fa47 	bl	800cd94 <_fflush_r>
 800d906:	2800      	cmp	r0, #0
 800d908:	d1ed      	bne.n	800d8e6 <__swbuf_r+0x2a>
 800d90a:	68a3      	ldr	r3, [r4, #8]
 800d90c:	3b01      	subs	r3, #1
 800d90e:	60a3      	str	r3, [r4, #8]
 800d910:	6823      	ldr	r3, [r4, #0]
 800d912:	1c5a      	adds	r2, r3, #1
 800d914:	6022      	str	r2, [r4, #0]
 800d916:	701e      	strb	r6, [r3, #0]
 800d918:	6962      	ldr	r2, [r4, #20]
 800d91a:	1c43      	adds	r3, r0, #1
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d004      	beq.n	800d92a <__swbuf_r+0x6e>
 800d920:	89a3      	ldrh	r3, [r4, #12]
 800d922:	07db      	lsls	r3, r3, #31
 800d924:	d5e1      	bpl.n	800d8ea <__swbuf_r+0x2e>
 800d926:	2e0a      	cmp	r6, #10
 800d928:	d1df      	bne.n	800d8ea <__swbuf_r+0x2e>
 800d92a:	4621      	mov	r1, r4
 800d92c:	4628      	mov	r0, r5
 800d92e:	f7ff fa31 	bl	800cd94 <_fflush_r>
 800d932:	2800      	cmp	r0, #0
 800d934:	d0d9      	beq.n	800d8ea <__swbuf_r+0x2e>
 800d936:	e7d6      	b.n	800d8e6 <__swbuf_r+0x2a>

0800d938 <__swsetup_r>:
 800d938:	b538      	push	{r3, r4, r5, lr}
 800d93a:	4b29      	ldr	r3, [pc, #164]	@ (800d9e0 <__swsetup_r+0xa8>)
 800d93c:	4605      	mov	r5, r0
 800d93e:	6818      	ldr	r0, [r3, #0]
 800d940:	460c      	mov	r4, r1
 800d942:	b118      	cbz	r0, 800d94c <__swsetup_r+0x14>
 800d944:	6a03      	ldr	r3, [r0, #32]
 800d946:	b90b      	cbnz	r3, 800d94c <__swsetup_r+0x14>
 800d948:	f7fc fca6 	bl	800a298 <__sinit>
 800d94c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d950:	0719      	lsls	r1, r3, #28
 800d952:	d422      	bmi.n	800d99a <__swsetup_r+0x62>
 800d954:	06da      	lsls	r2, r3, #27
 800d956:	d407      	bmi.n	800d968 <__swsetup_r+0x30>
 800d958:	2209      	movs	r2, #9
 800d95a:	602a      	str	r2, [r5, #0]
 800d95c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d960:	81a3      	strh	r3, [r4, #12]
 800d962:	f04f 30ff 	mov.w	r0, #4294967295
 800d966:	e033      	b.n	800d9d0 <__swsetup_r+0x98>
 800d968:	0758      	lsls	r0, r3, #29
 800d96a:	d512      	bpl.n	800d992 <__swsetup_r+0x5a>
 800d96c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d96e:	b141      	cbz	r1, 800d982 <__swsetup_r+0x4a>
 800d970:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d974:	4299      	cmp	r1, r3
 800d976:	d002      	beq.n	800d97e <__swsetup_r+0x46>
 800d978:	4628      	mov	r0, r5
 800d97a:	f7fd fbf9 	bl	800b170 <_free_r>
 800d97e:	2300      	movs	r3, #0
 800d980:	6363      	str	r3, [r4, #52]	@ 0x34
 800d982:	89a3      	ldrh	r3, [r4, #12]
 800d984:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d988:	81a3      	strh	r3, [r4, #12]
 800d98a:	2300      	movs	r3, #0
 800d98c:	6063      	str	r3, [r4, #4]
 800d98e:	6923      	ldr	r3, [r4, #16]
 800d990:	6023      	str	r3, [r4, #0]
 800d992:	89a3      	ldrh	r3, [r4, #12]
 800d994:	f043 0308 	orr.w	r3, r3, #8
 800d998:	81a3      	strh	r3, [r4, #12]
 800d99a:	6923      	ldr	r3, [r4, #16]
 800d99c:	b94b      	cbnz	r3, 800d9b2 <__swsetup_r+0x7a>
 800d99e:	89a3      	ldrh	r3, [r4, #12]
 800d9a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d9a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d9a8:	d003      	beq.n	800d9b2 <__swsetup_r+0x7a>
 800d9aa:	4621      	mov	r1, r4
 800d9ac:	4628      	mov	r0, r5
 800d9ae:	f000 f883 	bl	800dab8 <__smakebuf_r>
 800d9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9b6:	f013 0201 	ands.w	r2, r3, #1
 800d9ba:	d00a      	beq.n	800d9d2 <__swsetup_r+0x9a>
 800d9bc:	2200      	movs	r2, #0
 800d9be:	60a2      	str	r2, [r4, #8]
 800d9c0:	6962      	ldr	r2, [r4, #20]
 800d9c2:	4252      	negs	r2, r2
 800d9c4:	61a2      	str	r2, [r4, #24]
 800d9c6:	6922      	ldr	r2, [r4, #16]
 800d9c8:	b942      	cbnz	r2, 800d9dc <__swsetup_r+0xa4>
 800d9ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d9ce:	d1c5      	bne.n	800d95c <__swsetup_r+0x24>
 800d9d0:	bd38      	pop	{r3, r4, r5, pc}
 800d9d2:	0799      	lsls	r1, r3, #30
 800d9d4:	bf58      	it	pl
 800d9d6:	6962      	ldrpl	r2, [r4, #20]
 800d9d8:	60a2      	str	r2, [r4, #8]
 800d9da:	e7f4      	b.n	800d9c6 <__swsetup_r+0x8e>
 800d9dc:	2000      	movs	r0, #0
 800d9de:	e7f7      	b.n	800d9d0 <__swsetup_r+0x98>
 800d9e0:	20000018 	.word	0x20000018

0800d9e4 <_raise_r>:
 800d9e4:	291f      	cmp	r1, #31
 800d9e6:	b538      	push	{r3, r4, r5, lr}
 800d9e8:	4605      	mov	r5, r0
 800d9ea:	460c      	mov	r4, r1
 800d9ec:	d904      	bls.n	800d9f8 <_raise_r+0x14>
 800d9ee:	2316      	movs	r3, #22
 800d9f0:	6003      	str	r3, [r0, #0]
 800d9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f6:	bd38      	pop	{r3, r4, r5, pc}
 800d9f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d9fa:	b112      	cbz	r2, 800da02 <_raise_r+0x1e>
 800d9fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da00:	b94b      	cbnz	r3, 800da16 <_raise_r+0x32>
 800da02:	4628      	mov	r0, r5
 800da04:	f000 f830 	bl	800da68 <_getpid_r>
 800da08:	4622      	mov	r2, r4
 800da0a:	4601      	mov	r1, r0
 800da0c:	4628      	mov	r0, r5
 800da0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da12:	f000 b817 	b.w	800da44 <_kill_r>
 800da16:	2b01      	cmp	r3, #1
 800da18:	d00a      	beq.n	800da30 <_raise_r+0x4c>
 800da1a:	1c59      	adds	r1, r3, #1
 800da1c:	d103      	bne.n	800da26 <_raise_r+0x42>
 800da1e:	2316      	movs	r3, #22
 800da20:	6003      	str	r3, [r0, #0]
 800da22:	2001      	movs	r0, #1
 800da24:	e7e7      	b.n	800d9f6 <_raise_r+0x12>
 800da26:	2100      	movs	r1, #0
 800da28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800da2c:	4620      	mov	r0, r4
 800da2e:	4798      	blx	r3
 800da30:	2000      	movs	r0, #0
 800da32:	e7e0      	b.n	800d9f6 <_raise_r+0x12>

0800da34 <raise>:
 800da34:	4b02      	ldr	r3, [pc, #8]	@ (800da40 <raise+0xc>)
 800da36:	4601      	mov	r1, r0
 800da38:	6818      	ldr	r0, [r3, #0]
 800da3a:	f7ff bfd3 	b.w	800d9e4 <_raise_r>
 800da3e:	bf00      	nop
 800da40:	20000018 	.word	0x20000018

0800da44 <_kill_r>:
 800da44:	b538      	push	{r3, r4, r5, lr}
 800da46:	4d07      	ldr	r5, [pc, #28]	@ (800da64 <_kill_r+0x20>)
 800da48:	2300      	movs	r3, #0
 800da4a:	4604      	mov	r4, r0
 800da4c:	4608      	mov	r0, r1
 800da4e:	4611      	mov	r1, r2
 800da50:	602b      	str	r3, [r5, #0]
 800da52:	f7f5 f90b 	bl	8002c6c <_kill>
 800da56:	1c43      	adds	r3, r0, #1
 800da58:	d102      	bne.n	800da60 <_kill_r+0x1c>
 800da5a:	682b      	ldr	r3, [r5, #0]
 800da5c:	b103      	cbz	r3, 800da60 <_kill_r+0x1c>
 800da5e:	6023      	str	r3, [r4, #0]
 800da60:	bd38      	pop	{r3, r4, r5, pc}
 800da62:	bf00      	nop
 800da64:	20002834 	.word	0x20002834

0800da68 <_getpid_r>:
 800da68:	f7f5 b8f8 	b.w	8002c5c <_getpid>

0800da6c <__swhatbuf_r>:
 800da6c:	b570      	push	{r4, r5, r6, lr}
 800da6e:	460c      	mov	r4, r1
 800da70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da74:	2900      	cmp	r1, #0
 800da76:	b096      	sub	sp, #88	@ 0x58
 800da78:	4615      	mov	r5, r2
 800da7a:	461e      	mov	r6, r3
 800da7c:	da0d      	bge.n	800da9a <__swhatbuf_r+0x2e>
 800da7e:	89a3      	ldrh	r3, [r4, #12]
 800da80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da84:	f04f 0100 	mov.w	r1, #0
 800da88:	bf14      	ite	ne
 800da8a:	2340      	movne	r3, #64	@ 0x40
 800da8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800da90:	2000      	movs	r0, #0
 800da92:	6031      	str	r1, [r6, #0]
 800da94:	602b      	str	r3, [r5, #0]
 800da96:	b016      	add	sp, #88	@ 0x58
 800da98:	bd70      	pop	{r4, r5, r6, pc}
 800da9a:	466a      	mov	r2, sp
 800da9c:	f000 f848 	bl	800db30 <_fstat_r>
 800daa0:	2800      	cmp	r0, #0
 800daa2:	dbec      	blt.n	800da7e <__swhatbuf_r+0x12>
 800daa4:	9901      	ldr	r1, [sp, #4]
 800daa6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800daaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800daae:	4259      	negs	r1, r3
 800dab0:	4159      	adcs	r1, r3
 800dab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dab6:	e7eb      	b.n	800da90 <__swhatbuf_r+0x24>

0800dab8 <__smakebuf_r>:
 800dab8:	898b      	ldrh	r3, [r1, #12]
 800daba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dabc:	079d      	lsls	r5, r3, #30
 800dabe:	4606      	mov	r6, r0
 800dac0:	460c      	mov	r4, r1
 800dac2:	d507      	bpl.n	800dad4 <__smakebuf_r+0x1c>
 800dac4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dac8:	6023      	str	r3, [r4, #0]
 800daca:	6123      	str	r3, [r4, #16]
 800dacc:	2301      	movs	r3, #1
 800dace:	6163      	str	r3, [r4, #20]
 800dad0:	b003      	add	sp, #12
 800dad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dad4:	ab01      	add	r3, sp, #4
 800dad6:	466a      	mov	r2, sp
 800dad8:	f7ff ffc8 	bl	800da6c <__swhatbuf_r>
 800dadc:	9f00      	ldr	r7, [sp, #0]
 800dade:	4605      	mov	r5, r0
 800dae0:	4639      	mov	r1, r7
 800dae2:	4630      	mov	r0, r6
 800dae4:	f7fd fbb8 	bl	800b258 <_malloc_r>
 800dae8:	b948      	cbnz	r0, 800dafe <__smakebuf_r+0x46>
 800daea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daee:	059a      	lsls	r2, r3, #22
 800daf0:	d4ee      	bmi.n	800dad0 <__smakebuf_r+0x18>
 800daf2:	f023 0303 	bic.w	r3, r3, #3
 800daf6:	f043 0302 	orr.w	r3, r3, #2
 800dafa:	81a3      	strh	r3, [r4, #12]
 800dafc:	e7e2      	b.n	800dac4 <__smakebuf_r+0xc>
 800dafe:	89a3      	ldrh	r3, [r4, #12]
 800db00:	6020      	str	r0, [r4, #0]
 800db02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db06:	81a3      	strh	r3, [r4, #12]
 800db08:	9b01      	ldr	r3, [sp, #4]
 800db0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800db0e:	b15b      	cbz	r3, 800db28 <__smakebuf_r+0x70>
 800db10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db14:	4630      	mov	r0, r6
 800db16:	f000 f81d 	bl	800db54 <_isatty_r>
 800db1a:	b128      	cbz	r0, 800db28 <__smakebuf_r+0x70>
 800db1c:	89a3      	ldrh	r3, [r4, #12]
 800db1e:	f023 0303 	bic.w	r3, r3, #3
 800db22:	f043 0301 	orr.w	r3, r3, #1
 800db26:	81a3      	strh	r3, [r4, #12]
 800db28:	89a3      	ldrh	r3, [r4, #12]
 800db2a:	431d      	orrs	r5, r3
 800db2c:	81a5      	strh	r5, [r4, #12]
 800db2e:	e7cf      	b.n	800dad0 <__smakebuf_r+0x18>

0800db30 <_fstat_r>:
 800db30:	b538      	push	{r3, r4, r5, lr}
 800db32:	4d07      	ldr	r5, [pc, #28]	@ (800db50 <_fstat_r+0x20>)
 800db34:	2300      	movs	r3, #0
 800db36:	4604      	mov	r4, r0
 800db38:	4608      	mov	r0, r1
 800db3a:	4611      	mov	r1, r2
 800db3c:	602b      	str	r3, [r5, #0]
 800db3e:	f7f5 f8d9 	bl	8002cf4 <_fstat>
 800db42:	1c43      	adds	r3, r0, #1
 800db44:	d102      	bne.n	800db4c <_fstat_r+0x1c>
 800db46:	682b      	ldr	r3, [r5, #0]
 800db48:	b103      	cbz	r3, 800db4c <_fstat_r+0x1c>
 800db4a:	6023      	str	r3, [r4, #0]
 800db4c:	bd38      	pop	{r3, r4, r5, pc}
 800db4e:	bf00      	nop
 800db50:	20002834 	.word	0x20002834

0800db54 <_isatty_r>:
 800db54:	b538      	push	{r3, r4, r5, lr}
 800db56:	4d06      	ldr	r5, [pc, #24]	@ (800db70 <_isatty_r+0x1c>)
 800db58:	2300      	movs	r3, #0
 800db5a:	4604      	mov	r4, r0
 800db5c:	4608      	mov	r0, r1
 800db5e:	602b      	str	r3, [r5, #0]
 800db60:	f7f5 f8d8 	bl	8002d14 <_isatty>
 800db64:	1c43      	adds	r3, r0, #1
 800db66:	d102      	bne.n	800db6e <_isatty_r+0x1a>
 800db68:	682b      	ldr	r3, [r5, #0]
 800db6a:	b103      	cbz	r3, 800db6e <_isatty_r+0x1a>
 800db6c:	6023      	str	r3, [r4, #0]
 800db6e:	bd38      	pop	{r3, r4, r5, pc}
 800db70:	20002834 	.word	0x20002834

0800db74 <expf>:
 800db74:	b508      	push	{r3, lr}
 800db76:	ed2d 8b02 	vpush	{d8}
 800db7a:	eef0 8a40 	vmov.f32	s17, s0
 800db7e:	f000 f839 	bl	800dbf4 <__ieee754_expf>
 800db82:	eeb0 8a40 	vmov.f32	s16, s0
 800db86:	eeb0 0a68 	vmov.f32	s0, s17
 800db8a:	f000 f829 	bl	800dbe0 <finitef>
 800db8e:	b160      	cbz	r0, 800dbaa <expf+0x36>
 800db90:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800dbd0 <expf+0x5c>
 800db94:	eef4 8ae7 	vcmpe.f32	s17, s15
 800db98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db9c:	dd0a      	ble.n	800dbb4 <expf+0x40>
 800db9e:	f7fc fc67 	bl	800a470 <__errno>
 800dba2:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800dbd4 <expf+0x60>
 800dba6:	2322      	movs	r3, #34	@ 0x22
 800dba8:	6003      	str	r3, [r0, #0]
 800dbaa:	eeb0 0a48 	vmov.f32	s0, s16
 800dbae:	ecbd 8b02 	vpop	{d8}
 800dbb2:	bd08      	pop	{r3, pc}
 800dbb4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800dbd8 <expf+0x64>
 800dbb8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800dbbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbc0:	d5f3      	bpl.n	800dbaa <expf+0x36>
 800dbc2:	f7fc fc55 	bl	800a470 <__errno>
 800dbc6:	2322      	movs	r3, #34	@ 0x22
 800dbc8:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800dbdc <expf+0x68>
 800dbcc:	6003      	str	r3, [r0, #0]
 800dbce:	e7ec      	b.n	800dbaa <expf+0x36>
 800dbd0:	42b17217 	.word	0x42b17217
 800dbd4:	7f800000 	.word	0x7f800000
 800dbd8:	c2cff1b5 	.word	0xc2cff1b5
 800dbdc:	00000000 	.word	0x00000000

0800dbe0 <finitef>:
 800dbe0:	ee10 3a10 	vmov	r3, s0
 800dbe4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800dbe8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800dbec:	bfac      	ite	ge
 800dbee:	2000      	movge	r0, #0
 800dbf0:	2001      	movlt	r0, #1
 800dbf2:	4770      	bx	lr

0800dbf4 <__ieee754_expf>:
 800dbf4:	ee10 2a10 	vmov	r2, s0
 800dbf8:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800dbfc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800dc00:	d902      	bls.n	800dc08 <__ieee754_expf+0x14>
 800dc02:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dc06:	4770      	bx	lr
 800dc08:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800dc0c:	d106      	bne.n	800dc1c <__ieee754_expf+0x28>
 800dc0e:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800dd48 <__ieee754_expf+0x154>
 800dc12:	2900      	cmp	r1, #0
 800dc14:	bf18      	it	ne
 800dc16:	eeb0 0a67 	vmovne.f32	s0, s15
 800dc1a:	4770      	bx	lr
 800dc1c:	484b      	ldr	r0, [pc, #300]	@ (800dd4c <__ieee754_expf+0x158>)
 800dc1e:	4282      	cmp	r2, r0
 800dc20:	dd02      	ble.n	800dc28 <__ieee754_expf+0x34>
 800dc22:	2000      	movs	r0, #0
 800dc24:	f000 b8d4 	b.w	800ddd0 <__math_oflowf>
 800dc28:	2a00      	cmp	r2, #0
 800dc2a:	da05      	bge.n	800dc38 <__ieee754_expf+0x44>
 800dc2c:	4a48      	ldr	r2, [pc, #288]	@ (800dd50 <__ieee754_expf+0x15c>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d902      	bls.n	800dc38 <__ieee754_expf+0x44>
 800dc32:	2000      	movs	r0, #0
 800dc34:	f000 b8c6 	b.w	800ddc4 <__math_uflowf>
 800dc38:	4a46      	ldr	r2, [pc, #280]	@ (800dd54 <__ieee754_expf+0x160>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800dc40:	d952      	bls.n	800dce8 <__ieee754_expf+0xf4>
 800dc42:	4a45      	ldr	r2, [pc, #276]	@ (800dd58 <__ieee754_expf+0x164>)
 800dc44:	4293      	cmp	r3, r2
 800dc46:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800dc4a:	d834      	bhi.n	800dcb6 <__ieee754_expf+0xc2>
 800dc4c:	4b43      	ldr	r3, [pc, #268]	@ (800dd5c <__ieee754_expf+0x168>)
 800dc4e:	4413      	add	r3, r2
 800dc50:	ed93 7a00 	vldr	s14, [r3]
 800dc54:	4b42      	ldr	r3, [pc, #264]	@ (800dd60 <__ieee754_expf+0x16c>)
 800dc56:	4413      	add	r3, r2
 800dc58:	ee30 7a47 	vsub.f32	s14, s0, s14
 800dc5c:	f1c1 0201 	rsb	r2, r1, #1
 800dc60:	edd3 7a00 	vldr	s15, [r3]
 800dc64:	1a52      	subs	r2, r2, r1
 800dc66:	ee37 0a67 	vsub.f32	s0, s14, s15
 800dc6a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800dc6e:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800dd64 <__ieee754_expf+0x170>
 800dc72:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800dd68 <__ieee754_expf+0x174>
 800dc76:	eee6 6a05 	vfma.f32	s13, s12, s10
 800dc7a:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800dd6c <__ieee754_expf+0x178>
 800dc7e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800dc82:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800dd70 <__ieee754_expf+0x17c>
 800dc86:	eee5 6a06 	vfma.f32	s13, s10, s12
 800dc8a:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800dd74 <__ieee754_expf+0x180>
 800dc8e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800dc92:	eef0 6a40 	vmov.f32	s13, s0
 800dc96:	eee5 6a46 	vfms.f32	s13, s10, s12
 800dc9a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800dc9e:	ee20 5a26 	vmul.f32	s10, s0, s13
 800dca2:	bb92      	cbnz	r2, 800dd0a <__ieee754_expf+0x116>
 800dca4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800dca8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800dcac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800dcb0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800dcb4:	4770      	bx	lr
 800dcb6:	4b30      	ldr	r3, [pc, #192]	@ (800dd78 <__ieee754_expf+0x184>)
 800dcb8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800dd7c <__ieee754_expf+0x188>
 800dcbc:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800dd80 <__ieee754_expf+0x18c>
 800dcc0:	4413      	add	r3, r2
 800dcc2:	edd3 7a00 	vldr	s15, [r3]
 800dcc6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800dcca:	eeb0 7a40 	vmov.f32	s14, s0
 800dcce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcd2:	ee17 2a90 	vmov	r2, s15
 800dcd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcda:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800dcde:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800dd84 <__ieee754_expf+0x190>
 800dce2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dce6:	e7be      	b.n	800dc66 <__ieee754_expf+0x72>
 800dce8:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800dcec:	d20b      	bcs.n	800dd06 <__ieee754_expf+0x112>
 800dcee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800dd88 <__ieee754_expf+0x194>
 800dcf2:	ee70 6a26 	vadd.f32	s13, s0, s13
 800dcf6:	eef4 6ae5 	vcmpe.f32	s13, s11
 800dcfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcfe:	dd02      	ble.n	800dd06 <__ieee754_expf+0x112>
 800dd00:	ee30 0a25 	vadd.f32	s0, s0, s11
 800dd04:	4770      	bx	lr
 800dd06:	2200      	movs	r2, #0
 800dd08:	e7af      	b.n	800dc6a <__ieee754_expf+0x76>
 800dd0a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800dd0e:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800dd12:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800dd16:	bfb8      	it	lt
 800dd18:	3264      	addlt	r2, #100	@ 0x64
 800dd1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dd1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dd22:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800dd26:	ee17 3a90 	vmov	r3, s15
 800dd2a:	bfab      	itete	ge
 800dd2c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800dd30:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800dd34:	ee00 3a10 	vmovge	s0, r3
 800dd38:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800dd8c <__ieee754_expf+0x198>
 800dd3c:	bfbc      	itt	lt
 800dd3e:	ee00 3a10 	vmovlt	s0, r3
 800dd42:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800dd46:	4770      	bx	lr
 800dd48:	00000000 	.word	0x00000000
 800dd4c:	42b17217 	.word	0x42b17217
 800dd50:	42cff1b5 	.word	0x42cff1b5
 800dd54:	3eb17218 	.word	0x3eb17218
 800dd58:	3f851591 	.word	0x3f851591
 800dd5c:	0800e270 	.word	0x0800e270
 800dd60:	0800e268 	.word	0x0800e268
 800dd64:	3331bb4c 	.word	0x3331bb4c
 800dd68:	b5ddea0e 	.word	0xb5ddea0e
 800dd6c:	388ab355 	.word	0x388ab355
 800dd70:	bb360b61 	.word	0xbb360b61
 800dd74:	3e2aaaab 	.word	0x3e2aaaab
 800dd78:	0800e278 	.word	0x0800e278
 800dd7c:	3fb8aa3b 	.word	0x3fb8aa3b
 800dd80:	3f317180 	.word	0x3f317180
 800dd84:	3717f7d1 	.word	0x3717f7d1
 800dd88:	7149f2ca 	.word	0x7149f2ca
 800dd8c:	0d800000 	.word	0x0d800000

0800dd90 <with_errnof>:
 800dd90:	b510      	push	{r4, lr}
 800dd92:	ed2d 8b02 	vpush	{d8}
 800dd96:	eeb0 8a40 	vmov.f32	s16, s0
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	f7fc fb68 	bl	800a470 <__errno>
 800dda0:	eeb0 0a48 	vmov.f32	s0, s16
 800dda4:	ecbd 8b02 	vpop	{d8}
 800dda8:	6004      	str	r4, [r0, #0]
 800ddaa:	bd10      	pop	{r4, pc}

0800ddac <xflowf>:
 800ddac:	b130      	cbz	r0, 800ddbc <xflowf+0x10>
 800ddae:	eef1 7a40 	vneg.f32	s15, s0
 800ddb2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ddb6:	2022      	movs	r0, #34	@ 0x22
 800ddb8:	f7ff bfea 	b.w	800dd90 <with_errnof>
 800ddbc:	eef0 7a40 	vmov.f32	s15, s0
 800ddc0:	e7f7      	b.n	800ddb2 <xflowf+0x6>
	...

0800ddc4 <__math_uflowf>:
 800ddc4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ddcc <__math_uflowf+0x8>
 800ddc8:	f7ff bff0 	b.w	800ddac <xflowf>
 800ddcc:	10000000 	.word	0x10000000

0800ddd0 <__math_oflowf>:
 800ddd0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ddd8 <__math_oflowf+0x8>
 800ddd4:	f7ff bfea 	b.w	800ddac <xflowf>
 800ddd8:	70000000 	.word	0x70000000

0800dddc <_init>:
 800dddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddde:	bf00      	nop
 800dde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dde2:	bc08      	pop	{r3}
 800dde4:	469e      	mov	lr, r3
 800dde6:	4770      	bx	lr

0800dde8 <_fini>:
 800dde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddea:	bf00      	nop
 800ddec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddee:	bc08      	pop	{r3}
 800ddf0:	469e      	mov	lr, r3
 800ddf2:	4770      	bx	lr
